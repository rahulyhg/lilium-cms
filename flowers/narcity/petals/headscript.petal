{#config;theme;extra}
<script>
    // Head globals ////////////////////////////////////////////////
    window.lmlarticle = {};
    window.lmlcontext = "{=extra.contextname}";
    window.lmlurl = "{=config.default.server.url}";
    window.nsfw = "{=?extra.article.nsfw}" == "true";
    window.generators = {};

    // Utils ///////////////////////////////////////////////////////
    var dimWidths = {
        desktop : [970],
        tablet : [480, 970],   
        mobile : [0, 480]
    }

    // Returns true if current device is part of the array
    window.deviceIs = function(deviceArr) {
        deviceArr = typeof deviceArr === 'object' ? deviceArr : [deviceArr];
        for (var i = 0; i < deviceArr.length; i++) {
            var dims = dimWidths[deviceArr[i]];
            if (window.outerWidth >= dims[0] && (dims.length === 1 || window.outerWidth <= dims[1])) {
                return true;
            }
        }

        return false;
    };

    // Website glob ////////////////////////////////////////////////
    window.lmlsite = {
        property : "{=theme.settings.networkname}"
    };

    {$ if (extra.contextname == "article"); $}
    // Article glob ////////////////////////////////////////////////
    var url = document.location.href;
    var splt = url.split("/");
    if (!splt[splt.length-1]) {
        splt.pop();
    }
    var maybePage = splt.pop();
    if (!isNaN(maybePage)) {
        maybePage = parseInt(maybePage);
    } else {
        maybePage = 1;
    }

    window.lmlarticle = {
        identifier : "{=extra.article._id}",
        title : "{=&extra.article.title}",
        subtitle : "{=&extra.article.subtitle}",
        category : "{=extra.article.topic.displayname}",
        author : "{=?extra.article.authors.0.displayname}",
        tags : {=#extra.article.tags},
        page : maybePage,
        sponsored : ("{=?extra.article.isSponsored}" == "true")
    };
    {$ endif; $}

    // Local tracking //////////////////////////////////////////////
    var sesh = window.sessionStorage.getItem('narcitySession');
    if (!sesh) {
        sesh = {
            createdAt : new Date(),
            pageViewed : 0
        };
    } else {
        sesh = JSON.parse(sesh);
    }

    if (new Date() - new Date(sesh.createdAt) > 1000 * 60 * 60) {
        sesh.pageViewed = 0;
        sesh.createdAt = new Date();
    }

    sesh.pageViewed++;
    
    window.narcitySession = sesh;
    window.sessionStorage.setItem('narcitySession', JSON.stringify(sesh));

    // Dirty fixes /////////////////////////////////////////////////
    cygnus_index_args = {};
</script>
<script src="{=config.default.server.url}/compiled/theme/vaniryk.js?{=config.default.compilekey}"></script>

<script>
// AD TARGETING
if (typeof googletag != "undefined") {
        googletag.cmd.push(function() {
            googletag.pubads()
                {$ if (extra.contextname == "article"); $}
                .setTargeting("category", ["{=extra.article.topic.displayname}", "ROS"])
                    {$ if (?extra.article.data.wp_id); $}
                    .setTargeting("post", "{=?extra.article.data.wp_id}")
                    {$ else; $}
                    .setTargeting("contentid", "{=extra.article._id}")
                    {$ endif; $}
                {$ if (extra.contextname == "home"); $}
                .setTargeting("category", ["homepage"])
                {$ endif; $}
                .setTargeting('strnativekey', 'G6X4zbWEuSdvaWYd9F2QwDEi')
            ;

            // Run the whole thing    
            googletag.pubads().enableAsyncRendering();
            googletag.enableServices();
        });
}


</script>

<script>
var fetchTrending = function() {
    var tUrl = "{=config.default.server.url}/whatshot";
    var gotTrending = function() {
        var tResp = this.responseText;
        if (typeof tResp == "string") {
            try {
                tResp = JSON.parse(tResp);
            } catch (jsonparseex) {
                tResp = [];
            }
        }

        window.lmltrending = tResp;
    }

    var oReq = new XMLHttpRequest();
    oReq.addEventListener("load", gotTrending);
    oReq.open("GET", tUrl);
    oReq.send();
};

// fetchTrending();

</script>
