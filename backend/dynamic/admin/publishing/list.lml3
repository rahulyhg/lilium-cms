const settings = {
    title : "Publishing",
    tools : {
        "add" : { call : "popupCreate" }
    },
    lmldom : { v : 1.0 }
};

const css = `<style>

main {
    background: #F3F3F3;
}

.content-card {
    display: flex;
    margin: 5px;
    background: #FFF;
    border: 1px solid #DDD;
    border-bottom-width: 3px;

    position: relative;
    overflow : hidden;

    cursor: pointer;
}


.content-card:hover .no-image-placeholder, 
.content-card:hover .card-image {
    width: 120px;
}   

.card-image, .no-image-placeholder {
    width: 100px;
    height: 100px;
    object-fit: cover;
    transition: all 0.2s;
    background-color: #F9F9F9;
    min-width: 100px;
    border-right: 1px solid #DDD;
}

.no-image-placeholder i {
    display: block;
    text-align: center;
    padding-top: 30px;
    font-size: 40px;
    color: #CCC;
}

.card-headline {
    font-size: 18px;
    margin-top: 10px;
    font-weight: 600;
    text-overflow:ellipsis;
    overflow: hidden;
    white-space: nowrap;
    width: calc(100% - 10px);
}

.card-subtitle {
    font-size: 12px;
    color: #777;
}

.card-text-wrap {
    margin-left: 10px;
    position: relative;
    z-index: 2;
    flex-grow: 1;
    overflow: hidden;
}

.no-image-background, 
.card-image-background {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;

    object-fit: cover;
    opacity: 0.05;
    z-index: 1;
}

.card-status {
    display: inline-block;
    background: #333;
    color: #FFF;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 700;
    text-transform: uppercase;
    margin-top: 14px;
}

#emptytemplate {
    width: 500px;
    padding: 20px;
    margin: 40px auto;
    display: block;
    border: 1px solid #DDD;
    border-bottom-width: 3px;
    text-align: center;
    background: #FFF;
}

#emptytemplate span {
    display: block;
    font-size: 22px;
    margin-bottom: 10px;
}

#emptytemplate b {
    cursor: pointer;
    color: #af57e4;
}

</style>`;

const compile = (o, context, v) => { o(context.header, css, `
    
    <lml-bunch>
        <lml-bunchfilters>
            <div class="bunch-filters">
                <div class="bunch-filters-title">FILTERS</div>
                <label>Search</label>
                <input type="text" name="search" placeholder="Title keywords" />

                <label>Status</label>
                <select name="status">
                    <option value="">Any</option>
                    <option value="draft">Draft</option>
                    <option value="published">Published</option>
                    <option value="deleted">Unpublished</option>
                </select>

                <label>Author</label>
                <select name="author" id="author-filter">
                    <option value="">Any</option>
                </select>

                <label>Sponsored</label>
                <select name="isSponsored">
                    <option value="">Any</option>
                    <option value="true">Show only</option>
                    <option value="false">Hide all</option>
                </select>

                <label>Sort by</label>
                <select name="sort">
                    <option value="">Lilium Blend</option>
                    <option value="date">Publication date</option>
                    <option value="shares">Most shares</option>
                </select>
            </div>
        </lml-bunchfilters>

        <lml-emptytemplate>
            <div id="emptytemplate">
                <span>Nothing found</span>
                <p>It would appear there is currently nothing in the database matching the current filters. Would you like to <b onclick="popupCreate();">publish a new article</b>?</p>
            </div>
        </lml-emptytemplate>

        <lml-bunchitem generator="generateCard"></lml-bunchitem>

        <script type="lmljson" name="ponglinkbunch">
            {
                "datasource" : "publishing.bunch",
                "loopvar" : "post",
                "id" : "article-list"
            }
        </script>
    </lml-bunch> 

    <script>
        var STATUS_VOCAB = {
            published   : { text : "Published",     color : "#2162b9" },
            draft       : { text : "Draft",         color : "#576c88" },
            pending     : { text : "Pending review",color : "#701ab9" },
            deleted     : { text : "Unpublished",   color : "#9a471b" },
            destroyed   : { text : "Destroyed",     color : "#ff4405" },
        };

        var popupCreate = function() {
            liliumcms.pageloader.load("/admin/article/new");
        }

        window.generateCard = function(post) {
            var isAuthor = post.author == liliumcms.session.current._id;
            var fullAuthor = liliumcms.conversations.getCachedUsers()[post.author];

            var authorName = isAuthor ? "you" : fullAuthor ? fullAuthor.displayname : "[Inactive author]";
            
            var wrap = d.make({
                class : 'content-card' + (post.thumbnail ? '' : ' no-image') 
            });

            if (post.thumbnail) {
                var finalurl = liliumcms.cdn.parse(post.thumbnail);
                d.make( { parent : wrap, node : "img", attr : { src : finalurl }, class : "card-image" } );
                d.make( { parent : wrap, node : "img", attr : { src : finalurl }, class : "card-image-background" } );
            } else { 
                var placeholder = d.make( { parent : wrap, class : 'no-image-placeholder' });
                d.make( { parent : wrap, class : 'no-image-background', attr : { style : "background-color : #AAA" /*+ Math.floor(0x1000000 * Math.random()).toString(16)*/ } });
                d.make( { parent : placeholder, node : "i", class : "fal fa-image" } )
            }

            var titlewrap = d.make({ class : "card-text-wrap", parent : wrap });
            d.make({ text : post.headline, class : "card-headline", parent : titlewrap });
            // d.make({ text : post.subtitle, class : "card-subtitle", parent : titlewrap });
            
            var pubby = d.make({ text : "Created by ", class : "card-author card-by-" + authorName, parent : titlewrap });
            d.make({ text : authorName, node : "b", parent : pubby });
        
            var statusobject = STATUS_VOCAB[post.status];
            statusobject && d.make({ class : "card-status", text : statusobject.text, attr : { style : "background-color: " + statusobject.color }, parent : titlewrap });

            wrap.bind('click', function() {
                liliumcms.pageloader.load("${context._c.server.url}/admin/publishing/write/" + post._id);
            });

            return wrap.get();
        }

        liliumcms.lmldom.bind(function() {
            var users = liliumcms.conversations.getCachedUsers();
            var ids = Object.keys(users);
            var arr = [];

            for (var id in users) {
                arr.push(users[id]);
            };
            arr = arr.sort(function(a, b) { return a.displayname > b.displayname ? 1 : -1 });

            var selectbox = d.id('author-filter');
            arr.forEach(function(user) {
                d.make({ node : "option", text : user.displayname, attr : { value : user._id }, parent : selectbox });
            });
        });
    </script>

`); };

module.exports = { settings, compile };

