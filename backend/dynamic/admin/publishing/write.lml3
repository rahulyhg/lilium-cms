const settings = {     
    livevars : [
        "publishing.write.{?1}", 
        "publishing.auto.{?1}",
        "topics.simple", 
        "entities.simple", 
        "themes.templates.article", 
        "publishing.history.{?1}"
    ],
    lmldom : { v : 1.0 }
};                    
         
const css = require('./style.css');

const compile = (o, context) => { o(context.header, css, `<link rel="stylesheet" type="text/css" href="/compiled/theme/liliumtext.css?at=${Date.now()}">

<div id="restore-recent-autosave" class="lml-modal">
    <div class="lml-modal-title">
        Recent autosave
    </div>
    <div class="lml-modal-body">
        <i class="fal fa-paste"></i>
        <p>There is an auto-saved version of this article from <b id="recent-autosave-date"></b>.</p>
        <p>It is possible to restore the auto-saved version of this post. Choosing to do so <b>will not</b> overwrite the post until you hit "save" or "update".</p>
        <p>Would you like to use the auto-saved version instead of the current one?</p>
    </div>
    <div class="lml-modal-footer">
        <button class="lml-modal-cancel" type="button">Dismiss</button>
        <button class="lml-modal-accept" type="button">Use auto-saved version</button>
    </div>

</div>

<div id="edit-slug-publishing" class="lml-modal">
    <div class="lml-modal-title">
        Edit article slug
    </div>
    <div class="lml-modal-body">
        <b>Article slug</b>
        <input id="edit-slug-input" placeholder="Provide an article slug" />
    </div>
    <div class="lml-modal-footer">
        <button class="lml-modal-cancel" type="button">Dismiss</button>
        <button class="lml-modal-accept" type="button">Save</button>
    </div>

</div>

<div id="no-ads-modal" class="lml-modal">
    <div class="lml-modal-title">
        No ads found in content
    </div>
    <div class="lml-modal-body">
        <p>Before submitting an article for publication, advertising banners must be inserted inside the content between paragraphs.</p>
        <p>To make it easier for you, an ad insertion wizard is available.</p>
    </div>
    <div class="lml-modal-footer">
        <button class="lml-modal-cancel" type="button">Insert ads manually</button>
        <button class="lml-modal-accept" type="button">Use the wizard</button>
    </div>

</div>

<div class="anim-slide" id="anim-slide-1"></div>
<div class="anim-slide" id="anim-slide-2"></div>
<div class="anim-slide" id="anim-slide-3"></div>
<div class="anim-slide" id="anim-slide-4"></div>
<div class="anim-slide" id="anim-slide-5"></div>

<div id="anim-slide-fade">
    <div id="anim-title"></div>

    <div id="anim-cards">
        <div class="flex-col">
            <div id="anim-article" class="flex-card">
                <div id="anim-article-title"></div>
                <div id="anim-article-subtitle"></div>
                <img src="" id="anim-article-image" />
                <div id="anim-author">
                    <b>Published by </b> <span id="anim-article-authorname"></span>
                </div>
            </div>

            <div id="anim-author" class="flex-card">
                <b class="card-title" id="anim-article-authordisplayname">The author</b>
                <div class="flex-author">
                    <img id="anim-article-authorimage" src="" />
                    <div class="author-flexgrow">
                        <div id="anim-article-authorarticles"><i class="far fa-paper-plane"></i>Published <b><span></span></b> articles on ${context._c.website.sitetitle}</div>
                        <div id="anim-article-authorarticlestoday"><i class="far fa-calendar-edit"></i>Published <b><span></span></b> articles today</div>
                        <div id="anim-article-authordeco"><i class="far fa-certificate"></i><b><span></span></b> decorations</div>

                        <a id="anim-article-authorpage" href="" target="_blank">View author page</a>
                    </div>
                </div>
            </div>

            <div id="anim-dismiss" class="flex-card">
                <b>Dismiss publication report</b>
            </div>
        </div>

        <div class="flex-col">
            <div id="anim-details" class="flex-card">
                <b class="card-title">About this post</b>
                <div id="anim-article-parag"><i class="far fa-paragraph"></i><span></span><b>Paragraphs</b></div>
                <div id="anim-article-img"><i class="far fa-image"></i><span></span><b>Images</b></div>
                <div id="anim-article-ads"><i class="far fa-usd-square"></i><span></span><b>Content ads</b></div>
                <div id="anim-article-paginated"><i class="fas fa-columns"></i><span></span></div>
                <div id="anim-article-nsfw"><i class="far fa-exclamation-square"></i><span></span></div>
                <div id="anim-article-sponsored"><i class="far fa-handshake"></i><span></span></div>
            </div>

            <div id="anim-url" class="flex-card">
                <b class="card-title">Article URL</b>
                <a id="anim-article-url" target="_blank"></a>
            </div>

            <div id="anim-today" class="flex-card">
                <b class="card-title">Also published today</b>
                <div id="anim-today-list"></div>
            </div>
        </div>
    </div>
</div>

<div id="publishing-actions">
    <h3>Manage</h3>
    <div id="sticky-actions">
        
    </div>

    <h3>History</h3>
    <div id="history-wrap">

    </div>
</div>

<div id="publishing-form">
    <h1>Publishing</h1>

    <div id="publishing-tabs">
        <div class="publishing-tab" id="publishing-tab-add" style="display: none;">Add</div>
    </div>

    <div id="publishing-headers">
        
    </div>

    <h3>
        Topic category
    </h3>
    <div id="publishing-topic">
        <div id="publishing-category">
            <div class="publishing-category-single" data-category="local">
                <i class="far fa-map-marker"></i>
                <span>Local content</span>
            </div>
            <div class="publishing-category-single" data-category="interest">
                <i class="far fa-futbol"></i>
                <span>Interests</span>
            </div>
            <div class="publishing-category-single" data-category="partners">
                <i class="far fa-handshake"></i>
                <span>Partners</span>
            </div>
        </div>
        <div id="publishing-topic-cards">

        </div>
    </div>

    <h3>Featured image</h3>
    <div id="publishing-media">
        <div id="featured-image-selector">
            <img id="featured-image-tag" class="media_explorer_form pickable" data-hiddenfield="media" data-size="facebook" data-withcredit="true" />
            <input type="hidden" name="media" id="mediapicker" />
        </div>
    </div>    

    <h3>Sponsored Post</h3>
    <div id="publishing-sponsored">
        <input type="checkbox" id="psponsored" name="isSponsored" data-changed="onChangeToggleSponsoredBoxes" />
        <label for="isSponsored">This article is sponsored</label>

        <div id="publishing-sponsored-wrap" style="display: none;">
            <div class="pub-detail-field">
                <span>Sponsored campaign ID</span>
                <input type="text" class="pub-field" id="pcampid" />
            </div>
            <div class="pub-detail-field">
                <span>Use sponsored box</span>
                <input type="checkbox" id="psponsbox" name="useSponsoredBox" data-changed="onChangeToggleSponsoredBoxBoxes" />
            </div>
            <div id="publishing-sponsored-box-wrap">
                <div class="pub-detail-field">
                    <span>Business name</span>
                    <input type="text" class="pub-field" id="psponsboxtitle" />
                </div>
                <div class="pub-detail-field">
                    <span>Business website</span>
                    <input type="text" class="pub-field" id="psponsboxlink" />
                </div>
                <div class="pub-detail-field">
                    <span>Business description</span>
                    <textarea class="pub-field" id="psponsboxdesc"></textarea>
                </div>
                <div class="pub-detail-field">
                    <span>Business Logo</span>
                    
                    <img id="sponsored-box-image" 
                        class="media_explorer_form pickable" 
                        data-hiddenfield="psponsboximg" data-size="square" />
                    <input type="hidden" name="psponsboximg" id="psponsboximg" />
                </div>
            </div>
        </div>
    </div>

    <h3>Publication State</h3>
    <div id="publication-details">
        <div class="pub-detail-field">
            <span>Status</span>
            <b id="pub-status"></b>
        </div>
        <div class="pub-detail-field">
            <span>Author</span>
            <select id="pauthor" class="pub-field">

            </select>
        </div>
        <div class="pub-detail-field">
            <span>Publication date</span>
            <input class="pub-field lml-date" id="pdate" data-options="time" placeholder="Click to select a date and time" type="text">
        </div>
        <div class="pub-detail-field">
            <span>NSFW content</span>
            <input type="checkbox" id="pnsfw" name="nsfw" />
        </div>
        <div class="pub-detail-field">
            <span>Only accessible via URL</span>
            <input type="checkbox" id="phidden" name="hidden" />
        </div>
        <div class="pub-detail-field">
            <span>URL</span>
            <div id="pub-url-wrap">
                <a id="pub-url-link" href="" target="_blank"></a>
                <i class="fal fa-pencil-alt" id="edit-slug-icon"></i>
            </div>
        </div>
        <div class="pub-detail-field">
            <span>Total words</span>
            <b id="pub-words">-</b>
        </div>
        <div class="pub-detail-field">
            <span>Registered shares</span>
            <b id="pub-shares">-</b>
        </div>
        <div class="pub-detail-field">
            <span>Last updated on</span>
            <b id="pub-last-update">Never updated</b>
        </div>
    </div>
</div>

<script>
    window._poststate = {};

    var AUTOSAVE_INTERVAL = undefined;
    var LAST_AUTOSAVE = undefined;
    var STATUS_VOCAB = {
        published   : { text : "Published",     color : "#2162b9" },
        draft       : { text : "Draft",         color : "#576c88" },
        reviewing   : { text : "Pending review",color : "#701ab9" },
        deleted     : { text : "Unpublished",   color : "#9a471b" },
        destroyed   : { text : "Destroyed",     color : "#ff4405" },
    };

    var STICKY_ACTIONS = [
         {
            id : "save",
            shouldShow : function() {
                return window._poststate.status == "draft" || window._poststate.status == "deleted" || window._poststate.status == "reviewing";
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Save";
                button.addEventListener('click', saveCurrentPost);
                return button;
            }
        },
        {
            id : "preview",
            shouldShow : function() {
                return true;
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Preview";
                button.addEventListener('click', previewCurrentPost);
                return button;
            }
        },
        {
            id : "publish",
            shouldShow : function() {
                return (!liliumcms.session.current.roles.includes('contractor') || liliumcms.session.hasRight('editor')) && (window._poststate.status == "draft" || window._poststate.status == "deleted" || window._poststate.status == "reviewing");
            },
            render : function() {
                var button = document.createElement('button');
                button.className = "blue";
                button.textContent = "Publish article";
                button.addEventListener('click', publishCurrentPost);
                return button;
            }
        },
        {
            id : "submitreview",
            shouldShow : function() {
                return liliumcms.session.current.roles.includes("contractor") && (window._poststate.status == "draft" || window._poststate.status == "deleted");
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Submit for review";
                button.addEventListener('click', submitCurrentPost);
                return button;
            }
        },
        {
            id : "refuse",
            shouldShow : function() {
                return liliumcms.session.hasRight("editor") && (window._poststate.status == "reviewing");
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Refuse proposal";
                button.addEventListener('click', refuseCurrentPost);
                return button;
            }
        },
        {
            id : "update",
            shouldShow : function() {
                return window._poststate.status == "published";
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Update and refresh";
                button.addEventListener('click', refreshPublishedPost);
                return button;
            }
        },
        {
            id : "wizard",
            shouldShow : function() {
                return window._poststate.status != "destroyed";
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Launch Wizard";
                button.addEventListener('click', launchWizard);
                return button;
            }
        },
        {
            id : "unpublish",
            shouldShow : function() {
                return liliumcms.session.hasRight("publish-articles") && window._poststate.status == "published";
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Unpublish";
                button.className = "red";
                button.addEventListener('click', unpublishCurrentPost);
                return button;
            }
        },  
        {
            id : "destroy",
            shouldShow : function() {
                return window._poststate.status == "draft" || window._poststate.status == "deleted";
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Destroy";
                button.className = "red";
                button.addEventListener('click', destroyCurrentPost);
                return button;
            }
        }
    ];

    var shouldAutosave = function() {
        return window._poststate.status != "published";
    };

    var hasAds = function() {
        return !allEditors.map(x => !!x.dom.doc.querySelector('.lml-adplaceholder')).includes(false);
    };

    var fillReport = function(r) {
        var set = function(id, value) {
            get(id).textContent = value;
        }
        var setSpan = function(id, value) {
            get(id).querySelector('span').textContent = value;
        }
        var get = function(id) {
            return document.getElementById('anim-article-' + id);
        }

        set('title', r.headline);
        set('subtitle', r.subline);
        get('image').src = r.media;
        set('authorname', r.fullauthor.displayname);
        setSpan('parag', r.p);
        setSpan('img', r.img);
        setSpan('ads', r.ads);
        setSpan('paginated', r.paginated ? "Paginated" : "Not paginated");
        setSpan('nsfw', r.nsfw ? "Not safe for work" : "Safe for work");
        setSpan('sponsored', r.isSponsored ? "Sponsored" : "Not sponsored");

        set('url', r.url);
        get('url').href = r.url;

        get('authorimage').src = r.fullauthor.avatarURL;
        set('authordisplayname', r.fullauthor.displayname);
        setSpan('authorarticles', r.authortotal);
        setSpan('authorarticlestoday', r.authortotaltoday);
        setSpan('authordeco', r.decorations);
        get('authorpage').href = "${context._c.server.url}/author/" + r.fullauthor.slug;

        if (r.today.length != 0) {
            var list = d.id('anim-today-list');
            r.today.forEach(function(art) {
                var wrap = d.make({ class : "anim-today-post", parent : list });
                d.make({ class : "anim-today-post-date", text : dateFormat(art.date, "HH:MM"), parent : wrap });
                d.make({ class : "anim-today-post-link", node : "a", text : art.headline.trim(), attr : { href : "${context._c.server.url}/" + art.name, "target" : "_blank" }, parent : wrap });
            });
            document.getElementById('anim-today').style.display = "block";
        } else {
            document.getElementById('anim-today').style.display = "none";
        }
    }

    var displayConfirmationAnimation = function() {
        liliumcms.lmldom.get('${context._c.server.url}/admin/publishing/report/' + liliumcms.pageloader.lastLevel, {
            json:true,
            params : { async : true }
        }, function(resp) {
            fillReport(resp);

            Array.prototype.forEach.call(document.querySelectorAll('.anim-slide'), function(s, i) { 
                setTimeout(function() { 
                    s.classList.add("slid") 
                }, i * i * 20);
            });

            setTimeout(function() {
                var wrap = document.getElementById("anim-slide-fade");
                var tle = document.getElementById('anim-title');
                var textarr = "Article published".split('');

                setTimeout(function() {
                    wrap.style.display = "block";
                    wrap.scrollTo(0,0);
                }, 150);

                while (tle.firstChild) { tle.firstChild.remove(); };
                textarr.forEach(function(char, i) {
                    var span = document.createElement('span');
                    span.innerHTML = char.trim() || "&nbsp;";
                    tle.appendChild(span);
                
                    setTimeout(function() {
                        span.classList.add('shown');
                    }, i*30 + 500);   
                });

                setTimeout(function() {
                    document.getElementById('anim-title').classList.add('slid');
                    document.getElementById('anim-slide-fade').classList.add('full');

                    Array.prototype.forEach.call(document.querySelectorAll('.flex-card'), function(c, i) {
                        setTimeout(function() {
                            c.classList.add('shown');
                        }, i * 200);
                    });
                }, textarr.length * 30 + 1200);
                
            }, 300);
        });
    };

    var dismissReport = function() {
        document.getElementById('anim-title').classList.remove('slid');
        document.getElementById('anim-slide-fade').classList.remove('full');
        Array.prototype.forEach.call(document.querySelectorAll('.flex-card'), function(c, i) {
            c.classList.remove('shown');
        });

        Array.prototype.forEach.call(document.querySelectorAll('.anim-slide'), function(s, i) { 
            setTimeout(function() { 
                s.classList.remove("slid") 
            }, i * i * 20);
        });

        setTimeout(function() {
            document.getElementById("anim-slide-fade").style.display = "";
        }, 400);
    };

    var createPayload = function() {
        var s = updateState();
        return {
            title       : s.title,
            subtitle    : s.subtitle,
            content     : s.content,
            topic       : s.topic,
            media       : s.media,
            author      : s.author,
            name        : s.name,
            nsfw        : s.nsfw,
            date        : s.date,

            isSponsored         : s.isSponsored,
            sponsoredCampaignID : s.sponsoredCampaignID,
            useSponsoredBox     : s.useSponsoredBox,
            sponsoredBoxContent : s.sponsoredBoxContent,
            sponsoredBoxLogo    : s.sponsoredBoxLogo,
            sponsoredBoxTitle   : s.sponsoredBoxTitle,
            sponsoredBoxURL     : s.sponsoredBoxURL,
            hidden              : s.hidden,

            customfacebooktitle : s.customfacebooktitle,
            facebooktitle       : s.facebooktitle,
            facebooksubtitle    : s.facebooksubtitle
        };
    }

    var onChangeToggleSponsoredBoxes = function(ev, checked) {
        document.getElementById('publishing-sponsored-wrap').style.display = checked ? "block" : "none";
    }

    var onChangeToggleSponsoredBoxBoxes = function(ev, checked) {
        document.getElementById('publishing-sponsored-box-wrap').style.display = checked ? "block" : "none";
    }

    // Update local object sent to the server
    var updateState = function() {
        var tabs = document.querySelectorAll('.publishing-tab');
        var titleel = document.querySelectorAll('.big-title');
        var subel = document.querySelectorAll('.big-subtitle');

        var titles = [];
        var subtitles = [];
        var contents = [];

        for (var i = 0; i < tabs.length - 1; i++) {
            if (!tabs[i].classList.contains("to-be-removed")) {
                titles.push( titleel[i].value );
                subtitles.push( subel[i].value );
                contents.push( allEditors[i].getContent() );
            }
        }

        window._poststate.title = titles;
        window._poststate.subtitle = subtitles;
        window._poststate.content = contents;
        window._poststate.date = liliumcms.lmldom.flatpickr.pdate.input.value ? new Date(liliumcms.lmldom.flatpickr.pdate.input.value) : undefined;

        window._poststate.media = document.getElementById('mediapicker').value;
        window._poststate.author = document.getElementById('pauthor').value;
        window._poststate.nsfw = !!document.getElementById('pnsfw').checked;
        window._poststate.hidden = !!document.getElementById('phidden').checked;

        window._poststate.isSponsored = document.getElementById('psponsored').checked;
        window._poststate.sponsoredCampaignID = document.getElementById('pcampid').value;
        window._poststate.useSponsoredBox = document.getElementById('psponsbox').checked;
        window._poststate.sponsoredBoxTitle = document.getElementById('psponsboxtitle').value;
        window._poststate.sponsoredBoxURL = document.getElementById('psponsboxlink').value;
        window._poststate.sponsoredBoxContent = document.getElementById('psponsboxdesc').value;
        window._poststate.sponsoredBoxLogo = document.getElementById('psponsboximg').value;

        return window._poststate;
    }    

    // Update bottom section with current article state
    var refreshState = function() {
        // Url, Date, author, status
        document.getElementById('pub-url-link').text = window._poststate.url || "This article does not have a URL";
        document.getElementById('pub-url-link').href = window._poststate.url || "";
        document.getElementById('edit-slug-icon').style.display = window._poststate.url ? "" : "none";

        document.getElementById('pauthor').value = window._poststate.author;
        if (window._poststate.date) {
            liliumcms.lmldom.flatpickr.pdate.setDate(new Date(window._poststate.date))
        }

        document.getElementById('pub-shares').textContent = window._poststate.shares || "-";
        document.getElementById('pub-last-update').textContent = window._poststate.updated ?
            dateFormat(new Date(window._poststate.updated), "mmmm, dd yyyy 'at' HH:MM:ss") : 
            "Never updated";

        document.getElementById('pub-status').textContent = STATUS_VOCAB[window._poststate.status].text;
        document.getElementById('pub-status').style.backgroundColor = STATUS_VOCAB[window._poststate.status].color;
        
        document.getElementById('pnsfw').checked = window._poststate.nsfw;

        document.getElementById('psponsored').checked = window._poststate.isSponsored;
        onChangeToggleSponsoredBoxes(undefined, document.getElementById('psponsored').checked);
        document.getElementById('pcampid').value = window._poststate.sponsoredCampaignID || "";

        document.getElementById('psponsbox').checked = window._poststate.useSponsoredBox;
        document.getElementById('phidden').checked = window._poststate.hidden;
        onChangeToggleSponsoredBoxBoxes(undefined, document.getElementById('psponsbox').checked);

        document.getElementById('psponsboxtitle').value = window._poststate.sponsoredBoxTitle;
        document.getElementById('psponsboxlink').value = window._poststate.sponsoredBoxURL;
        document.getElementById('psponsboxdesc').value = window._poststate.sponsoredBoxContent;
        document.getElementById('psponsboximg').value = window._poststate.sponsoredBoxLogo;
    };

    // Refresh possible actions
    var refreshActions = function() {
        var wrap = d.id('sticky-actions');
        wrap.empty();

        STICKY_ACTIONS.forEach(function(act) {
            act.shouldShow() && wrap.get().appendChild(act.render());
        });
    };

    var switchToTab = function(index) {
        var tab = d.q('.publishing-tab.selected').get();
        tab && tab.classList.remove('selected');

        var header = d.q('.publishing-header.selected').get();
        header && header.classList.remove('selected');

        d.id('publishing-tab-' + index).cadd('selected');
        d.id('publishing-header-' + index).cadd('selected');
    };

    var totalpage = 0;
    var allEditors = [];
    var createHeaderSlide = function(title, subtitle, content, callback) {
        log('Publishing', 'Creating new header slide with index ' + totalpage);

        title = title || "";
        subtitle = subtitle || "";
        content = content || "<p></p>";

        var wrap = d.make({ class : "publishing-header", id : "publishing-header-" + totalpage });        
        var btitle = d.make({ node : "input", attr : { placeholder : totalpage ? "(Reuse headline)" : "Headline" }, class : "big-title", parent : wrap }).get();
        var bsubtitle = d.make({ node : "input", attr : { placeholder : totalpage ? "(Reuse subtitle)" : "Subtitle" }, class : "big-subtitle", parent : wrap }).get();
        var beditor = d.make({ class : "big-content", id : "publishing-" + totalpage, parent : wrap, node : "textarea" }).get();

        d.id('publishing-headers').born(wrap);

        /*
        var textEditor = new LiliumText(beditor, {
            content : content,
            boldnode : "b",
            commandsets : [
                [
                    new LiliumTextWebCommand('text', "b", "far fa-bold"), 
                    new LiliumTextWebCommand('text', "i", "far fa-italic"), 
                    new LiliumTextWebCommand('text', "u", "far fa-underline"),  
                    new LiliumTextWebCommand('text', "strike", "far fa-strikethrough"),
                    new LiliumTextWebCommand('remove', undefined, "far fa-eraser")
                ], [
                    new LiliumTextCustomCommand('undo', LiliumTextCustomUndo, 'far fa-undo'),
                    new LiliumTextCustomCommand('redo', LiliumTextCustomRedo, 'far fa-redo')
                ], [
                    new LiliumTextWebCommand('block', 'p', 'far fa-paragraph'), 
                    new LiliumTextWebCommand("block", "h3", "far fa-h3"),
                    new LiliumTextWebCommand("block", "blockquote", "far fa-quote-right"),
                ], [
                    new LiliumTextWebCommand('insert', 'hr', 'far fa-minus')
                ], [
                    new LiliumTextWebCommand('exec', "insertOrderedList",   "far fa-list-ol"),  
                    new LiliumTextWebCommand('exec', "insertUnorderedList", "far fa-list-ul"), 
                    new LiliumTextWebCommand('remove', 'a', 'far fa-unlink')
                ], [
                    new LiliumTextCustomCommand("full", LiliumTextCustomCommandFullscreen, "far fa-window-maximize"),
                    new LiliumTextCustomCommand("code", LiliumTextCustomCommandCode, "far fa-code")
                ]
            ],
            plugins : [
                LiliumCodeFormatPlugin,
                LiliumTextInsertAds,
                LiliumTextImageSelectionPlugin,
                LiliumTextImageInsertionPlugin,
                LiliumTextEmbedPlugin
            ]
        });
        */

        tinyMCE.baseURL = "${context._c.server.url}/tinymce";
        tinyMCE.init({
            target: beditor,
            height: 500,
            convert_urls : false,
            menubar: false,
            plugins: [
                'advlist autolink lists link image charmap print preview anchor textcolor',
                'searchreplace visualblocks code fullscreen hr',
                'media paste wordcount'
            ],
            toolbar: 'bold italic underline strike strikethrough forecolor | removeformat | undo redo | formatselect | hr insertAd insertUpload insertEmbed link | bullist numlist | fullscreen | code',
            content_css: [
                '${context._c.server.url}/compiled/theme/tinymce.css'
            ],
            setup : ConfigureLiliumTinyMCE
        }).then(function(textEditor) {
            console.log(textEditor);
            textEditor = textEditor[0];

            log('TinyMCE', 'Text editor created successfully', 'success');
            allEditors.push(textEditor);
            textEditor.setContent(content || "");

            btitle.value = title.trim();
            bsubtitle.value = subtitle.trim();
            allEditors.push(textEditor);

            var tab = d.make({ 
                class : "publishing-tab", 
                id : "publishing-tab-" + totalpage 
            });
            d.make({ text : totalpage == 0 ? "Landing" : "Page " + totalpage, node : "span", class : "publishing-tab-text", parent : tab })

            if ( totalpage != 0 ) {
                d.make({ node : "i", class : "far fa-times-circle publishing-tab-close", parent : tab }).bind('click', function() {
                    wrap.cadd("to-be-removed");
                    tab.cadd("to-be-removed");

                    liliumcms.notify({
                        type : "success",
                        title : "Tab",
                        message : "This tab will be removed completely next time you save."
                    });
                });

                d.make({ node : "i", class : "far fa-check-circle publishing-tab-restore", parent : tab }).bind('click', function() {
                    wrap.crm("to-be-removed");
                    tab.crm("to-be-removed");

                    liliumcms.notify({
                        type : "success",
                        title : "Tab",
                        message : "This tab was restored and will be saved."
                    });
                
                });
            }

            var currentpage = totalpage;
            tab.bind('click', function() {
                switchToTab(currentpage);
            });

            d.id('publishing-tabs').born(tab).born(d.id('publishing-tab-add'));
            // textEditor.contentel.addEventListener('blur', contentBlur);
            // textEditor.bind('focus', function() { document.execCommand('styleWithCSS', false); });
            contentBlur();

            totalpage++;
            callback && callback(totalpage);
        }).catch(function(err) {
            log('TinyMCE', err.toString(), 'err')  
        });
    };

    var alertRecentAutosave = function() {
        d.id('recent-autosave-date').get().textContent = dateFormat(new Date(LAST_AUTOSAVE.at), "mmmm dd, 'at' HH:MM:ss");
        liliumcms.modals.get('restore-recent-autosave').cast();
    };

    window["restore-recent-autosave_accept"] = function(modal) {
        var tabs = document.querySelectorAll('.publishing-tab:not(#publishing-tab-add)');
        var headers = document.querySelectorAll('.publishing-header');

        for (var i = tabs.length - 1; i >= 0; i--) {
            tabs[i].remove();
            headers[i].remove();
            // clearInterval(allEditors[i].snapshotTimerID);
            
            allEditors.forEach(function(editor) {
                editor.destroy();
            })
        }        

        allEditors = [];
        totalpage = 0;
        var total = LAST_AUTOSAVE.data.title.length;
        for (var i = 0; i < total; i++) {
            createHeaderSlide(LAST_AUTOSAVE.data.title[i], LAST_AUTOSAVE.data.subtitle[i], LAST_AUTOSAVE.data.content[i], function() {
                updateState();
                switchToTab(0);
            });
        }


        modal.dismiss();
    };

    var contentBlur = function() {
        document.getElementById("pub-words").textContent = allEditors.reduce(function(current, that) {
            return current + that.dom.doc.body.textContent.split(' ').filter(function(str) { return str.trim(); }).length;
        }, 0);
    };

    var selectFinalTopic = function(topicid) {
        var fulltopic = window._cachedAllTopics.find(function(x) { return x._id == topicid  });        
        var card = d.make({ class : "topic-card topic-final-card", parent : d.id("publishing-topic-cards") });
        d.make({ parent : card, class : "topic-final-title", text : "Selected topic" });
        d.make({ parent : card, class : "topic-final-displayname", text : fulltopic.displayname });
        
        var cancelbutton = d.make({ parent : card, class : "topic-final-cancel", text : "Change topic" });
        cancelbutton.bind('click', function() {
            resetTopic();
        });

        setTimeout(function() {
            card.cadd('shown');
        }, 5);

        window._poststate.topic = fulltopic._id;
        window._poststate.fulltopic = fulltopic;
    }

    var resetTopic = function() {
        var cards = document.querySelectorAll('.topic-card:not(.topic-final-card)');
        for (var i = cards.length - 1; i >= 0; i--) {
            cards[i].remove();
        }

        var finalcard = document.querySelector('.topic-final-card');
        if (finalcard) {
            finalcard.classList.remove('shown');
            setTimeout(function() {
                finalcard.remove();
            }, 200);
        }
    }

    var selectTopic = function(topicid, forceFinal) {
        window._selectedTopic = topicid;
        window._poststate.topic = topicid;
        var list = window._cachedAllTopics.filter(function(x) { return x.parent == topicid });

        if (forceFinal || list.length == 0) {
            selectFinalTopic(topicid);
        } else {
            var fulltopic = window._cachedAllTopics.find(function(x) { return x._id == topicid  });        
            addTopicCard(fulltopic.displayname, list);
        }
    }

    var addTopicCard = function(title, list) {
        var card = d.make({ parent : d.id("publishing-topic-cards"), class : "topic-card" });
        var title = d.make({ parent : card, class : "topic-card-title", text : title });
        var elementlist = d.make({ parent : card, class : "topic-card-topics" });
        list.forEach(function(t) {
            var elementtopic = d.make({ parent : elementlist, class : "topic-card-topic", text : t.displayname });
            elementtopic.bind('click', function() {
                selectTopic(t._id);
            });
        });

        setTimeout(function() {
            card.cadd('shown');
        }, 5);
    }

    var addTopicCardFromCat = function(cat) {
        var list = window._cachedAllTopics.filter(function(x) { return x.category == cat });
        d.q('.topic-card', true).forEach(function(x) { x.get().remove(); });
        addTopicCard(cat, list);
    };

    var initTopics = function() {
        window._cachedAllTopics = liliumcms.livevars.livevars()["topics.simple"];

        d.q('.publishing-category-single', true).forEach(function(x) {
            x.bind('click', function(ev) {
                var cat = x.dataset.category;
                addTopicCardFromCat(cat);
            });
        });
    };

    var initAuthor = function() {
        var entities = liliumcms.livevars.livevars()["entities.simple"];
        var selectbox = d.id("pauthor").get();
        entities.forEach(function(x) {
            var opt = document.createElement('option');
            opt.textContent = x.displayname;
            opt.value = x._id;
            selectbox.appendChild(opt);
        });
    };

    var makeHistoryText = function(displayname, history) {
        switch (history.type) {
            case "update":
                return displayname + " updated the " + history.diffs.map(function(e) { return e.field }).join(", ");

            case "published":
                return displayname + " published this article";

            case "unpublished":
                return displayname + " removed this article from the website";

            case "submitted":
                return displayname + " submitted this article for review";

            case "slug":
                return displayname + " updated the article slug";

            case "refused":
                return displayname + " refused this submission";

            case "destroyed":
                return displayname + " destroyed this article";

            default:
                return displayname + " updated this post";
        }
    };

    var pushHistoryCard = function(history) {
        var hist = document.getElementById("history-wrap");
        var card = document.createElement('div'); 
        card.className = "history-card history-card-" + history.type;
        hist.insertBefore(card, hist.firstElementChild);
        
        var users = liliumcms.livevars.livevars()["entities.simple"];
        var creator = users.find(function(user) { return user._id == history.actor }) || { displayname : "An Unknown Author", avatarURL : "/static/media/lmllogo.png" };
        
        var creatorAvatar = document.createElement('img');
        creatorAvatar.onload = function() { setTimeout(function() { creatorAvatar.style.flexGrow = 1; textspan.style.flexGrow = 1; }, 10); };
        creatorAvatar.className = "history-actor";
        creatorAvatar.src = creator.avatarURL;
        card.appendChild(creatorAvatar);

        var textspan = document.createElement('span');
        textspan.textContent = makeHistoryText(creator.displayname, history) + " on " + dateFormat(history.at, "mmmm dd, 'at' HH:MM");
        card.appendChild(textspan);
    };

    var createHistory = function() {
        var users = liliumcms.livevars.livevars()["entities.simple"];
        var hist = d.id("history-wrap");
        var creator = users.find(function(user) { return user._id == window._poststate.createdBy }) || { displayname : "An Unknown Author", avatarURL : "/static/media/lmllogo.png" };
        
        var card = d.make({ id : "created-history-card", class : "history-card", parent : hist }).get();

        var creatorAvatar = document.createElement('img');
        creatorAvatar.className = "history-actor";
        creatorAvatar.src = creator.avatarURL;
        card.appendChild(creatorAvatar);
    
        var textspan = document.createElement('span');
        textspan.textContent = creator.displayname + " created this article on " + dateFormat(window._poststate.createdOn, "mmmm dd, 'at' HH:MM");
        card.appendChild(textspan);

        window._posthistory.forEach(pushHistoryCard);
    }

    var showNotFound = function() {

    };

    var previewCurrentPost = function() {
        liliumcms.lmldom.post(createPayload(), "${context._c.server.url}/admin/publishing/preview/" + liliumcms.pageloader.lastLevel, function(resp) {
            liliumcms.previewer.cast(window._poststate.title[0], undefined, resp);
        });
    };

    var refreshPublishedPost = function() {
        saveCurrentPost(function(saveresp) {
            liliumcms.lmldom.put({}, "${context._c.server.url}/admin/publishing/refresh/" + liliumcms.pageloader.lastLevel, function(resp) {
                liliumcms.notify({ type : "success", title : "Article refreshed", message : "The article markup was successfully refreshed." });
            });
        });
    };

    var autosaveCurrentPost = function() {
        var payload = createPayload();
        liliumcms.lmldom.post({
            title : payload.title, 
            subtitle : payload.subtitle,
            content : payload.content
        }, "${context._c.server.url}/admin/publishing/auto/" + liliumcms.pageloader.lastLevel, function(resp) {
            
        });
    };

    var destroyCurrentPost = function() {
        liliumcms.modals.ask({ 
            title : "Destroy article", 
            message : "Once the article is destroyed, it will not appear in the list of articles, and will become immutable. This operation is irreversible.",
            accepttext : "Destroy", 
            canceltext : "Cancel" 
        }, function(modal) {
            modal.dismiss();
            liliumcms.lmldom.del({}, "${context._c.server.url}/admin/publishing/destroy/" + liliumcms.pageloader.lastLevel, function(resp) {
                if (resp) {
                    if (resp.error) {
                        liliumcms.notify({ type : "danger", title : "Did not Destroy", message : "Could not destroy the article because of an error : " + resp.error});
                    } else {
                        liliumcms.notify({ type : "success", title : "Article destroyed", message : "This article was destroyed, and is no longer accessible."});
                        liliumcms.pageloader.load("/admin/publishing/list");
                    }
                } else{
                    liliumcms.notify({ type : "danger", title : "Did not destroy", message : "Could not destroy the article for an unknown reason."});
                }
            });
        });
    }

    var unpublishCurrentPost = function() {
        liliumcms.lmldom.del({}, "${context._c.server.url}/admin/publishing/unpublish/" + liliumcms.pageloader.lastLevel, function(resp) {
            if (resp) {
                if (resp.error) {
                    liliumcms.notify({ type : "danger", title : "Did not unpublish", message : "Could not unpublish the article because of an error : " + resp.error});
                } else {
                    resp.historyentry && pushHistoryCard(resp.historyentry);
                    resp.newstate && (window._poststate = resp.newstate);

                    refreshState();
                    refreshActions();

                    liliumcms.notify({ type : "success", title : "Unpublished", message : "This article was removed from the website, but is still editable and can be published later."});
                }
            } else {
                liliumcms.notify({ type : "danger", title : "Did not publish", message : "Could not unpublish the article for an unknown reason."});
            }
        });
    }

    var popupSlugEdit = function() {
        document.getElementById('edit-slug-input').value = window._poststate.name;
        liliumcms.modals.get('edit-slug-publishing').cast();
    };

    var slugRegexp = /[^a-zA-Z0-9\-]/;
    window["edit-slug-publishing_accept"] = function(modal) {
        var slug = document.getElementById('edit-slug-input').value.trim();
        if (!slug || slugRegexp.test(slug)) {
            liliumcms.notify({
                type : "warning",
                title : "Invalid slug",
                message : "Slugs can only contain letters, numbers, and hyphens."
            })
        } else {
            modal.dismiss();
            liliumcms.lmldom.put({ slug : slug }, "${context._c.server.url}/admin/publishing/slug/" + liliumcms.pageloader.lastLevel, function(resp) {
                if (resp) {
                    if (resp.err) {
                        liliumcms.notify({
                            type : "warning",
                            title : "Edit slug",
                            message : resp.err.message
                        })
                    } else {
                        window._poststate.name = slug;
                        var bottomlink = document.getElementById('pub-url-link');
                        bottomlink.textContent = resp.url;
                        bottomlink.href = resp.url;

                        liliumcms.notify({
                            type : "success",
                            title : "Edit slug",
                            message : "Slug successfully edited."
                        })
                    }
                } else {
                    liliumcms.notify({
                        type : "error",
                        title : "Edit slug",
                        message : "You do not seem to have the rights to edit this slug."
                    });
                }
            });
        }
    };

    var refuseCurrentPost = function() {
        liliumcms.lmldom.put({}, "${context._c.server.url}/admin/publishing/refuse/" + liliumcms.pageloader.lastLevel, function(resp) {
            if (resp) {
                if (resp.error) {
                    liliumcms.notify({ type : "danger", title : "Did not refuse", message : "Could not refuse the article."});
                } else {
                    resp.historyentry && pushHistoryCard(resp.historyentry);
                    resp.newstate && (window._poststate = resp.newstate);

                    refreshState();
                    refreshActions();

                    liliumcms.notify({ type : "success", title : "Submit article", message : "The article can now be edited by the author, and they will be able to submit it once again."});
                }
            } else {
                liliumcms.notify({ type : "danger", title : "Did not refuse", message : "Could not refuse the article."});
            }
        });
    }

    var displayNoAds = function() {
        liliumcms.modals.get('no-ads-modal').cast();
    };

    window["no-ads-modal_accept"] = function(modal) {
        modal.dismiss();
        liliumcms.pageloader.load("/admin/publishing/wizard/" + liliumcms.pageloader.lastLevel);
    };

    var launchWizard = function() {
        saveCurrentPost(function() {
            liliumcms.pageloader.load("/admin/publishing/wizard/" + liliumcms.pageloader.lastLevel);
        });
    };

    var submitCurrentPost = function() {
        saveCurrentPost(function(saveresp) {
            if (hasAds() || d.id('psponsored').get().checked) {
                liliumcms.lmldom.put({}, "${context._c.server.url}/admin/publishing/submit/" + liliumcms.pageloader.lastLevel, function(resp) {
                    if (resp) {
                        if (resp.error) {
                            liliumcms.notify({ type : "danger", title : "Did not publish", message : "Could not publish the article because some fields are missing."});
                        } else {
                            liliumcms.notify({ type : "success", title : "Submit article", message : "This article is now pending review."});
                            liliumcms.pageloader.load('/admin/publishing/list');
                        }
                    } else {
                        liliumcms.notify({ type : "danger", title : "Did not publish", message : "Could not publish the article for an unknown reason."});
                    }
                });
            } else {
                displayNoAds();
            }
        });
    };

    var publishCurrentPost = function() {
        saveCurrentPost(function(saveresp) {
            if (hasAds() || d.id('psponsored').get().checked) {
                liliumcms.lmldom.put({}, "${context._c.server.url}/admin/publishing/publish/" + liliumcms.pageloader.lastLevel, function(resp) {
                    if (resp) {
                        if (resp.error) {
                            liliumcms.notify({ type : "danger", title : "Did not publish", message : "Could not publish the article because some fields are missing."});
                        } else {
                            resp.historyentry && pushHistoryCard(resp.historyentry);
                            resp.newstate && (window._poststate = resp.newstate);
        
                            refreshState();
                            refreshActions();
        
                            liliumcms.notify({ type : "success", title : "Published", message : "This article was published live on the website."});

                            displayConfirmationAnimation();
                        }
                    } else {
                        liliumcms.notify({ type : "danger", title : "Did not publish", message : "Could not publish the article for an unknown reason."});
                    }
                });
            } else {
                displayNoAds();
            }
        });
    };

    var saveCurrentPost = function(done) {
        liliumcms.lmldom.put(createPayload(), "${context._c.server.url}/admin/publishing/save/" + liliumcms.pageloader.lastLevel, function(resp) {
            if (resp && resp.historyentry) {
                pushHistoryCard(resp.historyentry);
                liliumcms.notify({ type : "success", title : "Post updated", message : "This article was successfully updated."});
            } else {
                // liliumcms.notify({ type : "info", title : "Did not save", message : "Article was not updated due to lack of motifications."});
            }

            typeof done == "function" && done(resp);
        });
    };

    liliumcms.lmldom.bind(function() {
        var post = liliumcms.livevars.livevars()["publishing.write." + liliumcms.pageloader.lastLevel];
        if (!post) {
            return showNotFound();
        }

        window._poststate = post;
        window._posthistory = liliumcms.livevars.livevars()["publishing.history." + liliumcms.pageloader.lastLevel];

        var finishLMLDomBind = function() {                
            switchToTab(0);

            initTopics();
            post.topic && selectFinalTopic(post.topic);

            initAuthor();

            if (post.media) {
                d.id('mediapicker').get().value = post.media;
                liliumcms.livevars.getSingleLivevar("uploads.single." + post.media, {}, function(r) { 
                    var fullmedia = r.livevars["uploads.single." + post.media];
                    if (fullmedia) {
                        d.id('featured-image-tag').get().src = fullmedia.sizes.facebook && fullmedia.sizes.facebook.url;
                    }
                });
            }

            if (post.sponsoredBoxLogo) {
                liliumcms.livevars.getSingleLivevar("uploads.single." + post.sponsoredBoxLogo, {}, function(r) { 
                    var fullmedia = r.livevars["uploads.single." + post.sponsoredBoxLogo];
                    if (fullmedia) {
                        d.id('sponsored-box-image').get().src = fullmedia.sizes.square && fullmedia.sizes.square.url;
                    }
                });
            }

            document.getElementById('edit-slug-icon').addEventListener('click', popupSlugEdit);

            d.id('anim-dismiss').bind('click', dismissReport);
            refreshState();
            refreshActions();

            createHistory();

            AUTOSAVE_INTERVAL = setInterval(function() {
                shouldAutosave() && autosaveCurrentPost();
            }, 1000 * 60);

            liliumcms.pageloader.bindUnload(function() {
                clearInterval(AUTOSAVE_INTERVAL);
            });

            LAST_AUTOSAVE = liliumcms.livevars.livevars()["publishing.auto." + liliumcms.pageloader.lastLevel];

            if (LAST_AUTOSAVE && LAST_AUTOSAVE.at && new Date(LAST_AUTOSAVE.at).getTime() > new Date(post.updated).getTime() && post.status != "published") {
                alertRecentAutosave();
            }
        };

        var i = -1;
        var nextSlide = function() {
            if (post.title[++i]) {
                createHeaderSlide(post.title[i], post.subtitle[i], post.content[i], function() {
                    nextSlide();
                });
            } else {
                finishLMLDomBind();
            }
        };

        nextSlide();
    });
</script>

`);};

module.exports = { settings, compile };
