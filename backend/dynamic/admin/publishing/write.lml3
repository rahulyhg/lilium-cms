const settings = {     
    livevars : ["publishing.write.{?1}", "topics.simple", "entities.simple", "themes.templates.article"],
    title : "Publishing",
    lmldom : { v : 1.0 }
};                    
                  
const css = `<style>

main {
    background: #F3F3F3;
}

#publishing-headers {
    margin: 0px 10px;
    padding: 20px;
    border: 1px solid #DDD;
    border-bottom-width: 3px;
    background: #FFF;
}

.big-title {
    display: block;
    width: 100%;
    box-sizing: border-box;
    font-family: "Oswald", sans-serif;
    font-size: 32px;
}

.big-subtitle {
    display: block;
    width: 100%;
    box-sizing: border-box;
    font-size: 16px;
}

.big-content {
    margin-top: 20px;
}

.publishing-tab {
}

.liliumtext.theme-minim .liliumtext-topbar-command {
    height: 34px;
}

.publishing-header {
    display: none;
}

.publishing-header.selected {
    display: block;
}

#publishing-tabs {
    display: flex;
    margin: 10px 10px -1px;
}

.publishing-tab {
    padding: 10px 15px;
    cursor: pointer;
}

.publishing-tab.selected {
    background: #FFF;
    border: 1px solid #DDD;
    border-bottom: none;
    border-top: 3px solid #af57e4;
    font-weight: 700;
}

#publishing-tab-add {
    font-weight: 700;
    color: #af57e4;
}

/* Topic box */
#publishing-topic {
    display: block;
    margin: 0px 10px;
    background: #FFF;
    border: 1px solid #DDD;
    border-bottom-width: 3px;
    position: relative;
    height: 300px;
    overflow: hidden;
}

.publishing-caregory-title {
    height: 10%;
    font-size: 16px;
    background: #F6F6FF;
    padding: 2px 6px;
    text-transform: uppercase;
    border-bottom: 3px solid #DDD;
}

#publishing-category {
    font-size: 32px;    
    height: 100%;
}

.publishing-category-single:nth-child(1) { background: #ffeaea; border-bottom: 1px solid #ffd6d6; color: #d07878; }
.publishing-category-single:nth-child(2) { background: #f5e1ff; border-bottom: 1px solid #ebc3ff; border-top: 1px solid #fff6f6; color: #d0789b; }
.publishing-category-single:nth-child(3) { background: #d6e8ff; border-top: 1px solid #f3f8ff; color: #8cabc7; }

.publishing-category-single {
    height: 33.333%;
    position: relative;
    overflow: hidden;
    cursor: pointer;
}

.publishing-category-single i {
    position: absolute;
    bottom: -9px;
    left: -12px;
    font-size: 72px;
    opacity: 0.5;

    transition: all 1s;
}

.publishing-category-single span {
    bottom: 10px;
    left: 100px;
    position: absolute;
    letter-spacing: 3px;
    transition: all 1s;
}

.publishing-category-single:hover span {
    letter-spacing : 5px;
}

.publishing-category-single:nth-child(1):hover i {
    transform: translate3d(0, -30px, 0);
}

.publishing-category-single:nth-child(2):hover i {
    transform: translate3d(20px, 0px, 0) rotateZ(30deg);
}

.publishing-category-single:nth-child(3):hover i {
    -webkit-animation: handshakeanim 0.5s ease-in-out 0s infinite; 
    animation: handshakeanim 0.5s ease-in-out 0s infinite; 
}

.topic-card {
    position: absolute;
    top: 0;
    right: 0;
    left: 20px;
    height: 100%;
    background: #FFF;
    border-left: 1px solid #EEE;
    box-shadow: -5px 0px 5px rgba(0,0,0,0.1);
    transform: translate3d(40%, 0, 0);
    transition: all 0.3s;
    opacity: 0;

    overflow : auto;
}

.topic-card-title {
    padding: 10px;
    border-bottom: 1px solid #DDD;
    text-transform: uppercase;
    font-size: 16px;
    letter-spacing: 1px;
    background: #F6F6F6;
}

.topic-card-topic {
    padding: 10px;
    cursor: pointer;
    border-bottom: 1px solid #DDD;
}

.topic-card-topic:hover {
    background: #F3F3F3;
}

.topic-card.shown {
    transform: translate3d(0,0,0);
    opacity: 1;
}

.topic-card.topic-final-card {
    left: 0;
    background: #f1f4fb;
    background: linear-gradient(115deg, transparent 75%, rgba(255,255,255,.8) 75%) 0 0, linear-gradient(245deg, transparent 75%, rgba(255,255,255,.8) 75%) 0 0, linear-gradient(115deg, transparent 75%, rgba(255,255,255,.8) 75%) 7px -15px, linear-gradient(245deg, transparent 75%, rgba(255,255,255,.8) 75%) 7px -15px, #f1f4fb;
    background-size: 15px 30px;
}

.topic-final-title {
    margin-top: 80px;
    text-align: center;
    text-transform: uppercase;
    font-size: 12px;
}

.topic-final-displayname {
    text-align: center;
    font-size: 34px;
}

.topic-final-cancel {
    text-align: center;
    cursor: pointer;
    text-decoration: underline;
    margin-top: 10px;
    color: #333;
}

@-webkit-keyframes handshakeanim {
    0%   : { transform: translate3d(0, 0, 0); }
    50%  : { transform: translate3d(0, -20px, 0); }
    100% : { transform: translate3d(0, 0, 0); }
}

@keyframes handshakeanim {
    0%   : { transform: translate3d(0, 0, 0); }
    50%  : { transform: translate3d(0, -20px, 0); }
    100% : { transform: translate3d(0, 0, 0); }
}

#publishing-media {
    border: 1px solid #CCC;
    border-bottom-width: 3px;
    margin: 0px 10px;

    background-color: #f7f7f7;
    background-image: url("data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23dfd7ec' fill-opacity='0.4' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E");
}

#featured-image-selector {
    text-align: center;
}

#featured-image-tag {
    max-width: 900px;
    margin: 50px;
    height: auto;
    max-height: 600px;
    min-height: 300px;
    min-width: 200px;
    border: 3px solid #AAA;
    border-bottom-width: 5px;
    object-fit : cover;
}

#featured-image-tag:hover {
    border-color: #af57e4;
}

#publishing-form .pub-field {
    
}

#publishing-form h3 {
    margin-top: 40px;
    padding-left: 10px;
    z-index: 10;
    position: relative;
    margin-bottom: -8px;
    text-transform: uppercase;
    font-size: 42px;
    color: #AAA;
}

#publication-details {
    margin: 0px 10px;
    padding: 10px;
    background: #FFF;
    border: 1px solid #ddd;
    border-bottom-width: 3px;
}

.pub-detail-field {
    display: flex;
    flex-wrap : wrap;
    margin-bottom: 12px;
}

.pub-detail-field span {
    width: 200px;
    display: block;
    font-weight: bold;
    padding-top: 5px;
}

#publishing-form .pub-field {
    border: 1px solid #DDD;
    padding: 5px 10px;
    width: 300px;
}

</style><link rel="stylesheet" type="text/css" href="/compiled/theme/liliumtext.css">`;

const compile = (o, context) => { o(context.header, css, `

<div id="publishing-form">

    <div id="publishing-tabs">
        <div class="publishing-tab" id="publishing-tab-add">Add</div>
    </div>

    <div id="publishing-headers">
        
    </div>

    <h3>
        Topic category
    </h3>
    <div id="publishing-topic">
        <div id="publishing-category">
            <div class="publishing-category-single" data-category="local">
                <i class="far fa-map-marker"></i>
                <span>Local content</span>
            </div>
            <div class="publishing-category-single" data-category="interest">
                <i class="far fa-futbol"></i>
                <span>Interests</span>
            </div>
            <div class="publishing-category-single" data-category="partners">
                <i class="far fa-handshake"></i>
                <span>Partners</span>
            </div>
        </div>
        <div id="publishing-topic-cards">

        </div>
    </div>

    <h3>Featured image</h3>
    <div id="publishing-media">
        <div id="featured-image-selector">
            <img id="featured-image-tag" class="media_explorer_form pickable" data-hiddenfield="media" data-size="facebook" data-withcredit="true" />
            <input type="hidden" name="media" id="mediapicker" />
        </div>
    </div>    

    <h3>Publication State</h3>
    <div id="publication-details">
        <div class="pub-detail-field">
            <span>URL</span>
            <a id="pub-url-link"></a>
        </div>
        <div class="pub-detail-field">
            <span>Publication date</span>
            <input class="pub-field lml-date" id="pdate" data-options="time" placeholder="Click to select a date and time" type="text">
        </div>
        <div class="pub-detail-field">
            <span>Author</span>
            <select id="pauthor" class="pub-field">

            </select>
        </div>
    </div>
</div>


<script>
    window._poststate = {};

    var updateState = function() {
        var titles    = Array.prototype.map.call(document.querySelectorAll('.big-title'),    function(x) { return x.value; });
        var subtitles = Array.prototype.map.call(document.querySelectorAll('.big-subtitle'), function(x) { return x.value; });
        var contents  = allEditors.map(function(x) { return x.content; });

        window._poststate.title = titles;
        window._poststate.subtitle = subtitles;
        window._poststate.content = contents;
        // Topic set at : window._poststate.topic;

        window._poststate.media = d.id('mediapicker').value;
    }    

    var refreshState = function() {
        // Url, Date, author, status
        
    };

    var refreshActions = function() {

    };

    var switchToTab = function(index) {
        var tab = d.q('.publishing-tab.selected').get();
        tab && tab.classList.remove('selected');

        var header = d.q('.publishing-header.selected').get();
        header && header.classList.remove('selected');

        d.id('publishing-tab-' + index).cadd('selected');
        d.id('publishing-header-' + index).cadd('selected');
    };

    var totalpage = 0;
    var allEditors = [];
    var createHeaderSlide = function(title = "", subtitle = "", content = "<p></p>") {
        log('Publishing', 'Creating new header slide with index ' + totalpage);

        var wrap = d.make({ class : "publishing-header", id : "publishing-header-" + totalpage });        
        var btitle = d.make({ node : "input", attr : { placeholder : totalpage ? "(Reuse headline)" : "Headline" }, class : "big-title", parent : wrap }).get();
        var bsubtitle = d.make({ node : "input", attr : { placeholder : totalpage ? "(Reuse subtitle)" : "Subtitle" }, class : "big-subtitle", parent : wrap }).get();
        var beditor = d.make({ class : "big-content", id : "publishing-" + totalpage, parent : wrap }).get();
        var textEditor = new LiliumText(beditor, {
            content : content,
            boldnode : "b",
            commandsets : [
                [
                    new LiliumTextWebCommand('text', "b", "far fa-bold"), 
                    new LiliumTextWebCommand('text', "i", "far fa-italic"), 
                    new LiliumTextWebCommand('text', "u", "far fa-underline"),  
                    new LiliumTextWebCommand('text', "strike", "far fa-strikethrough"),
                    new LiliumTextWebCommand('remove', undefined, "far fa-eraser")
                ], [
                    new LiliumTextCustomCommand('undo', LiliumTextCustomUndo, 'far fa-undo'),
                    new LiliumTextCustomCommand('redo', LiliumTextCustomRedo, 'far fa-redo')
                ], [
                    new LiliumTextWebCommand('block', 'p', 'far fa-paragraph'), 
                    new LiliumTextWebCommand("block", "h3", "far fa-h3"),
                    new LiliumTextWebCommand("block", "blockquote", "far fa-quote-right"),
                ], [
                    new LiliumTextWebCommand('insert', 'hr', 'far fa-minus')
                ], [
                    new LiliumTextWebCommand('exec', "insertOrderedList",   "far fa-list-ol"),  
                    new LiliumTextWebCommand('exec', "insertUnorderedList", "far fa-list-ul"), 
                    new LiliumTextWebCommand('remove', 'a', 'far fa-unlink')
                ], [
                    new LiliumTextCustomCommand("full", LiliumTextCustomCommandFullscreen, "far fa-window-maximize"),
                    new LiliumTextCustomCommand("code", LiliumTextCustomCommandCode, "far fa-code")
                ]
            ],
            plugins : [
                LiliumTextImageInsertionPlugin
            ]
        });

        btitle.value = title.trim();
        bsubtitle.value = subtitle.trim();
        allEditors.push(textEditor);
        d.id('publishing-headers').born(wrap);

        var tab = d.make({ class : "publishing-tab", id : "publishing-tab-" + totalpage, text : totalpage == 0 ? "Landing" : "Page " + totalpage });

        var currentpage = totalpage;
        tab.bind('click', function() {
            switchToTab(currentpage);
        });

        d.id('publishing-tabs').born(tab).born(d.id('publishing-tab-add'));

        return totalpage++;
    };

    var selectFinalTopic = function(topicid) {
        var fulltopic = window._cachedAllTopics.find(function(x) { return x._id == topicid  });        
        var card = d.make({ class : "topic-card topic-final-card", parent : d.id("publishing-topic-cards") });
        d.make({ parent : card, class : "topic-final-title", text : "Selected topic" });
        d.make({ parent : card, class : "topic-final-displayname", text : fulltopic.displayname });
        
        var cancelbutton = d.make({ parent : card, class : "topic-final-cancel", text : "Change topic" });
        cancelbutton.bind('click', function() {
            resetTopic();
        });

        setTimeout(function() {
            card.cadd('shown');
        }, 5);

        window._poststate.topic = topicid;
    }

    var resetTopic = function() {
        var cards = document.querySelectorAll('.topic-card:not(.topic-final-card)');
        for (var i = cards.length - 1; i >= 0; i--) {
            cards[i].remove();
        }

        var finalcard = document.querySelector('.topic-final-card');
        if (finalcard) {
            finalcard.classList.remove('shown');
            setTimeout(function() {
                finalcard.remove();
            }, 200);
        }
    }

    var selectTopic = function(topicid, forceFinal) {
        window._selectedTopic = topicid;
        var list = window._cachedAllTopics.filter(function(x) { return x.parent == topicid });

        if (forceFinal || list.length == 0) {
            selectFinalTopic(topicid);
        } else {
            var fulltopic = window._cachedAllTopics.find(function(x) { return x._id == topicid  });        
            addTopicCard(fulltopic.displayname, list);
        }
    }

    var addTopicCard = function(title, list) {
        var card = d.make({ parent : d.id("publishing-topic-cards"), class : "topic-card" });
        var title = d.make({ parent : card, class : "topic-card-title", text : title });
        var elementlist = d.make({ parent : card, class : "topic-card-topics" });
        list.forEach(function(t) {
            var elementtopic = d.make({ parent : elementlist, class : "topic-card-topic", text : t.displayname });
            elementtopic.bind('click', function() {
                selectTopic(t._id);
            });
        });

        setTimeout(function() {
            card.cadd('shown');
        }, 5);
    }

    var addTopicCardFromCat = function(cat) {
        var list = window._cachedAllTopics.filter(function(x) { return x.category == cat });
        d.q('.topic-card', true).forEach(function(x) { x.get().remove(); });
        addTopicCard(cat, list);
    };

    var initTopics = function() {
        window._cachedAllTopics = liliumcms.livevars.livevars()["topics.simple"];

        d.q('.publishing-category-single', true).forEach(function(x) {
            x.bind('click', function(ev) {
                var cat = x.dataset.category;
                addTopicCardFromCat(cat);
            });
        });
    };

    var initAuthor = function() {
        var entities = liliumcms.livevars.livevars()["entities.simple"];
        var selectbox = d.id("pauthor").get();
        entities.forEach(function(x) {
            var opt = document.createElement('option');
            opt.textContent = x.displayname;
            opt.value = x._id;
            selectbox.appendChild(opt);
        });
    };

    var showNotFound = function() {

    };

    liliumcms.lmldom.bind(function() {
        var post = liliumcms.livevars.livevars()["publishing.write." + liliumcms.pageloader.lastLevel];
        if (!post) {
            return showNotFound();
        }

        window._poststate = post;
        for (var i = 0; i < post.title.length; i++) {
            createHeaderSlide(post.title[i], post.subtitle[i], post.content[i]);
        }

        d.id('publishing-tab-add').bind('click', function() {
            switchToTab(createHeaderSlide());
        });

        switchToTab(0);

        initTopics();
        post.topic && selectFinalTopic(post.topic);

        initAuthor();

        if (post.media) {
            d.id('mediapicker').get().value = post.media;
            liliumcms.livevars.getSingleLivevar("uploads.single." + post.media, {}, function(r) { 
                var fullmedia = r.livevars["uploads.single." + post.media];
                if (fullmedia) {
                    d.id('featured-image-tag').get().src = fullmedia.sizes.facebook && fullmedia.sizes.facebook.url;
                }
            });
        }

        refreshState();
        refreshActions();
    });
</script>

`);};

module.exports = { settings, compile };
