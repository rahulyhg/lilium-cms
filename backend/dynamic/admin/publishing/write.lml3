const settings = {     
    livevars : ["publishing.write.{?1}", "topics.simple", "entities.simple", "themes.templates.article"],
    lmldom : { v : 1.0 }
};                    
         
         
const css = require('./style.css');

const compile = (o, context) => { o(context.header, css, `

<link rel="stylesheet" type="text/css" href="/compiled/theme/liliumtext.css">

<script>
    var STICKY_ACTIONS = [
        {
            id : "save",
            shouldShow : function() {
                return window._poststate.status == "draft" || window._poststate.status == "deleted";
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Save";
                button.addEventListener('click', saveCurrentPost);
                return button;
            }
        },
        {
            id : "publish",
            shouldShow : function() {
                return window._poststate.status == "draft" || window._poststate.status == "deleted";
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Publish article";
                button.addEventListener('click', publishCurrentPost);
                return button;
            }
        },
        {
            id : "update",
            shouldShow : function() {
                return window._poststate.status == "published";
            },
            render : function() {
                var button = document.createElement('button');
                button.textContent = "Update";
                button.addEventListener('click', publishCurrentPost);
                return button;
            }
        }
    ];
</script>

<div id="publishing-actions">
    <h3>Manage</h3>
    <div id="sticky-actions">
        
    </div>

    <h3>History</h3>
    <div id="history-wrap">

    </div>
</div>

<div id="publishing-form">
    <h1>Publishing</h1>

    <div id="publishing-tabs">
        <div class="publishing-tab" id="publishing-tab-add">Add</div>
    </div>

    <div id="publishing-headers">
        
    </div>

    <h3>
        Topic category
    </h3>
    <div id="publishing-topic">
        <div id="publishing-category">
            <div class="publishing-category-single" data-category="local">
                <i class="far fa-map-marker"></i>
                <span>Local content</span>
            </div>
            <div class="publishing-category-single" data-category="interest">
                <i class="far fa-futbol"></i>
                <span>Interests</span>
            </div>
            <div class="publishing-category-single" data-category="partners">
                <i class="far fa-handshake"></i>
                <span>Partners</span>
            </div>
        </div>
        <div id="publishing-topic-cards">

        </div>
    </div>

    <h3>Featured image</h3>
    <div id="publishing-media">
        <div id="featured-image-selector">
            <img id="featured-image-tag" class="media_explorer_form pickable" data-hiddenfield="media" data-size="facebook" data-withcredit="true" />
            <input type="hidden" name="media" id="mediapicker" />
        </div>
    </div>    

    <h3>Publication State</h3>
    <div id="publication-details">
        <div class="pub-detail-field">
            <span>Status</span>
            <b id="pub-status"></b>
        </div>
        <div class="pub-detail-field">
            <span>Author</span>
            <select id="pauthor" class="pub-field">

            </select>
        </div>
        <div class="pub-detail-field">
            <span>Publication date</span>
            <input class="pub-field lml-date" id="pdate" data-options="time" placeholder="Click to select a date and time" type="text">
        </div>
        <div class="pub-detail-field">
            <span>URL</span>
            <a id="pub-url-link" href="" target="_blank"></a>
        </div>
        <div class="pub-detail-field">
            <span>Registered shares</span>
            <b id="pub-shares">-</b>
        </div>
        <div class="pub-detail-field">
            <span>Last updated on</span>
            <b id="pub-last-update">Never updated</b>
        </div>
    </div>
</div>

<script>
    window._poststate = {};

    var createPayload = function() {
        var s = window._poststate;
        return {
            title : s.title,
            subtitle : s.subtitle,
            content : s.content,
            topic : s.topic,
            media : s.media,
            name : s.name,
            nsfw : s.nsfw,
            date : s.date,

            useSponsoredBox : s.useSponsoredBox,
            sponsoredBoxContent : s.sponsoredBoxContent,
            sponsoredBoxLogo : s.sponsoredBoxLogo,
            sponsoredBoxTitle : s.sponsoredBoxTitle,
            sponsoredBoxURL : s.sponsoredBoxURL,

            customfacebooktitle : s.customfacebooktitle,
            facebooktitle : s.facebooktitle,
            facebooksubtitle : s.facebooksubtitle
        };
    }

    // Update local object sent to the server
    var updateState = function() {
        var titles    = Array.prototype.map.call(document.querySelectorAll('.big-title'),    function(x) { return x.value; });
        var subtitles = Array.prototype.map.call(document.querySelectorAll('.big-subtitle'), function(x) { return x.value; });
        var contents  = allEditors.map(function(x) { return x.content; });

        window._poststate.title = titles;
        window._poststate.subtitle = subtitles;
        window._poststate.content = contents;
        // Topic set at : window._poststate.topic;
        window._poststate.date = liliumcms.lmldom.flatpickr.pdate.input.value ? new Date(liliumcms.lmldom.flatpickr.pdate.input.value) : undefined;

        window._poststate.media = document.getElementById('mediapicker').value;
        window._poststate.author = document.getElementById('pauthor').value;
    }    

    // Update bottom section with current article state
    var refreshState = function() {
        // Url, Date, author, status
        document.getElementById('pub-url-link').text = window._poststate.url || "This article does not have a URL";
        document.getElementById('pub-url-link').href = window._poststate.url || "";

        document.getElementById('pauthor').value = window._poststate.author;
        if (window._poststate.date) {
            liliumcms.lmldom.flatpickr.pdate.setDate(new Date(window._poststate.date))
        }

        document.getElementById('pub-shares').textContent = window._poststate.shares || "-";
        document.getElementById('pub-last-update').textContent = window._poststate.updated ?
            dateFormat(new Date(window._poststate.updated), "mmmm, dd yyyy 'at' HH:MM:ss") : 
            "Never updated";

        document.getElementById('pub-status').textContent = window._poststate.status;
    };

    // Refresh possible actions
    var refreshActions = function() {
        var wrap = d.id('sticky-actions');
        wrap.empty();

        STICKY_ACTIONS.forEach(function(act) {
            act.shouldShow() && wrap.get().appendChild(act.render());
        });
    };

    var switchToTab = function(index) {
        var tab = d.q('.publishing-tab.selected').get();
        tab && tab.classList.remove('selected');

        var header = d.q('.publishing-header.selected').get();
        header && header.classList.remove('selected');

        d.id('publishing-tab-' + index).cadd('selected');
        d.id('publishing-header-' + index).cadd('selected');
    };

    var totalpage = 0;
    var allEditors = [];
    var createHeaderSlide = function(title = "", subtitle = "", content = "<p></p>") {
        log('Publishing', 'Creating new header slide with index ' + totalpage);

        var wrap = d.make({ class : "publishing-header", id : "publishing-header-" + totalpage });        
        var btitle = d.make({ node : "input", attr : { placeholder : totalpage ? "(Reuse headline)" : "Headline" }, class : "big-title", parent : wrap }).get();
        var bsubtitle = d.make({ node : "input", attr : { placeholder : totalpage ? "(Reuse subtitle)" : "Subtitle" }, class : "big-subtitle", parent : wrap }).get();
        var beditor = d.make({ class : "big-content", id : "publishing-" + totalpage, parent : wrap }).get();
        var textEditor = new LiliumText(beditor, {
            content : content,
            boldnode : "b",
            commandsets : [
                [
                    new LiliumTextWebCommand('text', "b", "far fa-bold"), 
                    new LiliumTextWebCommand('text', "i", "far fa-italic"), 
                    new LiliumTextWebCommand('text', "u", "far fa-underline"),  
                    new LiliumTextWebCommand('text', "strike", "far fa-strikethrough"),
                    new LiliumTextWebCommand('remove', undefined, "far fa-eraser")
                ], [
                    new LiliumTextCustomCommand('undo', LiliumTextCustomUndo, 'far fa-undo'),
                    new LiliumTextCustomCommand('redo', LiliumTextCustomRedo, 'far fa-redo')
                ], [
                    new LiliumTextWebCommand('block', 'p', 'far fa-paragraph'), 
                    new LiliumTextWebCommand("block", "h3", "far fa-h3"),
                    new LiliumTextWebCommand("block", "blockquote", "far fa-quote-right"),
                ], [
                    new LiliumTextWebCommand('insert', 'hr', 'far fa-minus')
                ], [
                    new LiliumTextWebCommand('exec', "insertOrderedList",   "far fa-list-ol"),  
                    new LiliumTextWebCommand('exec', "insertUnorderedList", "far fa-list-ul"), 
                    new LiliumTextWebCommand('remove', 'a', 'far fa-unlink')
                ], [
                    new LiliumTextCustomCommand("full", LiliumTextCustomCommandFullscreen, "far fa-window-maximize"),
                    new LiliumTextCustomCommand("code", LiliumTextCustomCommandCode, "far fa-code")
                ]
            ],
            plugins : [
                LiliumTextImageSelectionPlugin,
                LiliumTextImageInsertionPlugin,
                LiliumTextEmbedPlugin
            ]
        });

        btitle.value = title.trim();
        bsubtitle.value = subtitle.trim();
        allEditors.push(textEditor);
        d.id('publishing-headers').born(wrap);

        var tab = d.make({ 
            class : "publishing-tab", 
            id : "publishing-tab-" + totalpage, 
            text : totalpage == 0 ? "Landing" : "Page " + totalpage 
        });

        var currentpage = totalpage;
        tab.bind('click', function() {
            switchToTab(currentpage);
        });

        d.id('publishing-tabs').born(tab).born(d.id('publishing-tab-add'));

        return totalpage++;
    };

    var selectFinalTopic = function(topicid) {
        var fulltopic = window._cachedAllTopics.find(function(x) { return x._id == topicid  });        
        var card = d.make({ class : "topic-card topic-final-card", parent : d.id("publishing-topic-cards") });
        d.make({ parent : card, class : "topic-final-title", text : "Selected topic" });
        d.make({ parent : card, class : "topic-final-displayname", text : fulltopic.displayname });
        
        var cancelbutton = d.make({ parent : card, class : "topic-final-cancel", text : "Change topic" });
        cancelbutton.bind('click', function() {
            resetTopic();
        });

        setTimeout(function() {
            card.cadd('shown');
        }, 5);

        window._poststate.topic = fulltopic;
    }

    var resetTopic = function() {
        var cards = document.querySelectorAll('.topic-card:not(.topic-final-card)');
        for (var i = cards.length - 1; i >= 0; i--) {
            cards[i].remove();
        }

        var finalcard = document.querySelector('.topic-final-card');
        if (finalcard) {
            finalcard.classList.remove('shown');
            setTimeout(function() {
                finalcard.remove();
            }, 200);
        }
    }

    var selectTopic = function(topicid, forceFinal) {
        window._selectedTopic = topicid;
        var list = window._cachedAllTopics.filter(function(x) { return x.parent == topicid });

        if (forceFinal || list.length == 0) {
            selectFinalTopic(topicid);
        } else {
            var fulltopic = window._cachedAllTopics.find(function(x) { return x._id == topicid  });        
            addTopicCard(fulltopic.displayname, list);
        }
    }

    var addTopicCard = function(title, list) {
        var card = d.make({ parent : d.id("publishing-topic-cards"), class : "topic-card" });
        var title = d.make({ parent : card, class : "topic-card-title", text : title });
        var elementlist = d.make({ parent : card, class : "topic-card-topics" });
        list.forEach(function(t) {
            var elementtopic = d.make({ parent : elementlist, class : "topic-card-topic", text : t.displayname });
            elementtopic.bind('click', function() {
                selectTopic(t._id);
            });
        });

        setTimeout(function() {
            card.cadd('shown');
        }, 5);
    }

    var addTopicCardFromCat = function(cat) {
        var list = window._cachedAllTopics.filter(function(x) { return x.category == cat });
        d.q('.topic-card', true).forEach(function(x) { x.get().remove(); });
        addTopicCard(cat, list);
    };

    var initTopics = function() {
        window._cachedAllTopics = liliumcms.livevars.livevars()["topics.simple"];

        d.q('.publishing-category-single', true).forEach(function(x) {
            x.bind('click', function(ev) {
                var cat = x.dataset.category;
                addTopicCardFromCat(cat);
            });
        });
    };

    var initAuthor = function() {
        var entities = liliumcms.livevars.livevars()["entities.simple"];
        var selectbox = d.id("pauthor").get();
        entities.forEach(function(x) {
            var opt = document.createElement('option');
            opt.textContent = x.displayname;
            opt.value = x._id;
            selectbox.appendChild(opt);
        });
    };

    var pushHistoryCard = function() {

    };

    var createHistory = function() {
        var users = liliumcms.livevars.livevars()["entities.simple"];
        var hist = d.id("history-wrap");
        var creatorname = users.find(function(user) { user._id == window._poststate.window._poststate.createdBy }) || { displayname : "Unknown" };
        
    }

    var showNotFound = function() {

    };

    var publishCurrentPost = function() {

    };

    var saveCurrentPost = function() {

    };

    liliumcms.lmldom.bind(function() {
        var post = liliumcms.livevars.livevars()["publishing.write." + liliumcms.pageloader.lastLevel];
        if (!post) {
            return showNotFound();
        }

        window._poststate = post;
        for (var i = 0; i < post.title.length; i++) {
            createHeaderSlide(post.title[i], post.subtitle[i], post.content[i]);
        }

        d.id('publishing-tab-add').bind('click', function() {
            switchToTab(createHeaderSlide());
        });

        switchToTab(0);

        initTopics();
        post.topic && selectFinalTopic(post.topic);

        initAuthor();

        if (post.media) {
            d.id('mediapicker').get().value = post.media;
            liliumcms.livevars.getSingleLivevar("uploads.single." + post.media, {}, function(r) { 
                var fullmedia = r.livevars["uploads.single." + post.media];
                if (fullmedia) {
                    d.id('featured-image-tag').get().src = fullmedia.sizes.facebook && fullmedia.sizes.facebook.url;
                }
            });
        }

        refreshState();
        refreshActions();

        createHistory();
    });
</script>

`);};

module.exports = { settings, compile };
