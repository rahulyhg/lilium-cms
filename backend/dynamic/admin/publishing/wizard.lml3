const settings = {
    title : "Publishing wizard",
    lmldom : { v : 1.0 },
    livevars : ["publishing.write.{?1}"]
};

const compile = (o, context) => { o(context.header, `

<div id="lml-wizard">
    <div class="liliumtext theme-minim liliumtext-spoof">
        <div id="post-template" class="liliumtext-editor">

        </div>
    </div>

    <div id="post-actions">
        <div id="post-action-text">
            Click on any element in the preview panel
        </div>

        <div id="elem-info">
            <div class="card">
                <b>Paragraph block</b>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" type="text/css" href="/compiled/theme/liliumtext.css">
<style>

#post-actions {
    background: #f6f6f6;
    width: calc(100% - 680px);
    overflow-y: auto;
    position: fixed;
    top: 128px;
    right: 0px;
    bottom: 0;
}

#post-action-text {
    display: block;
    margin-top: 100px;
    text-align: center;
    font-size: 36px;
    padding: 0px 40px;
    color: #a699b1;
    font-weight: bold;
}

#lml-wizard {
    position: relative;
}

#lilium .liliumtext.theme-minim #post-template {
    width: 640px;
    overflow-y: auto;
    position: fixed;
    top: 128px;
    left: 40px;
    bottom: 0;
    box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.2);
    background: #fff;
    padding: 0;
    z-index: 10;
}

#post-template img {
    width: 100%;
    height: auto;
}

#post-template .post-template-page > * {
    padding: 10px;
    margin: 10px;
    border: 1px solid #FFF;
    cursor: pointer;
    border-radius: 10px;
}

#post-template .post-template-page > *:hover {
    border-color: #CCC;
    background-color: #F6F6F6;
}

#post-template .post-template-page:not(:first-child):before {
    content : attr(data-textheader);

}

</style>

<script>

liliumcms.lmldom.bind(function() {
    var content = liliumcms.livevars.livevars()["publishing.write." + liliumcms.pageloader.lastLevel].content;
    var template = document.getElementById('post-template');

    for (var i = 0; i < content.length; i++) {
        var parser = document.createElement('div');
        parser.innerHTML = content[i];

        var newwrap = document.createElement('div');
        newwrap.dataset.index = i;
        newwrap.dataset.textheader = "Page " + (i+1);
        newwrap.className = "post-template-page";
        while (parser.firstChild) {
            newwrap.appendChild(parser.firstChild);
        }

        var links = newwrap.querySelectorAll('a');
        Array.prototype.forEach.call(links, function(a) { a.target = "_blank"; })

        template.appendChild(newwrap);
    }
});

</script>
    
`); }

module.exports = { settings, compile };
