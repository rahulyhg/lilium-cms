const settings = {
    lmldom : { v : 1.0 },
    title : "Entities",
    livevars : ["role", "entities.simple.active", "sites.all.simple"]
};

const compile = (o, context) => { o(context.header, `

<lml-bunch>
    <lml-bunchfilters>
        <div class="bunch-filters">
            <div class="bunch-filters-title">FILTERS</div>
            <label>Search</label>
            <input type="text" name="search" placeholder="Display name, username" />

            <label>Status</label>
            <select name="status">
                <option value="not-revoked">Active</option>
                <option value="revoked">Revoked</option>
                <option value="all">Any</option>
            </select>

            <label>Sort</label>
            <select name="sort">
                <option value="displayname-az">Display name A-Z</option>
                <option value="displayname-za">Display name Z-A</option>
                <option value="latest-logged">Login time</option>
                <option value="newest">Newest</option>
                <option value="oldest">Oldest</option>
            </select>

            <label>Role</label>
            <select name="role" id="filter-roles">
                <option value="all">Any</option>
            </select>
        </div>
    </lml-bunchfilters>

    <lml-emptytemplate>
        <div id="emptytemplate">
            <span>Nothing found</span>
            <p>It would appear there is currently nothing in the database matching the current filters.</p>
        </div>
    </lml-emptytemplate>

    <lml-bunchitem generator="generateCard"></lml-bunchitem>

    <script type="lmljson" name="rolebunch">
        {
            "datasource" : "entities.bunch",
            "loopvar" : "entity",
            "id" : "entity-list"
        }
    </script>
</lml-bunch> 

<div id="edit-entity-modal" class="lml-modal">
    <div class="lml-modal-title">
        Edit entity
    </div>
    <div class="lml-modal-body lmlform">
        <h3>Public information</h3>
        <span>Display Name</span>
        <input id="e-displayname" placeholder="This name is public and will appear on the website" name="displayname" />

        <span>URL Slug</span>
        <input id="e-slug" placeholder="The URL representation of the entity's name" name="slug" />

        <hr />

        <h3>Contact information</h3>
        <span>Email</span>
        <input id="e-email" />

        <span>Phone number</span>
        <input id="e-phonenumber" />

        <hr />

        <h3>Reporting</h3>
        <span>This entity reports to</span>
        <select id="e-reports-to">
            <option value=""> - No one - </option>
        </select>
    </div>
    <div class="lml-modal-footer">
        <button class="lml-modal-cancel" type="button">Cancel</button>
        <button class="lml-modal-accept" type="button">Save</button>
    </div>
</div>

<div id="access-entity-modal" class="lml-modal">
    <div class="lml-modal-title">
        Entity access
    </div>
    <div class="lml-modal-body lmlform">
        <h3>Websites</h3>
        <span>Network access</span>
        <div id="e-sites"></div>

        <span>Roles</span>
        <div id="e-roles"></div>
    </div>

    <div class="lml-modal-footer">
        <button class="lml-modal-cancel" type="button">Cancel</button>
        <button class="lml-modal-action" type="button">Send Magic Link</button>
        <button class="lml-modal-accept" type="button">Save</button>
    </div>
</div>

<script>
var _contextEntity;
var _contextWidgets = {};

var EDIT_ENTITY_BUNDLE_LAYOUT = {
    'e-displayname' : "displayname",
    'e-slug'        : "slug",
    'e-email'       : "email",
    'e-phonenumber' : "phone",
    'e-reports-to'  : "reportsto"
};

window["edit-entity-modal_accept"] = function(modal) {
    var b = liliumcms.lmldom.bundle(EDIT_ENTITY_BUNDLE_LAYOUT);
    liliumcms.lmldom.post(b, '${context._c.server.url}/admin/entities/edit/' + _contextEntity._id, function() {
        liliumcms.notify({ type : "success", title : "Edit entity", message : _contextEntity.displayname + "'s entity was updated successfully" });
        liliumcms.lmldom.updatedBunches();
        modal.dismiss();
    });
};

var popupEntity = function(entity) {
    _contextEntity = entity;
    liliumcms.lmldom.unbundle(entity, EDIT_ENTITY_BUNDLE_LAYOUT);
    liliumcms.modals.get('edit-entity-modal').cast();
};

var popupEntityPassword = function(entity) {
    _contextEntity = entity;
    _contextWidgets["e-sites"].setValues(entity.sites);
    _contextWidgets["e-roles"].setValues(entity.roles);
    liliumcms.modals.get('access-entity-modal').cast();
}

var popupRevokeEntity = function(entity) {
    _contextEntity = entity;
}

liliumcms.lmldom.bind(function() {
    _contextWidgets["e-sites"] = new LMLDOM_MultiSelect(document.getElementById("e-sites"));
    _contextWidgets["e-roles"] = new LMLDOM_MultiSelect(document.getElementById("e-roles"));

    var roles = liliumcms.livevars.livevars().role;
    var dbrole = d.id("filter-roles");
    roles && roles.forEach(function(role) {
        d.make({ node : "option", attr : { value : role.name }, text : role.displayname, parent : dbrole });
        _contextWidgets["e-roles"].add(role.name, role.displayname);
    });

    var everyone = liliumcms.livevars.livevars()["entities.simple.active"];
    var dbreports = d.id('e-reports-to');
    everyone && everyone.forEach(function(u) {
        d.make({ node : "option", attr : { value : u._id }, text : u.displayname, parent : dbreports });
    });

    var sites = liliumcms.livevars.livevars()["sites.all.simple"];
    sites && sites.forEach(function(s) {
        _contextWidgets["e-sites"].add(s.id, s.displayName);
    });
});

window.generateCard = function(entity, ldContext) {
    var wrap = d.make({ class : "entity-card" });

    var photowrap = d.make({ class : "entity-photo-wrap", parent : wrap })
    d.make({ class : "entity-picture", node : "img", attr : { src : entity.avatarURL }, parent : photowrap });
    d.make({ class : "entity-name", text : entity.displayname, parent : photowrap });
    entity.roles && entity.roles.includes('admin') && d.make({ class : "admin-mention", text : "admin", parent : photowrap });

    var details = d.make({ class : "entity-details", parent : wrap });
    d.make({ class : "entity-username", text : "@" + entity.username, parent : details });
    entity.lastLogin ? 
        d.make({ class : "last-seen", text : "Last seen on " + dateFormat(new Date(entity.lastLogin), "mmmm dd, yyyy") , parent : details}) :
        d.make({ class : "last-seen", text : "Never logged in", parent : details}); 

    if ((!entity.roles || !entity.roles.includes('admin') || liliumcms.session.current.roles.includes('admin')) && entity._id != liliumcms.session.current._id) {
        var btnwrap = d.make({ class : "entity-actions", parent : wrap });

        d.make({ node : "u", text : "manage access", parent : btnwrap }).bind('click', function() { popupEntityPassword(entity); });
        d.make({ node : "u", text : "edit", parent : btnwrap }).bind('click', function() { popupEntity(entity); });
        d.make({ node : "u", text : "revoke", parent : btnwrap, class : "red" }).bind('click', function() { popupRevokeEntity(entity); });
    }

    return wrap.get();
}
</script>

<style>

#entity-list {
    display: flex;
    flex-wrap : wrap;
    padding: 6px;
    background : #f3f3f3;
}

.entity-card {
    width: 250px;
    height: auto;
    margin: 6px;
    border: 1px solid #DDD;
    border-bottom-width: 3px;
    background: #FFF;
}

.entity-picture {
    height : 250px;
    width : 100%;
    object-fit : cover;
}

.entity-photo-wrap {
    position: relative;
    overflow : hidden;
}

.admin-mention {
    position: absolute;
    top: 12px;
    right: -47px;
    background: #af57e4;
    color: #FFF;
    text-transform: uppercase;
    padding: 6px 46px;
    font-weight: bold;
    border-radius: 3px;
    font-size: 16px;
    transform: rotateZ(45deg);
    width: 150px;

    border-bottom: 3px solid #871faf;
    border-top: 1px solid #871faf;
}

.entity-name {
    position: absolute;
    bottom: 0px;
    left: 0px;
    right: 0px;
    z-index: 10;
    font-size: 20px;
    font-weight: bold;
    color: #eac3f3;
    text-shadow: 0px 1px 0px #7f3e98;
    background-color: rgba(137, 19, 208, 0.62);
    padding: 6px 12px;

    border-top: 1px solid #871faf;
    border-bottom: 1px solid #871faf;
}

.entity-details {
    background: #fff;
    padding : 12px;
}

.entity-username {
    color: #777;
    font-weight: bold;
}

.last-seen {
    font-size: 12px;
}

.entity-actions {
    text-align: right;
    margin: 10px;
    margin-top: 12px;
    border-top: 1px solid #DDD;
    padding: 5px 0px 0px;
}

.entity-actions u {
    display: inline-block;
    cursor: pointer;
    margin-left: 10px;
    font-size: 14px;
}

.entity-actions u.red {
    color: #de2f0f;
}

#emptytemplate {
    width: 500px;
    padding: 20px;
    margin: 40px auto;
    display: block;
    border: 1px solid #DDD;
    border-bottom-width: 3px;
    text-align: center;
    background: #FFF;
}

#emptytemplate span {
    display: block;
    font-size: 22px;
    margin-bottom: 10px;
}

lml-emptytemplate {
    display: block;
    width: 100%;
}

.lml-modal-body h3 {
    font-weight: bold;
    margin-top: 10px;
    margin-bottom: 4px;
    color: #BBB;
}

.lml-modal-body span {
    font-weight: 600;
    font-size: 14px;
    margin-bottom: 0px;
    color: #333;
}

</style>

`); };

module.exports = { settings, compile };
