const settings = {
    lmldom : { v : 1.0 },
    title : "Ads management",
    livevars : [
        "ads.list"
    ]
};

const css = `<style>

#content-ads-wrap,
#amp-ads-wrap {
    display: flex;
    flex-direction: row;
    flex-wrap : wrap;
    align-items: top;
}

#content-ads-en, #content-ads-fr,
#amp-ads-en, #amp-ads-fr {
    width : 50%;
    box-sizing: border-box;
    flex-grow: 1;
    overflow: hidden;
    list-style: none;
    padding: 10px;
}

.content-ad, .amp-ad {
    box-sizing : border-box;
    width : 100%;
    margin-bottom: 5px;
    border-bottom: 1px solid #DDD;
    border-left: 1px solid #EEE;
    font-size: 18px;
    padding: 8px;
    box-shadow: 0px 0px 1px rgba(0,0,0,0.2);
}

h2 {
    padding: 10px;
    background: #F3F3F3;
    border-bottom: 1px solid #DDD;
    font-size: 22px;
}

h3 {
    font-size: 18px;
    display: block;
    margin-bottom: 12px;
    border-bottom: 1px solid #DDD;
    padding-bottom: 6px;
}

#save-ads-button {
    margin: 10px;
}

</style>`;

const compile = (o, context) => { o(css, context.header, `

    <h2>Content ads</h2>
    <div id="content-ads-wrap">
        <div id="content-ads-en">
            <h3>English ads</h3>
            <button id="new-content-ad-en">Create new English content ad</button>
        </div>
        <div id="content-ads-fr">
            <h3>French ads</h3>

            <button id="new-content-ad-fr">Create new French content ad</button>
        </div>
    </div>

    <h2>AMP ads</h2>
    <div id="amp-ads-wrap">
        <div id="amp-ads-en">
            <h3>English AMP ads</h3>
            <button id="new-amp-ad-en">Create new English AMP ad</button>
        </div>
        <div id="amp-ads-fr">
            <h3>French AMP ads</h3>

            <button id="new-amp-ad-fr">Create new French AMP ad</button>
        </div>
    </div>

    <h2>Actions</h2>
    <button id="save-ads-button">
        <i class="far fa-cloud-upload"></i>
        Save ads
    </button>

    <script>
        var addContentAd = function(lang, type, markup) {
            var tb = document.createElement('textarea');
            tb.value = markup;
            tb.dataset.lang = lang;
            tb.dataset.type = type;
            tb.className = type + "-ad " + type + "-ad-" + lang + " ad-textarea";

            var wrap = document.getElementById(type + '-ads-' + lang);
            wrap.insertBefore(tb, wrap.querySelector('button'));
        }

        var saveAds = function() {
            var areas = document.querySelectorAll('.ad-textarea');
            var ads = [];
            for (var i = 0; i < areas.length; i++) {
                var area = areas[i];
                if (!area.value) {
                    continue;
                }
   
                ads.push({
                    lang : area.dataset.lang,
                    type : area.dataset.type,
                    markup : area.value
                });
            }

            liliumcms.lmldom.post({ads : ads}, '${context._c.server.url}/admin/ads', function() {
                liliumcms.notify({
                    "title" : "Ads were saved successfully" 
                });
            });
        }

        d.id('new-content-ad-en').bind('click', function() { addContentAd('en', 'content', ''); });
        d.id('new-content-ad-fr').bind('click', function() { addContentAd('fr', 'content', ''); });
        d.id('new-amp-ad-en').bind('click',     function() { addContentAd('en', 'amp', ''); });
        d.id('new-amp-ad-fr').bind('click',     function() { addContentAd('fr', 'amp', ''); });

        d.id('save-ads-button').bind('click', saveAds);

        liliumcms.lmldom.bind(function() {
            var adsets = liliumcms.livevars.livevars()["ads.list"];
            adsets.forEach(function(adset) {
                adset.ads.forEach(function(ad) {
                    addContentAd(adset.lang, adset.type, ad.markup);
                });
            });
        });
    </script>
`);};

module.exports = { settings, compile };
