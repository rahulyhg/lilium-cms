const modalName = "lml-modal-edit-event";
const modalNewDispatchName = "lml-modal-new-dispatch";

const compile = (o, context) => { o(`
<script>
    var calendarDataSource = "${context._c.server.url}/admin/socialdispatch/datasource";
    var oneDay = 1000 * 60 * 60 * 24;
    var now = new Date();

    var selectedStartDate = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
    var calendarData = { };
    var networksByID = {};

    var calendarID = "social-dispatch-calendar";
    var calendarHeaderID = "social-dispatch-headers";
    var calendarSingleHeaderClass = "social-dispatch-single-header";
    var calendarColumnsID = "social-dispatch-columns";
    var calendarSingleColumnClass = "social-dispatch-single-column";
    var calendarSinglePostClass = "social-dispatch-single-post";
    var calendarLegendID = "social-dispatch-legend";
    var calendarLegendItemClass = "social-dispatch-legend-item";
    var calendarFiltersID = "social-dispatch-filters";

    var numberOfColumns = window.innerWidth > 1300 ? window.innerWidth > 1700 ? 5 : 4 : 3;
    var calendarArticleTitleLimit = 30;
   
    var showOnlyPage = "";
    var statusFilter = "";

    var calendar = {
        fetch : function(cb) {
            liliumcms.lmldom.get(calendarDataSource, { flowserspin : true, json : true, params : {
                startstamp : selectedStartDate,
                endstamp : selectedStartDate + (numberOfColumns*oneDay),
                page : showOnlyPage,
                status : statusFilter,
                async : "true",
                format : "blocks"
            } }, function(data) {
                if (data) {
                    calendarData = {};
                    for (var i = 0; i < data.length; i++) {
                        var dd = new Date(data[i].time);
                        var day = new Date(dd.getFullYear(), dd.getMonth(), dd.getDate()).getTime();
                        if (!calendarData[day]) {
                            calendarData[day] = [];
                        }

                        calendarData[day].push(data[i]);
                    }
                } else {

                }

                cb && cb();
            });
        },
        render : function() {
            var cal = d.id(calendarColumnsID).empty();
            var headers = d.id(calendarHeaderID).empty();
            
            for (var i = selectedStartDate; i <= selectedStartDate + (oneDay * (numberOfColumns-1)); i += oneDay) {
                var thatday = new Date(i);
                var posts = calendarData[i];

                header = d.make({
                    class : calendarSingleHeaderClass,
                    text : dateFormat(thatday, 'dddd, mmmm dd') 
                });
                header.style("width", 100/numberOfColumns + "%");
                headers.born(header);

                var col = d.make({
                    class : calendarSingleColumnClass
                });
                col.style("width", 100/numberOfColumns + "%");
                cal.born(col);

                if (posts) for (var j = 0; j < posts.length; j++) {
                    var post = posts[j];
                    var page = networksByID[post.pageid] || {};
                    var pagename = page.displayname || "Deleted page";
                    var cell = d.make({
                        parent : col,
                        class : calendarSinglePostClass + " pageid-" + post.pageid + " status-" + post.status
                    });
                    cell.style('border', '2px solid ' + (page.color || ""));

                    var bar = d.make({
                        class : "social-dispatch-single-post-bar"
                    });
                    bar.get().style.backgroundColor = page.color || "";
                    cell.born(bar);

                    var time = new Date(post.time);
                    var timecell = d.make({
                        class : "sd-post-time",
                        text : dateFormat(time, 'HH:MM')
                    });
                    timecell.style('backgroundColor', page.color || "");
                    cell.born(timecell);

                    var titlecell = d.make({
                        class : "sd-post-title"
                    });
            
                    titlecell.born(d.make({
                        node : "span",
                        text : post.status,
                        class : "sd-post-status status-" + post.status
                    }));

                    titlecell.born(d.make({
                        node : "span",
                        text : post.article.title.substring(0, calendarArticleTitleLimit) + 
                            (post.article.title.length > calendarArticleTitleLimit ? "..." : "")
                    }));

                    cell.born(titlecell);
                    cell.bind('click', handleCellClick.bind(post, cell, post));
                }
                col.born(d.make({class : "float-clear"}))
            }

            headers.born(d.make({class : "float-clear"}))
        }
    };

    window.fbtargetkv = {};

    var statusLabelVocab = {
        "scheduled" : "scheduled",
        "published" : "live on Facebook"
    };

    // "this" is a post object
    var handleCellClick = function(cell, post) {
        var article = this.article;
        var cellel = cell.get();

        liliumcms.lmldom.get('${context._c.server.url}/admin/socialdispatch/deepFetch/' + post._id, {
            params : { async : "true" },
            spinflower : true,
            json : true
        }, function(sched) {
            var mod = liliumcms.modals.get('lml-modal-edit-event');
            mod.dispatchid = post._id;
            mod.fill(sched);
            liliumcms.lmldom.flatpickr["edit-event-time"].setDate(new Date(sched.time));
            d.id('edit-event-image').attr('src', sched.article.featuredimage[0].sizes.thumbnaillarge.url);
            d.id('edit-event-author').get().textContent = sched.article.authors[0].displayname;
            d.id('edit-event-title').get().textContent = sched.article.title;
            d.id('edit-event-subtitle').get().textContent = sched.article.subtitle;
            d.id('edit-event-href').attr('href', sched.article.url).get().textContent = sched.article.url;
            d.id('edit-event-edit-href').attr('href', '${context._c.server.url}/admin/article/edit/' + sched.article._id).get()
                .textContent = '${context._c.server.url}/admin/article/edit/' + sched.article._id;

            var targetwrap = d.id('edit-event-target').empty();
            if (sched.target && sched.target.length) for (var i = 0; i < sched.target.length; i++) {
                var tt = sched.target[i];
                d.make({
                    class : "targeting-blob type-" + tt.type,
                    text : tt.name,
                    parent : targetwrap
                });
            } else {
                d.make({
                    text : "No targeting set.",
                    parent : targetwrap
                });
            }

            mod.cast();
        });
    };

    var updateEvent = function(event, cb) {
        liliumcms.lmldom.sendForm({
            _id : event.id,
            date : event.at.getTime()
        }, "${context._c.server.url}/admin/socialdispatch/move", function() {
            cb && cb();
        });
    };

    window.newDispatchFromTool = function() {
        d.id('new-dispatch-search-results').empty();
        d.id('facebook-target-search-result').empty();
        d.id('facebook-target-selections').empty();

        d.id('new-dispatch-search').get().value = "";
        d.id('ncaption').get().value = "";
        d.id('facebook-target-search-box').get().value = "";

        liliumcms.modals.get("${modalNewDispatchName}").cast();
    }

    var fillSearchResults = function(posts) {
        var wrap = document.getElementById('new-dispatch-search-results');
        while (wrap.firstElementChild) {
            wrap.firstElementChild.remove();
        }

        var dwrap = d.id("new-dispatch-search-results");
        for (var i = 0; i < posts.length; i++) {
            var title = d.make({
                parent : dwrap,
                html : posts[i].title + " &middot; <i>Published on " + 
                    dateFormat(new Date(posts[i].date), "dd/mm/yyyy HH:MM") + "</i>"
            });

            title.cadd('new-dispatch-search-result');
            (function(post, elem) {
                title.bind('click', function() {
                    var maybeSel = dwrap.q('.selected');
                    if (maybeSel.get()) {
                        maybeSel.crm('selected');
                    }

                    elem.cadd('selected');
                    document.getElementById('npostid').value = post._id;
                });
            })(posts[i], title);
        }
    }

    var lastrequestterms = "";
    var maybeSearchDispatchPost = function(terms) {
        if (lastrequestterms != terms && terms.length > 2) {
            lastrequestterms = terms;
            liliumcms.lmldom.get('${context._c.server.url}/admin/socialdispatch/listposts', {
                json : true,
                params : { async : "true", terms : terms }
            }, function(articles) {
                fillSearchResults(articles);
            });
        }
    }

    var facebookTargetSearch = function(q, send) {
        liliumcms.lmldom.get("https://graph.facebook.com/v${context._c.social.facebook.apiversion}/search?access_token=${context._c.social.facebook.token}&type=adgeolocation&q=" + q, {
            spinflower : true,
            json : true
        }, function(json) {
            if (json && json.data) {
                var f = [];
                for (var i = 0; i < json.data.length; i++) {
                    var x = json.data[i];
                    var y = {
                        displayname : x.name + ", " + (x.region ? (x.region + ", ") : "") + x.country_name,
                        name : x.name,
                        key : x.key,
                        regionid : x.region_id,
                        countrycode : x.country_code,
                        type : x.type
                    };

                    f.push(y);
                    window.fbtargetkv[y.key] = y;
                }

                send(f);
            } else {
                send();
            }
        });
    }

    window["modal_cb_create"] = function(modal) {
        var params = modal.getFormData();

        if (!params.npostid || !params.ncaption || !params.ndatetime) {
            return;
        }

        if (params.ndatetime.getTime() < new Date().getTime() ) {
            modal.dismiss();
            return liliumcms.notify({type : "danger", title : "Date cannot be set to a past date.", message : "Double-check the date and time!"});
        }

        var target = [];
        var telems = document.querySelectorAll('#facebook-target-selections > div');

        for (var i = 0; i < telems.length; i++) {
            target.push(window.fbtargetkv[telems[i].dataset.key]);
        }

        liliumcms.lmldom.sendForm({
            pageid : params.npageid,
            postid : params.npostid,
            message : params.ncaption,
            time : params.ndatetime.getTime(),
            target : target
        }, "${context._c.server.url}/admin/socialdispatch/schedule", function() {
            modal.dismiss();
            calendar.fetch(function() {
                calendar.render();
                liliumcms.pageloader.present();
            }, true);
        });
    }

    window["modal_cb_save"] = function(modal) {
        var id = modal.dispatchid;
        var dat = modal.getFormData();

        liliumcms.lmldom.sendForm({
            id : id, 
            pageid : dat.pageid,
            message : dat.message,
            date : new Date(dat["edit-event-time"]).getTime()
        }, "${context._c.server.url}/admin/socialdispatch/move", function() {
            calendar.fetch(function() {
                calendar.render();
            }, true);
            modal.dismiss();
        });
    }

    window["modal_cb_delete"] = function(modal) {
        var id = modal.dispatchid;
        liliumcms.lmldom.sendForm({
            id : id
        }, "${context._c.server.url}/admin/socialdispatch/remove", function() {
            modal.dismiss();

            liliumcms.pageloader.tidy();
            calendar.fetch(function() {
                calendar.render();
                liliumcms.pageloader.present();
            }, true);
        });
    };


    liliumcms.lmldom.bind(function() {
        var cal = d.id(calendarID).empty();
        var legend = d.make({
            parent : cal,
            id : calendarLegendID
        });
        var dateheader = d.make({
            parent : cal,
            id : calendarHeaderID
        });
        var columns = d.make({
            parent : cal,
            id : calendarColumnsID
        });

        var networks = liliumcms.livevars.livevars()["socialdispatch.networks.liveselect"] || [];
        for (var i = 0; i < networks.length; i++) {
            networksByID[networks[i].name] = networks[i];
            var litem = d.make({
                parent : legend,
                class : calendarLegendItemClass
            });

            var dot = d.make({
                parent : litem,
                node : "i"
            });
            dot.style("backgroundColor", networks[i].color);
            
            d.make({
                parent: litem,
                node : "span",
                text : networks[i].displayname
            });
        }

        var filters = d.id(calendarFiltersID);
        filters.cadd("bunch-filters")
        d.make({
            parent : filters,
            class : "bunch-filters-title",
            text : "Display".toUpperCase()
        });
        d.make({
            parent: filters,
            node : "label",
            text : "Number of days"
        });
        
        var numDaySelect = d.make({
            parent : filters,
            node : "select",
            id : "numberofdays"
        });

        for (var i = 3; i < 8; i++) {
            d.make({
                parent : numDaySelect,
                node : "option",
                text : i
            });
        }

        d.make({
            parent : filters,
            node : "label",
            text : "Facebook page"
        });
        
        var pagefilter = d.make({
            parent: filters,
            node : "select",
            id : "pagefilter"
        });
        var optall = document.createElement('option');
        optall.textContent = "All";
        optall.value = "";
        pagefilter.get().appendChild(optall);

        for (var i = 0; i < networks.length; i++) {
            var opt = d.make({
                parent : pagefilter,
                node : "option",
                text : networks[i].displayname
            });
            opt.get().value = networks[i].name;
        }

        
        d.make({
            parent : filters,
            node : "label",
            text : "Status"
        });
        
        var statusfilter = d.make({
            parent: filters,
            node : "select",
            id : "statusfilter"
        });

        var allstatus = [
            {name : "All", value : ""},
            {name : "Published", value : "published"},
            {name : "Scheduled", value : "scheduled"},
            {name : "Error", value : "error"}
        ];
        for (var i = 0; i < allstatus.length; i++) {
            optall = document.createElement('option');
            optall.textContent = allstatus[i].name;
            optall.value = allstatus[i].value;
            statusfilter.get().appendChild(optall);
        }
        
        pagefilter.bind('change', function() {
            showOnlyPage = pagefilter.value;
            calendar.fetch(function() { calendar.render(); });
        });

        numDaySelect.get().value = numberOfColumns;
        numDaySelect.bind('change', function() {
            numberOfColumns = parseInt(numDaySelect.value);
            calendar.fetch(function() { calendar.render(); });
        });

        statusfilter.bind('change', function() {
            statusFilter = statusfilter.value;
            calendar.fetch(function() { calendar.render(); });
        });

        calendar.fetch(function() { calendar.render(); });
    });

    var addSearchTarget = function(fbtarget) {
        var elem = d.make({
            text : fbtarget.name + ", " + fbtarget.type,
            class : "fbtarget-" + fbtarget.type
        });

        d.id('facebook-target-selections').born(elem);
        elem.get().dataset.key = fbtarget.key;
        elem.bind('click', function() {
            elem.get().remove();
        });
    };

    var tsTimeout;
    var maybeSearchTarget = function(q) {
        if (!q.trim()) { return; }
        if (tsTimeout) { clearTimeout(tsTimeout); }

        tsTimeout = setTimeout(function() {
            tsTimeout = undefined;

            facebookTargetSearch(q, function(results) {
                var wrap = d.id('facebook-target-search-result');
                var wrapEl = wrap.get();
                while (wrapEl.firstElementChild) {
                    wrapEl.firstElementChild.remove();
                }

                for (var i = 0; i < results.length; i++) {
                    var resEl = d.make({
                        html : results[i].displayname + ' <i class="type-'+results[i].type+'">'+results[i].type+"</i>",
                        parent : wrap
                    });

                    (function(el, result) {
                        el.bind('click', function() {
                            addSearchTarget(result);
                            el.get().remove();
                        });
                    })(resEl, results[i]);
                }
            });
        }, 500);
    }
</script>

<div id="${modalNewDispatchName}" class="lml-modal">
    <div class="lml-modal-title">
        New social dispatch task
    </div>
    <div class="lml-modal-body">
        <div class="lml-modal-field">
            <label>Facebook Page</label>
            <select class="lmldom-liveselect" data-filledby="socialdispatch.networks.liveselect" name="npageid"></select>
        </div>

        <div class="lml-modal-field">
            <label>Caption</label>
            <textarea id="ncaption" class="lml-modal-fulltext" placeholder="This will appear above the image on Facebook"></textarea>
        </div>

        <div class="lml-modal-field">
            <label>When should it be published?</label>
            <input class="lml-date" id="ndatetime" data-options="time" placeholder="Click to select a date and time" />
        </div>

        <div class="lml-modal-field">
            <label>Which article should be published?</label>
            <div>
                <input class="" id="new-dispatch-search" placeholder="Search for words in the title..." />
                <input type="hidden" id="npostid" />
                <div id="new-dispatch-search-results">

                </div>
            </div>
        </div>

        <div class="lml-modal-field">
            <label>Who should see this post?</label>
            <div>
                <input id="facebook-target-search-box" placeholder="Search for a city or region..." />
                <div id="facebook-target-selections"></div>
                <div id="facebook-target-search-result">

                </div>
            </div>
        </div>
    </div>
    <div class="lml-modal-footer">
        <button class="lml-modal-cancel btn-default" type="button">Dismiss</button>
        <button class="lml-modal-action green" data-callback="modal_cb_create" type="button">Create</button>
    </div>
</div>

<div id="${modalName}" class="lml-modal">
    <div class="lml-modal-title">
        Edit social dispatch task
    </div>
    <div class="lml-modal-body">
        <div>
            <textarea name="message" class="lml-modal-fulltext" style="height: 60px;"></textarea>
        </div>

        <div style="margin: 0px -15px 0px -15px;">
            <img id="edit-event-image" />
        </div>
        <div id="edit-event-title"></div>
        <div class="edit-event-details">
            <div>
                <span id="edit-event-subtitle"></span>
            </div>
            <div class="edit-event-site-details">
                <span>${context._c.website.sitetitle}</span><span> | </span><span id="edit-event-author"></span>
            </div>
        </div>

        <hr />
        <div class="lml-modal-field">
            <label>Dispatch schedule</label>
            <input class="lml-date" id="edit-event-time" data-options="time" />
        </div>

        <div class="lml-modal-field">
            <label>Facebook Page</label>
            <select class="lmldom-liveselect" data-filledby="socialdispatch.networks.liveselect" name="pageid"></select>
        </div>

        <div class="lml-modal-field">
            <label>Targeting</label>
            <div id="edit-event-target">
                
            </div>
        </div>      

        <div class="lml-modal-field">
            <label style="display: block;">Article URL</label>
            <a href="" id="edit-event-href" target="_blank"></a>
        </div>

        <div class="lml-modal-field">
            <label style="display: block;">Article edition link</label>
            <a href="${context._c.server.url}/admin/article/edit/" id="edit-event-edit-href"></a>
        </div>
    </div>
    <div class="lml-modal-footer">
        <button class="lml-modal-cancel btn-default" type="button">Dismiss</button>
        <button class="lml-modal-action btn-red red" type="button" data-callback="modal_cb_delete">Delete</button>
        <button class="lml-modal-action green" data-callback="modal_cb_save" type="button">Save</button>
    </div>
</div>

<script>
document.getElementById("new-dispatch-search").addEventListener('keyup', function(ev) {
    maybeSearchDispatchPost(ev.target.value);
});

document.getElementById("facebook-target-search-box").addEventListener('keyup', function(ev) {
    maybeSearchTarget(ev.target.value);
});
</script>

<style>
.float-clear {
    float: none;
    clear: both;
}

#social-dispatch-single-header,
#social-dispatch-headers {
    float: none;
    clear: both;

    display: block;
}

#social-dispatch-headers {
    background: #FAFAFA;
    border-bottom: 1px solid #CCC;
    box-shadow: 0px 1px 5px rgba(0,0,0,0.1);
}

.social-dispatch-single-header {
    width: 33.3%;
    float: left;

    padding: 10px;
}

#social-dispatch-columns {

}

.social-dispatch-single-column {
    width: 33.3%;
    float: left;
}

.social-dispatch-single-post {
    display: block;
    border: 2px solid #DDD;
    border-radius : 5px;
    margin: 10px 10px 0px;

    cursor: pointer;
    position: relative;

    overflow: hidden;
}

.social-dispatch-single-post .sd-post-title {
    display: inline-block;
    width: calc(100% - 55px);
    padding: 6px 10px 6px;
    vertical-align: top;
    font-size: 13px;
    background-color: #F6F6F6;
    height: 30px;
}

.sd-post-time {
    display: inline-block;
    background-color: #333;
    color: #FFF;
    font-family: "Oswald", sans-serif;
    font-size: 20px;
    padding: 2px 6px;
    width: 55px;
    height: 30px;
}

.sd-post-status {
    display: inline-block;
    margin-right: 5px;
    background: #333;
    padding: 1px 4px 0px;
    color: #FFF;
    border-radius: 3px;
    text-transform: uppercase;
    font-size: 11px;
    font-weight: bold;
}

.status-published {}
.status-error {}
.status-scheduled {}

#social-dispatch-legend {
    padding: 10px;
    border-bottom: 1px solid #CCC;
    background-color: #F9F9F9;
}

.social-dispatch-legend-item {
    display: inline-block;
    margin-right: 10px;
}

.social-dispatch-legend-item i {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 8px;
    margin-right: 6px;
}

#new-dispatch-search-results {
    height: 220px;
    border: 1px solid #DDD;
    overflow: auto;
}

.new-dispatch-search-result {
    border-bottom: 1px solid #DDD;
    padding: 8px;
    cursor: pointer;
    font-weight: 500;    
}

.new-dispatch-search-result:hover {
    background-color: #F3F3F3;
}

.new-dispatch-search-result.selected {
    background-color: #Af57E4;
    color: #FFF;
    font-weight: 700;
}

.new-dispatch-search-result i {
    color : #777;
}

.new-dispatch-search-result.selected i {
    color: #DDD;
}

#social-dispatch-calendar .calendar-wrapper {
    float: none;
    clear: both;
}

#social-dispatch-calendar .control-button {
    padding: 5px 8px;
    margin: 0px;
}

#social-dispatch-calendar .control-button:hover,
#social-dispatch-calendar .control-button:active,
#social-dispatch-calendar .control-button.active {
    color: #FFF;
    background-color: #333;
}

#social-dispatch-calendar .control-button.active {
    text-decoration: none;
}

#social-dispatch-calendar .control-button:active {
    margin: 0px;
    transform: none;
}

#edit-event-image {
    width: 100%;
    height: auto;
    object-fit: cover;
}

#edit-event-title {
    font-size: 20px;
    font-family: Georgia, serif;
    margin-top: 15px;
}

#lml-modal-edit-event .lml-modal-body .edit-event-details span {
    font-size: 13px;
    font-family: Arial;
    display: inline;
    color: #333;
}

#lml-modal-edit-event .lml-modal-body .edit-event-details {
    margin-top: 2px;
}

#lml-modal-edit-event .lml-modal-body .edit-event-site-details span {
    text-transform: uppercase;
    color: #999;
    font-size: 13px;
}

#lml-modal-edit-event .lml-modal-body .edit-event-site-details {
    margin-top: 8px;
}

#lml-modal-edit-event hr {
    border-top-color: #CCC;
    border-top-style: dashed;
    margin: 10px 0px;
}

#lml-modal-edit-event .lml-modal-body {
    padding-top: 0px;
}

h1 > a.fab {
    float: none;
    position: absolute;
    right: 15px;
    top: 66px;
    cursor: pointer;
}

#facebook-target-search-result {
    height: 200px;
    overflow-y: scroll;
    border: 1px solid #DDD;
}

#facebook-target-search-result > div {
    padding: 8px;
    border-bottom: 1px solid #DDD;
    cursor: pointer;
}

#facebook-target-selections > div, .targeting-blob {
    display: inline-block;
    background: #af57e4;
    color: #FFF;
    padding: 2px 6px;
    border-radius: 3px;
    text-transform: uppercase;
    font-size: 12px;
    margin: 0px 5px 5px 0px;
    cursor: crosshair;
}

.targeting-blob {
    cursor: normal;
}

#facebook-target-search-result i {
    display: inline-block;
    vertical-align: middle;
    padding: 2px 4px 1px;
    border-radius: 3px;
    background: #333;
    color: #FFF;
    font-size: 12px;
    text-transform: uppercase;
    font-style: normal;
}

.sd-footer {
    background-color: #F6F6F6;
    border-top: 1px solid #DDD;
    border-bottom: 1px solid #DDD;
    margin-top: 10px;
}

#networks-link {
    display: inline-block;
    margin: 10px;
    font-size: 18px;
    font-weight: bold;
}

#facebook-target-search-result i.type-country, #facebook-target-selections > div.fbtarget-country, .type-country, { background: #b53c3c; }
#facebook-target-search-result i.type-region, #facebook-target-selections > div.fbtarget-region, .type-region { background: #73b53c; }
#facebook-target-search-result i.type-city, #facebook-target-selections > div.fbtarget-city, .type-city { background: #3cb5a7; }
</style>
`);};

module.exports = { compile };
