const settings = {
    title : "Roles",
    lmldom : { v : 1.0 }
}

const compile = (o, context) => { o(context.header, `

<lml-bunch>
    <lml-emptytemplate>
        <div id="emptytemplate">
            <span>Nothing found</span>
            <p>It would appear there is currently nothing in the database matching the current filters.</p>
        </div>
    </lml-emptytemplate>

    <lml-bunchitem generator="generateCard"></lml-bunchitem>

    <script type="lmljson" name="rolebunch">
        {
            "datasource" : "role.bunch",
            "loopvar" : "role",
            "id" : "role-list"
        }
    </script>
</lml-bunch> 

<script>
var deleteUser = function(id) {
    liliumcms.lmldom.post({_id : id}, '${context._c.server.url}/admin/role/delete', function(data) {
        liliumcms.lmldom.updatedBunches()
    });
};

window.generateCard = function(role, ldContext) {
    var wrap = d.make({ class : "role-card" });

    d.make({ parent : wrap, class : "role-title", text : role.displayname, attr : { contenteditable : true } }).bind('blur', function(ev) {
        liliumcms.lmldom.post({ displayname : ev.target.textContent }, '${context._c.server.url}/admin/role/quickedit/' + role._id, function() {});
    });

    d.make({ parent : wrap, class : "role-slug", text : role.name});

    d.make({ parent : wrap, class : "role-desc", text : role.description || "This role has no description.", attr : { contenteditable : true } }).bind('blur', function(ev) {
        liliumcms.lmldom.post({ description : ev.target.textContent }, '${context._c.server.url}/admin/role/quickedit/' + role._id, function() {});
    });

    var list = d.make({ parent : wrap, class : "role-rights-list" });

    role.rights.forEach(function(right) {
        d.make({ class : "role-right role-right-single", text : right, parent : list, attr : { contenteditable : true } }).bind('blur', function(ev) {
            var rights = Array.prototype.map.call(list.get().querySelectorAll(".role-right-single"), function(el) { return el.textContent }).filter(function(x) { return !!x; });
            liliumcms.lmldom.post({ rights : rights }, '${context._c.server.url}/admin/role/quickedit/' + role._id, function() {});
        });
    });

    d.make({ parent : list, class : "role-right role-right-new", text : "+", attr : { contenteditable : true } }).bind('blur', function(ev) {
        var newright = ev.target.textContent.toString().trim();

        if (newright && newright != "+") {
            var rights = Array.prototype.map.call(list.get().querySelectorAll(".role-right-single"), function(el) { return el.textContent }).filter(function(x) { return !!x; });
            rights.push(newright);
            liliumcms.lmldom.post({ rights : rights }, '${context._c.server.url}/admin/role/quickedit/' + role._id, function() {
                liliumcms.lmldom.updatedBunches();
            });
        }
    });

    return wrap.get();
}
</script>

<style>

main {
    background: #F6F6F6;
}

#role-list {
    display: flex;
    flex-wrap: wrap;
    padding: 8px;
}

.role-card {
    width: 250px;
    margin: 8px;
    background: #FFF;
    border: 1px solid #D9D9D9;
    border-bottom-width: 3px;
    box-shadow: 0px 0px 3px rgba(0,0,0,0.1);
}

.role-title {
    padding: 10px 14px;
    border-bottom: 1px solid #CCC;
    background: #EEE;
    font-size: 18px;
}

.role-slug {
    background: #DDD;
    padding: 5px 15px;
    color: #333;
    font-weight: bold;
    font-size: 12px;
    border-bottom: 1px solid #CCC;
}

.role-desc {
    padding: 10px;
    color: #999;
}

.role-rights-list {
    padding: 10px;
}

.role-right.role-right-new {
    background: #111;
}

.role-right {
    display: inline-block;
    margin: 0px 5px 5px 0px;
    background: #777;
    color: #EEE;
    font-weight: bold;
    padding: 2px 7px 3px;
    border-radius: 4px;
    font-size: 12px;
}

</style>

`);};

module.exports = { settings, compile };
