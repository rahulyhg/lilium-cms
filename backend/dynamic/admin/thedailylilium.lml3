const settings = {
    lmldom : { v : 1.0 },
    livevars : ["thedailylilium", "darksky.forecast"]
};

const css = `<style>

main {
    filter: sepia(.5);
    height: 100%;
    background-color: #482b19;
}

#newspaper {
    background-image: url('/static/media/tx_paper.jpg');
    margin: 100px auto;
    min-height: 500px;
    max-width: 1100px;
    padding: 30px;
}

#the-daily-lilium {
    display: block;
    margin: 0px auto 6px;
    opacity: 0.8;
}

hr {
    display: block;
    height: 3px;
    border: none;
    background-color: transparent;
    opacity: 0.7;

    border-top: 3px solid black;
    padding-bottom: 2px;
    border-bottom: 1px solid black;
}

hr.reverse {
    border-top: 1px solid black;
    border-bottom: 3px solid black;
}

#tdl-big-subtitle {
    display: block;
    text-align: center;
    text-transform: uppercase;
    font-size: 16px;
    font-family: Courier, serif;
    opacity: 0.8;
}

#tdl-bottom-header {
    display: flex;
    margin-top: -2px;
}

#tdl-bottom-header span {
    flex-grow : 1;
    display: block;
    font-size: 13px;
    font-family: Courier, serif;
    font-weight: bold;
    opacity: 0.8;
    color: black;
}


#tdl-bottom-header span:nth-child(1) { text-align: left; }
#tdl-bottom-header span:nth-child(2) { text-align: center; }
#tdl-bottom-header span:nth-child(3) { text-align: right; }

#tdl-content {
    padding-top: 20px;
    display: flex;
    font-family: 'PT Serif',serif;
}

.tdl-col {
    width: 50%;
    padding-right: 20px;
}

.tdl-col:nth-child(2) {
    padding-right: 0;
    padding-left: 20px;
    border-left: 2px solid rgba(0,0,0,0.6);
}

#toppost {
    position: relative;
}

#toppost-image {
    width: 100%;
    filter: grayscale(1) sepia(1);
    opacity: 0.8;
}

#toppost-headline {
    font-size: 30px;
    font-weight: bold;
    opacity: 0.8;
    line-height: 32px;
    text-align: justify;
    padding-top: 12px;
}

#toppost-subline {
    font-size: 18px;
}

#toppost-author {
    padding-top: 15px;
    display: block;
}

#toppost-avatar {
    width: 32px;
    border-radius: 32px;
    vertical-align: middle;
    margin-right: 10px;
}

#stats-users {
    font-size: 48px;
    padding-top: 6px;
    border-top: 1px solid rgba(0,0,0,0.8);
    text-align: center;
    font-family: "Oswald", sans-serif;
}

#tdl-stat-subline {
    font-size: 20px;
    font-family: "Muli", serif;
    font-weight: bold;
    padding: 0px 0px 10px;
    border-bottom: 1px solid rgba(0,0,0,0.8);
    text-align: center;
}

#toppost-badge {
    position: absolute;
    top: -25px;
    left: -23px;
    width: 200px;
}

#toppost-badgetext {
    color: #3d9f9f;
    position: absolute;
    top: 9px;
    z-index: 10;
    font-family: "Oswald", sans-serif;
    left: 48px;
    font-size: 27px;
    text-transform: uppercase;
    width: 50px;
    text-align: center;
    line-height: 26px;
    transform: rotateZ(-21deg);
}

.tdlpost-single {
    display: flex;
    flex-wrap: nowrap;
    position: relative;
}

.tdlpost-single img {
    width: 100px;
    height: 100px;
    margin-right: 13px;
    margin-bottom: 20px;
    filter: grayscale(0.7);
}

.post-single-headline {
    font-size: 18px;
    font-family: "Oswald", sans-serif;
    text-transform: uppercase;
    width: calc(100% - 125px);
    text-align: justify;
}

#tdl-post-list {
    padding-top: 20px;
}

#os-title,
#fc-subtitle,
#fc-title,
#quote-title,
#tdl-s-title,
#deco-title {
    margin-top: 20px;
    border-top: 1px solid rgba(0,0,0,0.8);
    padding-top: 10px;
    font-size: 32px;
    font-family: "Oswald", serif;
    letter-spacing: 5px;
    font-weight: bold;
}

#s-intro,
#deco-intro {
    font-size: 21px;
    text-align: justify;
    padding-bottom: 20px;
}

.deco-avatar {
    width: 120px;
    height: 120px;
    object-fit: cover;
    border-radius: 100px;
    border: 3px solid rgba(0,0,0,0.6);

    margin-right: 15px;
}

.deco-single {
    display: flex;
    position: relative;
    margin-bottom: 20px;
}   

.deco-badge {
    height: 70px;
    width: auto;
    position: absolute;
    left: 70px;
    top: 65px;
}

.deco-entityname {
    font-size: 30px;
    font-family: "Oswald", sans-serif;
    letter-spacing: -1px;
}

.deco-text b {
    display: inline-block;
    color: #DDD;
    background: #453323;
    padding: 4px 10px;
    border-radius: 5px;
}

.deco-reason {
    font-family: "Muli", serif;
    font-size: 20px;
    padding-top: 10px;
}

.deco-icon {
    color: #DDD;
    position: absolute;
    left: 86px;
    top: 87px;
    width: 30px;
    text-align: center;
    font-size: 18px;
}

.tdl-search-term {
    display: inline-block;
    margin-right: 10px;
    margin-bottom: 10px;
    background: #4e3c2b;
    color: #DDD;
    font-family: "Muli", sans-serif;
    padding: 4px 8px;
    border-radius: 4px;
}

#quote-text {
    font-size: 28px;
    opacity: 0.8;
}

#quote-author {
    text-align: right;
    font-size: 26px;
}

#fc-today {
    display: flex;
    padding-top: 10px;
}

.fc-today-icon {
    display: block;
    font-size: 90px;
    opacity: 0.8;
}

#fc-temperature {
    display: inline-block;
    font-size: 50px;
    margin-top: -9px;
    font-family: Arial;
    letter-spacing: -4px;
    font-weight: 600;
    opacity: 0.8;
}

#fc-today-summary {
    font-size: 18px;
    margin-left: 10px;
}

#fc-unit {
    font-size: 40px;
    display: inline-block;
    vertical-align: top;
    position: relative;
    bottom: 6px;
}

.fc-date {
    font-size: 22px;
    font-family: "Oswald", sans-serif;
    margin-bottom: 5px;
}

.fc-single {
    display: flex;
    margin-bottom: 10px;
}

.fc-single-icon {
    font-size: 48px;
    opacity: 0.8;
    width: 80px;
}

.fc-single-summary {
    font-size: 18px;
    margin-bottom: 7px;
}

.fc-single-textar {
    width: calc(100% - 80px);
}

.fc-single-icons {
    display: block;
    font-size: 18px;
}

.fc-icongr {
    display: inline-block;
    margin-right: 15px;
}

.fc-info {
    margin-left: 3px;
    font-size: 18px;
    font-family: Arial;
}

.os-stat {
    display: flex;
    margin-bottom: 12px;
}

.os-icon {
    font-size: 44px;
    opacity: 0.8;
    width: 60px;
}

.os-stat-inside {
    width: calc(100% - 80px);
}

.os-name {
    font-size: 22px;
    font-family: "Oswald", sans-serif;
}

.os-ratio {
    background: rgba(0,0,0,0.6);
    font-size: 22px;
    padding: 5px 8px;
    color: #FFF;
    text-shadow: 0px 0px 2px #000;
    font-family: "Lato", sans-serif;
}

</style>`;

const compile = (o, context) => { o(context.header, css, `
    
<script>

var gen_toppost = function(report) {
    var wrap = d.make({ id : "toppost" });

    if (report.toparticle) {
        d.make({ node : "img", attr : { src : report.toparticle.fullmedia }, parent : wrap, id : "toppost-image" });
        d.make({ text : report.toparticle.headline, id : "toppost-headline", parent : wrap })
        d.make({ text : report.toparticle.subline, id : "toppost-subline", parent : wrap })
        d.make({ node : "img", attr : { src : "/static/badges/4.png" }, parent : wrap, id : "toppost-badge" });
        d.make({ text : "Top post", parent : wrap, id : "toppost-badgetext" });
        
        var aw = d.make({ id : "toppost-author", parent : wrap });
        d.make({ node : "img", attr : { src : report.toparticle.authorphoto }, parent : aw, id : "toppost-avatar" });
        d.make({ node : "b", text : report.toparticle.authorname, parent : aw });
        d.make({ text : " generated " + report.toparticle.pageviews + " page views with the top article.", parent : aw, node : "span" });
    }

    return wrap;
};

var gen_stats = function(report, date) {
    var wrap = d.make({ id : "tdlstats" });

    if (report.stats) {
        var stats = report.stats;
        d.make({ id : "stats-users", text : stats["ga:users"], parent : wrap });
        d.make({ text : "That's the exact number of people who read ${context._c.website.sitetitle}'s amazing content on " + dateFormat(date, 'dddd, mmmm d') + ".", parent : wrap, id : "tdl-stat-subline" });
    }

    return wrap;
};

var gen_postlist = function(report, date) {
    var wrap = d.make({ id : "tdlposts" });

    if (report.articles && report.articles.length != 0) {
        var articles = report.articles;
        var startIndex = Math.round(Math.random() * (report.articles.length - 3));

        var postlist = d.make({ id : "tdl-post-list", parent : wrap });
        for (var i = startIndex; i < startIndex + 3 && i < report.articles.length; i++) {
            var post = d.make({ class : "tdlpost-single", parent : postlist });
            d.make({ node : "img", attr : { src : report.articles[i].fullmedia }, parent : post });
            d.make({ text : report.articles[i].headline, parent : post, class : "post-single-headline" });
        }

        d.make({ id : "postlist-text", text : "On " + dateFormat(date, 'dddd, mmmm d') + ", ${context._c.website.sitetitle} published a total of " + articles.length + " articles including the previous three.", parent : wrap });
    }

    return wrap;
   
};

var gen_badges = function(report, date) {
    var wrap = d.make({ id : "tdldeco" });

    if (report.decorations && report.decorations.length != 0) {
        d.make({ id : "deco-title", text : "New badges", parent : wrap });
        d.make({ parent : wrap, id : "deco-intro", text : report.decorations.length + " Lilium " + 
            (report.decorations.length == 1 ? "badge was" : "badges were") + 
            " awarded to our teammates. Let's congratulate : " });
        var list = d.make({ parent : wrap, id : "deco-list" });
        report.decorations.forEach(function(x) {
            var item = d.make({ parent : list, class : "deco-single" });
            d.make({ parent : item, node : "img", attr : {src : x.fullentity.avatarURL}, class : "deco-avatar" });            
            d.make({ parent : item, node : "img", attr : {src : ("/static/badges/1.png") }, class : "deco-badge" });
            d.make({ parent : item, node : "i", class : "deco-icon far " + x.icon });
            
            var text = d.make({ parent : item, class : "deco-text" });
            d.make({ parent : text, text : x.fullentity.displayname, class : "deco-entityname" });
            d.make({ parent : text, node : "b", text : x.displayname });
            d.make({ parent : text, text : x.reason, class : "deco-reason" });

        });
    }

    return wrap;
};

var gen_quote = function(report, date) {
    var wrap = d.make({ id : "tdlquote" });

    if (report.quote) {
        d.make({ parent : wrap, id : "quote-title", text : "Quote of the day" });
        d.make({ parent : wrap, id : "quote-text", text : "“" + report.quote.quoteText + "”" });
        d.make({ parent : wrap, id : "quote-author", text : "– " + report.quote.quoteAuthor });
    }

    return wrap;
};

var gen_searches = function(report, date) {
    var wrap = d.make({ id : "tdlsearches" });

    if (report.topsearches) {
        var s = report.topsearches;
        d.make({ parent : wrap, id : "tdl-s-title", text : "Top reader searches" });
        d.make({ parent : wrap, id : "s-intro", text : "Readers searched and found what they were looking for using the following queries : " });
        
        var words = d.make({ parent : wrap });
        s.forEach(function(query) {
            d.make({ parent : words, text : query.terms, class : "tdl-search-term" });
        });
    }

    return wrap;
};

var W_ICON_MAP = {
    "clear-day" : "wi-day-sunny", 
    "clear-night" : "wi-night-clear", 
    "rain" : "wi-day-rain", 
    "snow" : "wi-day-snow", 
    "sleet" : "wi-day-hail", 
    "wind" : "wi-day-light-wind", 
    "fog" : "wi-day-fog", 
    "cloudy" : "wi-day-cloudy", 
    "partly-cloudy-day" : "wi-day-cloudy-high", 
    "partly-cloudy-night" : "wi-night-alt-cloudy"
};

var gen_weather = function(forecast) {
    var wrap = d.make({ id : "tdlforecast" });

    if (forecast && forecast.timezone) {
        d.make({ parent : wrap, id : "fc-title", text : "Current weather" });

        var n = forecast.currently;
        var today = d.make({ id : "fc-today", parent : wrap });
        d.make({ parent : today, node : "i", class : "fc-today-icon wi " + W_ICON_MAP[n.icon] });
        
        var todaytext = d.make({ parent : today, id : "fc-today-text" });
        d.make({ parent : todaytext, id : "fc-temperature", text : Math.round(n.temperature), node : "span" });
        d.make({ parent : todaytext, id : "fc-unit", class : "wi wi-celsius", node : "i" });
        d.make({ parent : todaytext, id : "fc-today-summary", text : forecast.daily.summary })

        d.make({ parent : wrap, id : "fc-subtitle", text : "Weather forecast" });
        var list = d.make({ parent : wrap, id : "fc-list" });

        forecast.daily.data.forEach(function(day) {
            var datestr = dateFormat(new Date(day.time * 1000), 'dddd, mmm d');
            d.make({ parent : list, text : datestr, class : "fc-date" });

            var single = d.make({ parent : list, class : "fc-single" });
            d.make({ parent : single, node : "i", class : "fc-single-icon wi " + W_ICON_MAP[day.icon] });
            
            var textar = d.make({ parent : single, class : "fc-single-textar" });
            d.make({ parent : textar, class : "fc-single-summary", text : day.summary });
            
            var iconar = d.make({ parent : textar, class : "fc-single-icons" });
            
            var icongr = d.make({ parent : iconar, class : "fc-icongr" });
            d.make({ parent : icongr, node : "i", class : "far fa-thermometer-full" });
            d.make({ parent : icongr, node : "span", class : "fc-info", text : Math.round(day.temperatureMax) });
            d.make({ parent : icongr, node : "i", class : "wi wi-celsius" });
            
            icongr = d.make({ parent : iconar, class : "fc-icongr" });
            d.make({ parent : icongr, node : "i", class : "far fa-thermometer-quarter" });
            d.make({ parent : icongr, node : "span", class : "fc-info", text : Math.round(day.temperatureMin) });
            d.make({ parent : icongr, node : "i", class : "wi wi-celsius" });
            
            icongr = d.make({ parent : iconar, class : "fc-icongr" });
            d.make({ parent : icongr, node : "i", class : "fal fa-tint" });
            d.make({ parent : icongr, node : "span", class : "fc-info", text : Math.round(day.precipProbability*100) + "%" });
            
            var sunriseat = new Date(day.sunriseTime * 1000);
            icongr = d.make({ parent : iconar, class : "fc-icongr" });
            d.make({ parent : icongr, node : "i", class : "wi wi-sunrise" });
            d.make({ parent : icongr, node : "span", class : "fc-info", text : dateFormat(sunriseat, "HH:MM") });
            
            var sunsetat = new Date(day.sunsetTime * 1000);
            icongr = d.make({ parent : iconar, class : "fc-icongr" });
            d.make({ parent : icongr, node : "i", class : "wi wi-sunset" });
            d.make({ parent : icongr, node : "span", class : "fc-info", text : dateFormat(sunsetat, "HH:MM") });
        });
    } 
    
    return wrap;
};

var OS_ICONS = {
    iOS : "fab fa-apple",
    Android : "fab fa-android",
    Windows : "fab fa-windows",
    Macintosh : "fab fa-apple",
    "Chrome OS" : "fab fa-chrome",
    Linux : "fab fa-linux"
}
var gen_devices = function(report, date) {
    var wrap = d.make({ id : "tdldevices" });

    if (report.os) {
        d.make({ parent : wrap, id : "os-title", text : "Readers' devices" });

        report.os.forEach(function(os) {
            var ratio = os.users / report.stats["ga:users"] * 100;

            if (ratio > 0) {
                var w = d.make({ parent : wrap, class : "os-stat" });
                d.make({ parent : w, class : OS_ICONS[os.os] + " os-icon" });

                var inside = d.make({ parent : w, class : "os-stat-inside" });
                d.make({ parent : inside, text : os.os, class : "os-name" });
                d.make({ 
                    parent : inside, 
                    class : "os-ratio",
                    text : Math.round(ratio) + "%", 
                    attr : { style : "width : " + ratio + "%;" } 
                });
            }
        });
    }

    return wrap;
}

var generateContentNews = function(ldContext) {
    var wrap = d.make({ id : "tdl-content" });
    var cols = [
        d.make({ class : "tdl-col", parent : wrap }),
        d.make({ class : "tdl-col", parent : wrap })
    ];
    
    var report = ldContext.livevars.thedailylilium;
    var forecast = ldContext.livevars.darksky && ldContext.livevars.darksky.forecast;
    var now = new Date();
    var yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);

    cols[0].born(gen_toppost(report, yesterday));
    cols[0].born(gen_badges(report, yesterday));
    cols[0].born(gen_quote(report, yesterday));
    cols[0].born(gen_devices(report, yesterday));

    cols[1].born(gen_stats(report, yesterday));
    cols[1].born(gen_postlist(report, yesterday));
    cols[1].born(gen_searches(report, yesterday));
    cols[1].born(gen_weather(forecast));
    
    return wrap;
};

liliumcms.lmldom.bind(function() {
    var now = new Date();
    document.getElementById('tdl-date').textContent = dateFormat(now, 'dddd, mmmm d, yyyy');
});

</script>

<div id="newspaper">
    <img src="/static/media/thedailylilium.png" id="the-daily-lilium" />
    <span id="tdl-big-subtitle">
        ILLUSTRATED DAILY LILIUM NEWS | NOW IN COLOUR
    </span>
    <hr />
    <div id="tdl-bottom-header" />
        <span>Est. 2018</span>
        <span id="tdl-date"></span>
        <span>Number 1</span>
    </div>
    <hr class="reverse" />

    <lml-generate call="generateContentNews"></lml-generate>
</div>

`); };

module.exports = { settings, compile };
