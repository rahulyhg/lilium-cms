const settings = {
    lmldom : { v : "1.0" },
    title : "Cakepops",
    livevars : [],
    tools : {
        "add" : { call : "newCakepopDialog" }
    }
};

const style = `<style>
#lmlbunch-items-wrapper {
    padding : 5px;
}

.cakepop-strip-wrapper {
    margin: 5px;
    background: #F9F9F9;
    display: block;
    padding: 10px;
    border: 2px solid #EEE;
}

.cakepop-strip-wrapper:hover {
    background: #FDFDFD;
}

.cakepop-strip-wrapper a:hover {
    text-decoration: none;
}

.cakepop-strip h4 {
    font-size: 16px;
    color: #333;
    font-weight: normal;
    margin-bottom: 10px;
}

.cakepop-strip a {
    font-size: 12px;
    color: #333;
    text-decoration: none;
}

</style>`;

const preload = (context, done) => {
    context.bunchScript = `
    <lml-bunch>
        <lml-bunchfilters>
            <div class="bunch-filters">
                <div class="bunch-filters-title">FILTERS</div>
                <label>Search</label>
                <input type="text" name="search" placeholder="Title keywords" />

                <label>Status</label>
                <select name="status">
                    <option value="">All</option>
                    <option value="live">Live</option>
                    <option value="expired">Expired</option>
                </select>
            </div>
        </lml-bunchfilters>

        <lml-bunchitem>
            <div class="cakepop-strip-wrapper">
                <div class="cakepop-strip">
                    <lml-link href="${context._c.server.url}/admin/cakepop/edit/{ckp._id}">
                        <h4>
                            <lml-generate call="ckp_status_icon"></lml-generate>
                            <lml-text var="ckp.title" tag="h4" ></lml-text>
                        </h4>
                        <div>
                            Running until <b><lml-text var="ckp.expiry" date="dd/mm/yyyy HH:MM"></lml-text></b>
                        </div>
                        <div>
                            Read reports : <b><lml-text var="ckp.read"></lml-text></b>
                        </div>
                    </lml-link>
                </div>
            </div>
        </lml-bunchitem>

        <script type="lmljson" name="eakepopbunch">
            {
                "datasource" : "cakepop.bunch",
                "loopvar" : "ckp"
            }
        </script>
    </lml-bunch>

    <div id="create-cakepop-modal" class="lml-modal">
        <div class="lml-modal-title">
            Create a new cakepop
        </div>
        <div class="lml-modal-body">
            <span>Give it a name</span>
            <input id="new-topic-displayname" placeholder="This is simply for reference, it will only appear in the list" name="displayname" />
        </div>
        <div class="lml-modal-footer">
            <button class="lml-modal-cancel" type="button">Cancel</button>
            <button class="lml-modal-accept" type="button">Create Cakepop</button>
        </div>
    </div>

    <script>
        window.ckp_now = new Date().getTime();
        window.ckp_status_icon = function(ldContext) {
            var elem = document.createElement('i');
            if (ldContext.ckp.status == "creation") {
                elem.className = "fal fa-pencil-square";
            } else if (ldContext.ckp.expiry > window.ckp_now) {
                elem.className = "fal fa-circle-notch fa-spin fa-fw"
            } else if (ldContext.ckp.status == "live") {
                elem.className = "fal fa-calendar-check";
            }

            return elem;
        };

        window.newCakepopDialog = function() {
            liliumcms.modals.get("create-cakepop-modal").cast();
        };

        window["create-cakepop-modal_accept"] = function(dlg) {
            var displayname = dlg.getFormData().displayname;

            if (displayname) {
                liliumcms.lmldom.post({
                    displayname : displayname
                }, "${context._c.server.url}/admin/cakepop/new", function(resp) {
                    dlg.dismiss();

                    if (resp.success && resp.redirect) {
                        liliumcms.pageloader.load(resp.redirect);
                    }
                });
            }
        };
    </script>`;

    done();
}

const compile = (o, context) => {
    o(context.header, style, context.bunchScript);
};

module.exports = { settings, preload, compile };
