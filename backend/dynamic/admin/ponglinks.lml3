const settings = {
    title : "Ponglinks",
    tools : {
        "add" : { call : "popupCreate" }
    },
    lmldom : { v : 1.0 }
};

const css = `<style>

.ponglink-card h3 {
    display: inline-block;
    vertical-align: middle;
    margin-right: 6px;
}

.ponglink-card h3 a {
    color : #333;
}

#emptytemplate {
    width: 500px;
    padding: 20px;
    margin: 40px auto;
    display: block;
    
    border: 1px solid #DDD;
    border-bottom-width: 3px;
    text-align: center;

    background : #FFF;
}

#emptytemplate span {
    display: block;
    font-size: 22px;
    margin-bottom: 10px;
}

#emptytemplate b {
    cursor: pointer;
    color : #af57e4;
}

#ponglinks-list {
    background: #EEE;
    padding-top: 20px;
    min-height: 250px;
    border-bottom: 1px solid #DDD;
}

.ponglink-card {
    margin: 0px 20px 20px;
    padding: 10px;
    border : 1px solid #DDD;
    border-bottom-width: 3px;
    background-color: #FFF;

    position: relative;
    border-radius: 5px;
}

.link-clicks {
    position: absolute;
    right: 10px;
    top: 5px;
    font-size: 20px;
}

.link-clicks i {
    font-size: 14px;
    vertical-align: middle;
}

.link-clicks span {
    vertical-align: middle;
    font-weight: 100;
}

.link-status {
    display: inline-block;
    vertical-align: middle;
}

.link-status span::before {
    display: inline-block;
    margin: 4px 0px;
    padding: 1px 4px;
    background-color: #333;
    color: #FFF;
    border-radius : 3px;
    text-transform: uppercase;
    font-size: 11px;
    font-weight: bold;
}

.link-status span.active::before {
    content : 'Active';
    background-color: #5767e4;
}

.link-status span.paused::before {
    content : 'Paused';
    background-color: #e49357;
}

.link-status span.archived::before {
    content : 'Archived';
}

.ponglink-creator {
    color: #888
}

.ponglink-linklist {
    padding: 10px 0px;
    border-top: 1px solid #EEE;
    margin: 10px 0px;
    border-bottom: 1px solid #EEE;
}

.ponglink-linklist i {
    font-size: 26px;
    margin: 5px 0px;
}

.link-action {
    display: inline-block;
    vertical-align: baseline;
    margin-right: 10px;
    font-size: 16px;
    cursor: pointer;
}

.ponglink-links {
    margin : 5px;
    border: 1px solid #DDD;
    border-radius : 5px;
}

.ponglink-linkrow {
    display: flex;
    flex-flow: wrap;

    border-bottom: 1px solid #DDD;
}

.ponglink-linkcell {
    padding: 6px;
    font-size: 12px;
}

.ponglink-linkcell:nth-child(odd) {
    flex: 0 0 120px;
    border-right: 1px solid #DDD;
}

.ponglink-linkcell:nth-child(even) {
    flex : 1;
    word-wrap: break-word;
    line-break: loose;
    break-inside: auto;
    word-break: break-all;
    cursor: copy;
}

.ponglink-linkrow:last-child {
    background: #fff6fc;
}

.ponglink-linkrow:last-child .ponglink-linkcell {
    cursor: default;
}

</style>`;

const modal = `<div id="create-ponglink-modal" class="lml-modal">

    <div class="lml-modal-title">Create new ponglink</div>

    <div class="lml-modal-body">
        <span>Unique identifier</span>
        <input id="modal-identifier" placeholder="Campaign ID, client name, website name..." />

        <span>Destination URL</span>
        <input id="modal-destination" placeholder="www.lilium-is-cool.com" />

        <hr />
        <span>Source</span>
        <input id="modal-source" placeholder="Also known as utm_source" />

        <span>Medium</span>
        <input id="modal-medium" placeholder="Also known as utm_medium" />

        <span>Campaign</span>
        <input id="modal-campaign" placeholder="Also known as utm_campaign" />

        <hr />
        <span>Variations</span>
        <p>
            It is possible to define multiple versions of the same link and compare clicks between them. 
            Simply fill the following field with a comma separated list of version names.
        </p>
        <input id="modal-versions" placeholder="Top, Middle, Bottom, Signature" />
    </div>

    <div class="lml-modal-footer">
        <button class="lml-modal-cancel" type="button">Cancel</button> 
        <button class="lml-modal-accept" type="button">Create</button>
    </div>
</div>`;

const compile = (o, context, v) => { o(context.header, css, modal, `
  
    <lml-bunch>
        <lml-bunchfilters>
            <div class="bunch-filters">
                <div class="bunch-filters-title">FILTERS</div>
                <label>Search</label>
                <input type="text" name="search" placeholder="Title keywords" />

                <label>Status</label>
                <select name="status">
                    <option value="active">Active</option>
                    <option value="">All</option>
                    <option value="paused">Paused</option>
                    <option value="archived">Archived</option>
                </select>
            </div>
        </lml-bunchfilters>

        <lml-emptytemplate>
            <div id="emptytemplate">
                <span>Nothing found</span>
                <p>It would appear there is currently nothing in the database matching the current filters. Would you like to <b onclick="popupCreate();">create a new ponglink</b>?</p>
            </div>
        </lml-emptytemplate>

        <lml-bunchitem>
            <div class="ponglink-card">
                <div class="link-clicks">
                    <lml-text var="link.clicks" wrapper="span"></lml-text>
                    <i class="far fa-share-all"></i>
                </div>
                <h3>
                    <lml-link href="${context._c.server.url}/admin/ponglinks/view/{link._id}">
                        <lml-text var="link.identifier"></lml-text>
                    </lml-link>
                </h3>
                <div class="link-status">
                    <lml-class classes="link.status" tag="span"></lml-class>
                </div>
                <div class="ponglink-creator">Created by <lml-generate call="displayOwner"></lml-generate></div>
                <div class="ponglink-linklist"> 
                    <lml-generate call="listLinksVersions" ></lml-generate>
                </div>
                <div class="ponglink-actions">
                    <lml-generate call="createLinkActions"></lml-generate>
                </div>
            </div>
        </lml-bunchitem>

        <script type="lmljson" name="ponglinkbunch">
            {
                "datasource" : "ponglinks.bunch",
                "loopvar" : "link",
                "id" : "ponglinks-list"
            }
        </script>
    </lml-bunch>

    <script>
        var LINK_STATUSES = [
            {id : "active", action : "activate"},
            {id : "paused", action : "pause"},
            {id : "archived", action : "archive"}
        ];
        var createLinkActions = function(ldContext) {
            if (ldContext.link.status == "archived") {
                return document.createElement('div');
            }

            var actionwrap = d.make({});
            var currentstatus = ldContext.link.status;
            var _id = ldContext.link._id;

            LINK_STATUSES.forEach(function(status) {
                if (currentstatus != status.id) {
                    var btn = d.make({ node : "u", class : "link-action", text : status.action, parent : actionwrap });
                    btn.bind('click', function() {
                        updateStatus(_id, status.id);
                    });
                }
            });

            return actionwrap.get();
        }   

        var listLinksVersions = function(ldContext) {
            var link = ldContext.link;
            var href = "${context._c.server.protocol}${context._c.server.url}/pong/" + link.hash + "?version=";

            var wrap = d.make({ class : "ponglink-links" })
            for (var i = 0; i < link.versions.length; i++) {
                var row = d.make({ class : "ponglink-linkrow", parent : wrap });
                d.make({ text : link.versions[i], parent : row, class : "ponglink-linkcell" });

                var ccell = d.make({ text : href + link.versions[i], parent : row, class : "ponglink-linkcell" });
                ccell.bind('click', function(ev) {
                    var t = ev.target;
                    var text = t.textContent.trim();
                    
                    t.textContent = "";
                    var tb = document.createElement('input');
                    tb.value = text;
                    document.body.appendChild(tb);

                    if (tb && tb.select) {
                        tb.select();
                    }

                    try {
                        document.execCommand('copy');
                        liliumcms.notify({ type : "info", title : "Clipboard", message : "A ponglink was copied onto the clipboard." })
                    } catch (err) {
                        alert('please press Ctrl/Cmd+C to copy');
                    }

                    t.textContent = text;
                    tb.remove();
                });
            }

            var row = d.make({ class : "ponglink-linkrow", parent : wrap });
            d.make({ text : "Destination", parent : row, class : "ponglink-linkcell bold" });

            var linkwrap = d.make({ parent : row, class : "ponglink-linkcell" });
            d.make({ node : "a", attr : { href : link.destination, target : "_blank" }, text : link.destination, parent : linkwrap });

            return wrap.get();
        }

        var updateStatus = function(_id, status) {
            liliumcms.lmldom.post({ status : status }, "${context._c.server.url}/admin/ponglinks/edit/" + _id, function() {
                liliumcms.lmldom.getBunches()["ponglinks-list"].render();
            });
        }
    
        var displayOwner = function(ldContext) {
            var creator = liliumcms.conversations.getCachedUsers()[ldContext.link.creatorid];
            return document.createTextNode(creator ? creator.displayname : "an inactive user");
        }

        var popupCreate = function() {
            liliumcms.modals.get('create-ponglink-modal').show();
            return void 0;
        }

        document.querySelector('#create-ponglink-modal .lml-modal-accept').addEventListener('click', function() {
            var payload = {};
            payload.identifier = d.id('modal-identifier').value;
            payload.destination = d.id('modal-destination').value;
            payload.source = d.id('modal-source').value;
            payload.campaign = d.id('modal-campaign').value;
            payload.medium = d.id('modal-medium').value;
            payload.versions = d.id('modal-versions').value;

            if (!payload.versions.trim()) {
                payload.versions = "Main";
            }

            if (payload.identifier && payload.destination) {
                liliumcms.lmldom.post(payload, '${context._c.server.url}/admin/ponglinks/create', function(r) {
                    liliumcms.lmldom.getBunches()["ponglinks-list"].render();
                    liliumcms.modals.get('create-ponglink-modal').dismiss();
                });
            } else {
                liliumcms.notify({ type : "warning", title : "Missing information", message : "You need to provide an identifier as well as a destination URL." })
            } 
        });
    </script>

`)};

module.exports = { settings, compile };
