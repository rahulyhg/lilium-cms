const settings = {
    title : "Ponglinks",
    tools : {
        "add" : { call : "popupCreate" }
    },
    lmldom : { v : 1.0 }
};

const css = `<style>

.ponglink-card h3 {
    display: inline-block;
    vertical-align: middle;
    margin-right: 6px;
    color: #333;
}

#emptytemplate {
    width: 500px;
    padding: 20px;
    margin: 40px auto;
    display: block;
    
    border: 1px solid #DDD;
    border-bottom-width: 3px;
    text-align: center;
}

#emptytemplate span {
    display: block;
    font-size: 22px;
    margin-bottom: 10px;
}

#emptytemplate b {
    cursor: pointer;
    color : #af57e4;
}

.ponglink-card {
    margin: 5px;
    padding: 10px;
    border : 1px solid #DDD;
    border-bottom-width: 3px;
}

.link-status {
    display: inline-block;
    vertical-align: middle;
}

.link-status span::before {
    display: inline-block;
    margin: 4px 0px;
    padding: 1px 4px;
    background-color: #333;
    color: #FFF;
    border-radius : 3px;
    text-transform: uppercase;
    font-size: 11px;
    font-weight: bold;
}

.link-status span.active::before {
    content : 'Active';
    background-color: #5767e4;
}

.link-status span.paused::before {
    content : 'Paused';
    background-color: #e49357;
}

.link-status span.archived::before {
    content : 'Archived';
}

.ponglink-creator {
    color: #888
}

.ponglink-linklist {
    text-align: center;
    padding: 10px 0px;
    border-top: 1px solid #EEE;
    margin: 10px 0px;
    border-bottom: 1px solid #EEE;
}

.ponglink-linklist i {
    font-size: 26px;
    margin: 5px 0px;
}

.link-action {
    display: inline-block;
    vertical-align: baseline;
    margin-right: 10px;
    font-size: 16px;
    cursor: pointer;
}

</style>`;

const modal = `<div id="create-ponglink-modal" class="lml-modal">

    <div class="lml-modal-title">Create new ponglink</div>

    <div class="lml-modal-body">
        <span>Unique identifier</span>
        <input id="modal-identifier" placeholder="Campaign ID, client name, website name..." />

        <span>Destination URL</span>
        <input id="modal-destination" placeholder="www.lilium-is-cool.com" />
    </div>

    <div class="lml-modal-footer">
        <button class="lml-modal-cancel" type="button">Cancel</button> 
        <button class="lml-modal-accept" type="button">Create</button>
    </div>
</div>`;

const compile = (o, context, v) => { o(context.header, css, modal, `
  
    <lml-bunch>
        <lml-bunchfilters>
            <div class="bunch-filters">
                <div class="bunch-filters-title">FILTERS</div>
                <label>Search</label>
                <input type="text" name="search" placeholder="Title keywords" />

                <label>Status</label>
                <select name="status">
                    <option value="active">Active</option>
                    <option value="">All</option>
                    <option value="paused">Paused</option>
                    <option value="archived">Archived</option>
                </select>
            </div>
        </lml-bunchfilters>

        <lml-emptytemplate>
            <div id="emptytemplate">
                <span>Nothing found</span>
                <p>It would appear there is currently nothing in the database matching the current filters. Would you like to <b onclick="popupCreate();">create a new ponglink</b>?</p>
            </div>
        </lml-emptytemplate>

        <lml-bunchitem>
            <div class="ponglink-card">
                <h3><lml-text var="link.identifier"></lml-text></h3>
                <div class="link-status">
                    <lml-class classes="link.status" tag="span"></lml-class>
                </div>
                <div class="ponglink-creator">Created by <lml-generate call="displayOwner"></lml-generate></div>
                <div class="ponglink-linklist"> 
                    <div>${context._c.server.protocol}${context._c.server.url}/pong/<lml-text var="link.hash"></lml-text></div>
                    <div><i class="far fa-long-arrow-alt-down"></i></div>
                    <div><lml-link href="{link.destination}"><lml-text var="link.destination"></lml-text></lml-link></div>
                </div>
                <div class="ponglink-actions">
                    <lml-generate call="createLinkActions"></lml-generate>
                </div>
            </div>
        </lml-bunchitem>

        <script type="lmljson" name="ponglinkbunch">
            {
                "datasource" : "ponglinks.bunch",
                "loopvar" : "link",
                "id" : "ponglinks-list"
            }
        </script>
    </lml-bunch>

    <script>
        var LINK_STATUSES = [
            {id : "active", action : "activate"},
            {id : "paused", action : "pause"},
            {id : "archived", action : "archive"}
        ];
        var createLinkActions = function(ldContext) {
            if (ldContext.link.status == "archived") {
                return document.createElement('div');
            }

            var actionwrap = d.make({});
            var currentstatus = ldContext.link.status;
            var _id = ldContext.link._id;

            LINK_STATUSES.forEach(function(status) {
                if (currentstatus != status.id) {
                    var btn = d.make({ node : "u", class : "link-action", text : status.action, parent : actionwrap });
                    btn.bind('click', function() {
                        updateStatus(_id, status.id);
                    });
                }
            });

            return actionwrap.get();
        }   

        var updateStatus = function(_id, status) {
            liliumcms.lmldom.post({ status : status }, "${context._c.server.url}/admin/ponglinks/edit/" + _id, function() {
                liliumcms.lmldom.getBunches()["ponglinks-list"].render();
            });
        }
    
        var displayOwner = function(ldContext) {
            var creator = liliumcms.conversations.getCachedUsers()[ldContext.link.creatorid];
            return document.createTextNode(creator ? creator.displayname : "an inactive user");
        }

        var popupCreate = function() {
            liliumcms.modals.get('create-ponglink-modal').show();
            return void 0;
        }

        document.querySelector('#create-ponglink-modal .lml-modal-accept').addEventListener('click', function() {
            var payload = {};
            payload.identifier = d.id('modal-identifier').value;
            payload.destination = d.id('modal-destination').value;

            if (payload.identifier && payload.destination) {
                liliumcms.lmldom.post(payload, '${context._c.server.url}/admin/ponglinks/create', function(r) {
                    liliumcms.lmldom.getBunches()["ponglinks-list"].render();
                    liliumcms.modals.get('create-ponglink-modal').dismiss();
                });
            } else {
                liliumcms.notify({ type : "warning", title : "Missing information", message : "You need to provide an identifier as well as a destination URL." })
            } 
        });
    </script>

`)};

module.exports = { settings, compile };
