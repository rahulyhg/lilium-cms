const settings = {
    title : "Ponglinks",
    tools : {
        "add" : { call : "popupCreate" }
    },
    lmldom : { v : 1.0 }
};

const css = `<style>

.ponglink-card h3 {
    display: inline-block;
    vertical-align: middle;
    margin-right: 6px;
}

.ponglink-card h3 a {
    color : #333;
}

#emptytemplate {
    width: 500px;
    padding: 20px;
    margin: 40px auto;
    display: block;
    
    border: 1px solid #DDD;
    border-bottom-width: 3px;
    text-align: center;

    background : #FFF;
}

#emptytemplate span {
    display: block;
    font-size: 22px;
    margin-bottom: 10px;
}

#emptytemplate b {
    cursor: pointer;
    color : #af57e4;
}

#ponglinks-list {
    background: #EEE;
    padding-top: 20px;
    min-height: 250px;
    border-bottom: 1px solid #DDD;
}

.ponglink-card {
    margin: 0px 20px 20px;
    padding: 10px;
    border : 1px solid #DDD;
    border-bottom-width: 3px;
    background-color: #FFF;

    position: relative;
    border-radius: 5px;
}

.link-clicks {
    position: absolute;
    right: 10px;
    top: 5px;
    font-size: 20px;
}

.link-clicks i {
    font-size: 14px;
    vertical-align: middle;
}

.link-clicks span {
    vertical-align: middle;
    font-weight: 100;
}

.link-status {
    display: inline-block;
    vertical-align: middle;
}

.link-status span::before {
    display: inline-block;
    margin: 4px 0px;
    padding: 4px 10px;
    background-color: #333;
    color: #FFF;
    border-radius : 3px;
    text-transform: uppercase;
    font-size: 10px;
    font-weight: bold;
}

.link-status span.active::before {
    content : 'Active';
    background-color: #5767e4;
}

.link-status span.paused::before {
    content : 'Paused';
    background-color: #e49357;
}

.link-status span.archived::before {
    content : 'Archived';
}

.ponglink-creator {
    color: #888
}

.ponglink-linklist {
    padding: 10px 0px;
    border-top: 1px solid #EEE;
    margin: 10px 0px;
    border-bottom: 1px solid #EEE;
}

.ponglink-linklist i {
    font-size: 26px;
    margin: 5px 0px;
}

.link-action {
    display: inline-block;
    vertical-align: baseline;
    margin-right: 10px;
    font-size: 16px;
    cursor: pointer;
}

.ponglink-links {
    margin : 5px;
    border: 1px solid #DDD;
    border-radius : 5px;
}

.ponglink-linkrow {
    display: flex;
    flex-flow: wrap;

    border-bottom: 1px solid #DDD;
}

.ponglink-linkcell {
    padding: 6px;
    font-size: 12px;
}

.ponglink-linkcell:nth-child(odd) {
    flex: 0 0 120px;
    border-right: 1px solid #DDD;
}

.ponglink-linkcell:nth-child(even) {
    flex : 1;
    word-wrap: break-word;
    line-break: loose;
    break-inside: auto;
    word-break: break-all;
    cursor: copy;
}

.publish-overlay {
    position:fixed;
    top:0; 
    bottom:0;

    z-index: 100000;
    transition: all 0.5s;
}

#lilium .publish-overlay.shown {
    transform: translate3d(0,0,0);
}

#pl-create-overlay-left {
    width: 100%;
    left : 0;
    transform: translate3d(-100%, 0, 0);
    color: rgb(244, 191, 255);

    background-color: #332336;
    background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%232c1d2f' fill-opacity='0.4' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E");
}

#pl-create-overlay-right {
    width: 60%;
    right : 0;
    background-color: rgb(244, 191, 255);
    color: #2c1d2f;
    transform: translate3d(100%, 0, 0);
    z-index: 100001;
    padding: 0px 30px 20px;
    font-family: "Lato", sans-serif;

    overflow-y : auto;
}

#publish-input-section label {
    display: block;
    font-weight: bold;
    font-size: 20px;
    margin-bottom: 2px;
    color: #754b7d;
    font-family: "Lato", sans-serif;
}

#publish-input-section input {
    display: block;
    width: 100%;
    box-sizing: border-box;
    background: transparent;
    font-size: 14px;
    margin-bottom: 25px;
    border-bottom: 1px solid #ac7ab7;
    margin-top: 4px;
    color: #614367;
    font-family: "Lato", sans-serif;
    padding: 0px 0px 2px;
}

#publish-input-section input::placeholder {
    color: #ac7ab7;
}

#publish-input-section h3 {
    font-size: 32px;
    margin: 30px 0px 10px;
    display: block;
    font-weight: bold;
}

.site-name {
    font-family: "Oswald", sans-serif;
    font-size: 72px;
    text-transform: uppercase;
    font-weight: normal;
    display: block;

    margin-bottom: -20px;
    margin-left: -3px;
}

.publish-title {
    font-family: "Muli", sans-serif;
    font-size: 20px;
    text-transform: uppercase;
    display: block;
    letter-spacing: -1px;
}

#publish-title-section {
    height: 100px;
    position: relative;
    top: 40%;
    left: 100px;
    width: calc(100% - 200px);
}

#writeactions {
    text-align: right;
    margin-top: 10px;
}

#writeactions b {
    margin-left: 20px;
    color: #2c1d2f;
    cursor: pointer;
}

#pl-create-details {
    padding: 2px 15px;
    background: #302033;
    color: #f4bfff;
    border-radius: 6px;
    font-size: 14px;
}

#pop-up-version-help {
    font-size: 12px;
    position: relative;
    display: inline-block;
    vertical-align: top;
    width: 18px;
    height: 18px;
    text-align: center;
    padding-top: 3px;
    border-radius: 12px;
    cursor: pointer;
    background: #332336;
    color: #f4bfff;
}

#pl-create-version {
    padding: 10px;
    background: #332336;
    color: #f4bfff;
    font-size: 21px;
    text-transform: uppercase;
    border-radius: 3px;
    display: inline-block;
    cursor: pointer;
}

.pl-version-item {
    padding: 20px 20px 2px;
    border-left: 3px solid #b77dc1;
    margin-bottom: 20px;
}

.pl-remove-version {
    display: inline-block;
    padding: 7px 11px;
    background: #332336;
    color: #f4bfff;
    border-radius: 5px;
    font-size: 13px;
    font-weight: bold;
    cursor: pointer;
}

.pl-action-wrapper {
    text-align: right;
}

</style>`;

const sliders = context => `

    <div id="pl-create-overlay-left" class="publish-overlay">
        <div id="publish-title-section">
            <b class="site-name">${context._c.website.sitetitle}</b>
            <b class="publish-title">Create a new Ponglink</b>
        </div>
    </div>

    <div id="pl-create-overlay-right" class="publish-overlay">
        <div id="publish-input-section">
            <h3>Ponglink campaign information</h3>
            <label>Ponglink identifier</label>
            <input placeholder="The readers will not see this anywhere" id="pl-identifier" />

            <label>Default destination URL</label>
            <input placeholder="The URL used as a destination for versions which don't have one" id="pl-default-url" />

            <label>Public campaign name</label>
            <input placeholder="Will appear in the URL as the utm_campaign parameter" id="pl-default-campaign" />

            <label>Public Source name</label>
            <input placeholder="Will appear in the URL as the utm_source parameter" id="pl-default-source" />

            <h3>Ponglink versions <i class="fas fa-question" id="pop-up-version-help" onclick="popupVersionHelp();"></i></h3>
            <div id="pl-version-list">

            </div>
            <div id="pl-create-version" onclick="addPonglinkVersion();">
                Add Ponglink version
            </div>
            
            <div id="writeactions">
                <b onclick="dismissCreate();">Dismiss</b>
                <b onclick="createNewPonglink();">Create Ponglink</b>
            </div>
        </div>
    </div>


`;

const compile = (o, context, v) => { o(context.header, css, sliders(context), `
  
    <lml-bunch>
        <lml-bunchfilters>
            <div class="bunch-filters">
                <div class="bunch-filters-title">FILTERS</div>
                <label>Search</label>
                <input type="text" name="search" placeholder="Title keywords" />

                <label>Status</label>
                <select name="status">
                    <option value="active">Active</option>
                    <option value="">All</option>
                    <option value="paused">Paused</option>
                    <option value="archived">Archived</option>
                </select>
            </div>
        </lml-bunchfilters>

        <lml-emptytemplate>
            <div id="emptytemplate">
                <span>Nothing found</span>
                <p>It would appear there is currently nothing in the database matching the current filters. Would you like to <b onclick="popupCreate();">create a new ponglink</b>?</p>
            </div>
        </lml-emptytemplate>

        <lml-bunchitem>
            <div class="ponglink-card">
                <div class="link-clicks">
                    <lml-text var="link.clicks" wrapper="span"></lml-text>
                    <i class="far fa-share-all"></i>
                </div>
                <h3>
                    <lml-link href="${context._c.server.url}/admin/ponglinks/view/{link._id}">
                        <lml-text var="link.identifier"></lml-text>
                    </lml-link>
                </h3>
                <div class="link-status">
                    <lml-class classes="link.status" tag="span"></lml-class>
                </div>
                <div class="ponglink-creator">Created by <lml-generate call="displayOwner"></lml-generate></div>
                <div class="ponglink-linklist"> 
                    <lml-generate call="listLinksVersions" ></lml-generate>
                </div>
                <div class="ponglink-actions">
                    <lml-generate call="createLinkActions"></lml-generate>
                </div>
            </div>
        </lml-bunchitem>

        <script type="lmljson" name="ponglinkbunch">
            {
                "datasource" : "ponglinks.bunch",
                "loopvar" : "link",
                "id" : "ponglinks-list"
            }
        </script>
    </lml-bunch>

    <script>
        var LINK_STATUSES = [
            {id : "active", action : "activate"},
            {id : "paused", action : "pause"},
            {id : "archived", action : "archive"}
        ];
        var createLinkActions = function(ldContext) {
            if (ldContext.link.status == "archived") {
                return document.createElement('div');
            }

            var actionwrap = d.make({});
            var currentstatus = ldContext.link.status;
            var _id = ldContext.link._id;

            LINK_STATUSES.forEach(function(status) {
                if (currentstatus != status.id) {
                    var btn = d.make({ node : "u", class : "link-action", text : status.action, parent : actionwrap });
                    btn.bind('click', function() {
                        updateStatus(_id, status.id);
                    });
                }
            });

            return actionwrap.get();
        }   

        var popupVersionHelp = function() {
            liliumcms.modals.alert('Ponglink versions', "You can specify multiple destinations for a single campaign. Each version of a Ponglink must have a destination, an identifier, and a medium. For convenience, it is possible to use the default values provided instead of copy-pasting the same link for each version. <br><br>At least one version must be provided in order to create a Ponglink campaign.<br><br>Click the 'Add Ponglink Version' button to add a new version.");
        };

        var addPonglinkVersion = function() {
            var wrap = d.make({
                class : "pl-version-item"
            });

            d.make({ node : "label", text : "Medium / Identifier", parent : wrap })
            d.make({ node : "input", attr : { placeholder : "Will be used as the utm_medium URL parameter" }, class : "pl-version-identifier", parent : wrap });

            d.make({ node : "label", text : "Destination URL", parent : wrap })
            d.make({ node : "input", attr : { placeholder : "Leave empty to use the default destination" }, class : "pl-version-destination", parent : wrap });

            var actionwrap = d.make({ parent : wrap, class : "pl-action-wrapper" });
            d.make({ text : "Remove version", class : "pl-remove-version", parent : actionwrap }).bind('click', function() {
                wrap.get().remove();
            });

            d.id('pl-version-list').born(wrap);
        };

        var popupCreate = function() {
            d.id('pl-create-overlay-left').cadd('shown');
            d.id('pl-create-overlay-right').cadd('shown');

            return false;
        };

        var dismissCreate = function() {
            d.id('pl-create-overlay-left').crm('shown');
            d.id('pl-create-overlay-right').crm('shown');
        };

        var listLinksVersions = function(ldContext) {
            var link = ldContext.link;
            var href = "${context._c.server.protocol}${context._c.server.url}/pong/" + link.hash + "/";

            var wrap = d.make({ class : "ponglink-links" })
            for (var i = 0; i < link.versions.length; i++) {
                var row = d.make({ class : "ponglink-linkrow", parent : wrap });
                d.make({ text : link.versions[i].medium || "Default", parent : row, class : "ponglink-linkcell" });

                var ccell = d.make({ text : href + (link.versions[i].name || link.versions[i].hash), parent : row, class : "ponglink-linkcell" });
                ccell.bind('click', function(ev) {
                    var t = ev.target;
                    var text = t.textContent.trim();
                    
                    t.textContent = "";
                    var tb = document.createElement('input');
                    tb.value = text;
                    document.body.appendChild(tb);

                    if (tb && tb.select) {
                        tb.select();
                    }

                    try {
                        document.execCommand('copy');
                        liliumcms.notify({ type : "info", title : "Clipboard", message : "A ponglink was copied onto the clipboard." })
                    } catch (err) {
                        alert('please press Ctrl/Cmd+C to copy');
                    }

                    t.textContent = text;
                    tb.remove();
                });
            }

            return wrap.get();
        }

        var updateStatus = function(_id, status) {
            liliumcms.lmldom.post({ status : status }, "${context._c.server.url}/admin/ponglinks/edit/" + _id, function() {
                liliumcms.lmldom.getBunches()["ponglinks-list"].render();
            });
        }
    
        var displayOwner = function(ldContext) {
            var creator = liliumcms.session.getCachedUsers()[ldContext.link.creatorid];
            return document.createTextNode(creator ? creator.displayname : "an inactive user");
        }

        var createPayload = function() {
            var v = function(id) { return document.getElementById(id).value; }

            return {
                identifier : v("pl-identifier"),
                defaults : {
                    destination : v("pl-default-url"),
                    source : v("pl-default-source"),
                    campaign : v("pl-default-campaign")
                },
                versions : Array.prototype.map.call(document.querySelectorAll('.pl-version-item'), function(item) {
                    return {
                        destination : item.querySelector('.pl-version-destination').value || v("pl-default-url"),
                        identifier : item.querySelector('.pl-version-identifier').value
                    };
                })
            };
        };

        var createNewPonglink = function() {
            var payload = createPayload();
            if (!payload.identifier || !payload.defaults.destination || !payload.defaults.source || !payload.defaults.campaign || 
                payload.versions.length == 0 ||
                payload.versions.map(function(ver) { return ver.identifier.trim() }).includes("")
            ) {
                return liliumcms.modals.error("Ponglinks", "Seems like some fields are missing. Make sure the form is filled out properly!");
            }

            liliumcms.lmldom.post(payload, '${context._c.server.url}/admin/ponglinks/create', function(r) {
                liliumcms.lmldom.getBunches()["ponglinks-list"].render();
                liliumcms.notify({ 
                    title : "Ponglinks",
                    message : payload.identifier + " was successfully created",
                    type : "success"
                });
                dismissCreate();
            });
        }
    </script>

`)};

module.exports = { settings, compile };
