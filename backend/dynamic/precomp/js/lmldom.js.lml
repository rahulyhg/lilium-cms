/****************************************/
// Lilium Document Object Model         //
// v.0.8                                //
// ------------------------------------ //
// Author : Erik Desjardins             //
// End : Frontend                       //
//                                      //
// Doesn't use jQuery                   //
/****************************************/
{#config}
/*
    -- LMLDom Header tag --

    lml:dom         => features="list of features split using white spaces"

    -- LMLDom Tags --------

    - Loops & Wrappers --
    lml:foreach     => var="newlyDefinedVariable" in="currentArray"
    lml:wrapper     => tag="tagName" id="id_and_{variableName}" class="class passed to new node"

    - Tables --
    lml:table       => id="string_{variableName}" class="" 
    lml:tbody       => id="string_{variableName}" class="" for="variableName" in="variableName"
    lml:tcol        => id="string_{variableName}" class="" colspan="number"
    lml:tfooter     => id="string_{variableName}" class=""

    - Filters --
    lml:filter      => id="functionName" pass="variableName"

    - Generators --
    lml:generate    => call="functionName"

    - Normal Tags --
    lml:text /      => var="variableName"
    lml:image /     => src="//domain.com/uploads/{variableName}" 
    lml:action      => callback="functionname" class="class passed to new node" pass="param_{variableName}"
    lml:editable    => value="variableName" name="string" class="class passed to new node" placeholder="string"
    lml:link        => href="//domain.com/admin/{variableName}" class="" target=""

    - Livevar fed fields --
    select.lmldom-liveselect  => data-filledby="livevar.endpoint" name="fieldname"
*/
var LMLDom = function() {
    var maindom;
    var livevars;
    var currentSiteURL = "{=config.default.server.url}";
    var adminEndpoint = currentSiteURL + "/admin";
    var edgeVersion = 0.6;
    var domhooks = [];

    var ldContext = {};

    // Appends nodes into one another, 0 => 1 => 2 => ... => n
    // Returns last node
    var chainAppend = function(___) {
        var len = arguments.length;
        var ctn = 0;
        while (ctn < len-1) {
            arguments[ctn+1].appendChild(arguments[ctn]);
            ctn++;
        }

        return arguments[len-1];
    };

    // Appends an array of nodes to a parent node
    // Returns the parent node
    var bulkAppend = function(arr, newparent) {
        for (var i = 0; i < arr.length; i++) {
            newparent.appendChild(arr[i]);
        }

        return newparent;
    };

    this.table = function(tab) {
        var etab = document.createElement('table');
        etab.className = tab.className;
        
        // Header
        var columns = JSON.parse(tab.getAttribute('cols'));
        var thead = document.createElement('thead');
        var theadrow = document.createElement('tr');

        for (var i = 0; i < columns.length; i++) {
            var th = document.createElement('th');
            th.textContent = columns[i];
            theadrow.appendChild(th);
        }
        chainAppend(theadrow, thead, etab);

        // Body
        var tbody = tab.querySelector('lml\\:tsection[section="body"]');
        tbody.setAttribute('wrapper', 'tr');
        var ebody = document.createElement('tbody');
        ebody.className = tbody.className;
        ebody.id = tbody.id;
        etab.appendChild(ebody);
        
        bulkAppend(this.foreach(tbody, ebody), ebody)

        // Footer (optional)
        var tfoot = tab.querySelector('lml\\:tsection[section="foot"]');
        if (tfoot) {
            var efoot = document.createElement('tfoot');
            efoot.className = tfoot.className;
            efoot.id = tfoot.id;

            var cols = tfoot.querySelectorAll('lml\\:tcol');
            var tr = document.createElement('tr');
            for (var i = 0; i < cols.length; i++) {
                var foottd = document.createElement('td');
                foottd.setAttribute('colspan', cols[i].getAttribute('colspan'));

                this.parseNode(cols[i]);                
                while (cols[i].children.length != 0) {
                    foottd.appendChild(cols[i].children[0]);
                }
                
                tr.appendChild(foottd);
            }
            
            chainAppend(tr, efoot, etab);
        }

        tab.insertAfter(etab);
        tab.remove();
        return etab;
    };

    this.foreach = function(elem, virtual) {
        var nodes = [];

        var itt = ldContext[elem.getAttribute('in')];
        var varname = elem.getAttribute('var') || elem.getAttribute('for');

        if (typeof itt == "undefined") {
            // Try deep variable
            var ittlevels = elem.getAttribute('in').split('.');
            var itt = ldContext;
            
            for (var i = 0; i < ittlevels.length; i++) {
                var kk = ittlevels[i];
                if (kk == "?") {
                    kk = liliumcms.pageloader.lastLevel;
                }
                itt = itt[kk];
            }
        }

        var keys = Object.keys(itt);
        for (var i = 0; i < keys.length; i++) {

            ldContext[varname] = itt[keys[i]];
            ldContext[varname].foreachkey = keys[i];
            ldContext.foreachkey = keys[i];
            ldContext.foreachindex = i;

            var wrap = document.createElement(elem.getAttribute('wrapper') || "div");
            for (var j = 0; j < elem.childNodes.length; j++) {
                wrap.appendChild(elem.childNodes[j].cloneNode(true));
            }

            this.parseNode(wrap);
            if (virtual) {
                virtual.appendChild(wrap);
            } else {
                elem.insertAfter(wrap);
            }
        }

        ldContext[varname] = undefined;

        elem.remove();
        return nodes;
    };

    this.createEditors = function(maindom, done) {
        var editorTemplates = maindom.querySelectorAll('lml\\:editor');
        var total = editorTemplates.length;
        var index = -1;

        var next = function() {
            if (++index == total) {
                done();
            } else {
                log('LMLDom', 'Creating LMLEditor with name ' + editorTemplates[index].dataset.name);
                LMLEditor.create(editorTemplates[index].dataset.name, editorTemplates[index], next);
            }
        };

        next();
    }

    this.parseNode = function(elem) {
        var fe = elem.querySelector('lml\\:foreach');
        while (fe) {
            var nd = this.foreach(fe);
            fe = elem.querySelector('lml\\:foreach');
        }

        var wr = elem.querySelector('lml\\:wrapper');
        while (wr) {
            var tagname = wr.getAttribute('tag') || 'div';
            var idstr = wr.id;
            var newid = idstr;

            while (-1 != newid.indexOf('{')) {
                var varlevels = newid.slice(newid.indexOf('{') + 1, newid.indexOf('}')).split('.');
                var newval = ldContext;
                for (var i = 0; i < varlevels.length; i++) {
                    newval = newval[varlevels[i]];
                }

                newid = newid.replace("{" + varlevels.join('.') + "}", newval);
            }

            var wrap = document.createElement(tagname);
            wrap.id = newid;
            wrap.className = wr.className;

            while (wr.children.length != 0) {
                wrap.appendChild(wr.children[0]);
            }
            
            wr.insertAfter(wrap);
            wr.remove();

            wr = elem.querySelector('lml\\:wrapper');
        }

        var tab = elem.querySelector('lml\\:table');
        while (tab) {
            var otab = this.table(tab);
            tab = document.querySelector('lml\\:table');
        }

        var tcols = elem.querySelectorAll('lml\\:tcol');
        for (var i = 0; i < tcols.length; i++) {
            var col = tcols[i]
            var tdd = document.createElement('td');
            
            while (col.children.length != 0) {
                tdd.appendChild(col.children[0]);
            }

            this.parseNode(tdd);
            col.insertAfter(tdd);
            col.remove();
        }

        var iftag = elem.querySelector('lml\\:filter');
        while (iftag) {
            var cbname = iftag.getAttribute('if');
            var paramname = iftag.getAttribute('pass');
            var paramobj;

            if (paramname) {
                paramobj = ldContext[paramname];
                if (!paramobj) {
                    var levels = paramname.split('.');
                    paramobj = ldContext;
                    for (var i = 0; i < levels.length; i++) {
                        paramobj = paramobj[levels[i]];
                    }
                }
            }

            var truthfulness = window[cbname](paramobj);
            if (truthfulness) {
                while (iftag.children.length != 0) {
                    iftag.insertAfter(iftag.children[0]);
                }
            } 

            iftag.remove();
            iftag = elem.querySelector('lml\\:filter');
        }

        var gen = elem.querySelector('lml\\:generate');
        while (gen) {
            var generator = gen.getAttribute('call');
            var genelem = window[generator](ldContext);

            if (genelem) {
                gen.insertAfter(genelem);
            }

            gen.remove();
            gen = elem.querySelector('lml\\:generate');
        }

        var act = elem.querySelector('lml\\:action');
        while (act) {
            var button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.className = act.className;
            var cbname = act.getAttribute('callback');
            var paramName = act.getAttribute('pass') || "";
            
            paramstr = paramName;
            while (-1 != paramstr.indexOf('{')) {
                var varlevels = paramstr.slice(paramstr.indexOf('{') + 1, paramstr.indexOf('}')).split('.');
                var newval = ldContext;
                for (var i = 0; i < varlevels.length; i++) {
                    newval = newval[varlevels[i]];
                }

                paramstr = paramstr.replace("{" + varlevels.join('.') + "}", newval);
            }

            cbname = cbname.split('.');
            var ftc = window;

            for (var i = 0; i < cbname.length; i++) {
                ftc = ftc[cbname[i]];
            }
            
            (function(ftc, param) {
                button.addEventListener('click', function() {
                    ftc(param);
                });
            })(ftc, paramstr);

            button.innerHTML = act.innerHTML;
            
            act.insertAfter(button);
            act.remove();

            act = elem.querySelector('lml\\:action');
        }

        var ed = elem.querySelector('lml\\:editable');
        while (ed) {
            var varlevels = ed.getAttribute('value').split('.');
            var txt = ldContext;
            
            for (var k = 0; k < varlevels.length; k++) {
                txt = txt[varlevels[k]];
            }

            var inp = document.createElement('input');
            inp.setAttribute('type', 'text');
            inp.setAttribute('placeholder', ed.getAttribute('placeholder') || "");
            inp.setAttribute('name', ed.getAttribute('name') || "");
            inp.className = (ed.className || "") + " lmleditable-seemless";
            inp.value = txt;

            ed.insertAfter(inp);
            ed.remove();
            
            ed = elem.querySelector('lml\\:editable');
        }

        var lim = elem.querySelector('lml\\:image');
        while (lim) {
            var img = document.createElement('img');

            var paramName = lim.getAttribute('src') || "";
            
            paramstr = paramName;
            while (-1 != paramstr.indexOf('{')) {
                var varlevels = paramstr.slice(paramstr.indexOf('{') + 1, paramstr.indexOf('}')).split('.');
                var newval = ldContext;
                for (var i = 0; i < varlevels.length; i++) {
                    newval = newval[varlevels[i]];
                }

                paramstr = paramstr.replace("{" + varlevels.join('.') + "}", newval);
            }

            img.setAttribute('src', paramstr);
            img.className = lim.className;
            img.innerHTML = lim.innerHTML;

            lim.insertAfter(img);
            lim.remove();

            lim = elem.querySelector('lml\\:image');
        }

        var lnk = elem.querySelector('lml\\:link');
        while (lnk) {
            var a = document.createElement('a');

            var paramName = lnk.getAttribute('href') || "";
            
            paramstr = paramName;
            while (-1 != paramstr.indexOf('{')) {
                var varlevels = paramstr.slice(paramstr.indexOf('{') + 1, paramstr.indexOf('}')).split('.');
                var newval = ldContext;
                for (var i = 0; i < varlevels.length; i++) {
                    newval = newval[varlevels[i]];
                }

                paramstr = paramstr.replace("{" + varlevels.join('.') + "}", newval);
            }

            a.setAttribute('href', paramstr);
            a.setAttribute('target', lnk.getAttribute('target') || "");
            a.className = lnk.className;
            a.innerHTML = lnk.innerHTML;

            lnk.insertAfter(a);
            lnk.remove();

            lnk = elem.querySelector('lml\\:link');
        }

        var tn = elem.querySelector('lml\\:text');
        while (tn) {
            var varlevels = tn.getAttribute('var').split('.');
            var txt = ldContext;
            
            for (var k = 0; k < varlevels.length; k++) {
                txt = txt[varlevels[k]];
            }

            var elementtype = tn.getAttribute('wrapper');
            var maybeDateFormat = tn.getAttribute('date');
            
            var spann;
            if (elementtype) {
                spann = document.createElement(elementtype);
                spann.textContent = maybeDateFormat ? dateFormat(new Date(txt), maybeDateFormat) : txt;
            } else {
                spann = document.createTextNode(maybeDateFormat ? dateFormat(new Date(txt), maybeDateFormat) : txt);
            }

            tn.insertAfter(spann);
            tn.remove();
            
            tn = elem.querySelector('lml\\:text');
        }

        return elem;
    };

    this.setValueToField = function(field, val) {
        if (field.dataset.editor == "ckeditor") {
            field.value = val;
            CKEDITOR.replace(field);

            log('LMLDOM', 'Filled ckeditor with name ' + field.name);
        } else if (field.classList.contains('media-input')) { 
            field.value = val;
            liliumcms.imagepicker.setImageToElement(field.previousSibling, val);
        } else if (field.dataset.type == "leaflet") {
            var locSplit = val.split('_');
            liliumcms.formParser.setLeafletLocation(field.name, undefined, locSplit[1], locSplit[0]);
        } else if (field.type == "checkbox") {
            field.checked = val === true;
        } else if (field.classList.contains('lmldom-liveselect')) {
            var rk = field.dataset.selectreadkey;

            if (rk) {
                var rkLvl = rk.split('.');
                for (var i = 0; i < rkLvl.length; i++) {
                    val = val[rkLvl[i]] || "";
                }
            }

            field.dataset.initvalue = val;
            field.value = val;
        } else if (field.classList.contains('lmldom-multibox-value')) {
            var rk = field.dataset.selectreadkey;

            if (rk) {
                var rkLvl = rk.split('.');
                for (var i = 0; i < rkLvl.length; i++) {
                    val = val[rkLvl[i]] || "";
                }
            }

            var finalval = val;
            if (typeof val == "object" && val.length) {
                finalval = val.join(',');
            }
            field.value = finalval;

            var valArr = finalval.split(',');
            var wrapper = field.nextSibling;

            for (var i = 0; i < valArr.length; i++) {
                wrapper.querySelector("[data-value="+valArr[i]+"]").classList.add('selected');
            }
        } else if (field.type == "datetime-local") {
            field.value = html5datetime(val);
        } else {
            field.value = val;
        }
    };

    this.fillField = function(field, values) {
        var fieldname = field.name.split('.');
        var finalval = values;
        var willAffect = true;

        if (fieldname) {
            for (var i = 0; i < fieldname.length && willAffect; i++) {
                finalval = finalval[fieldname[i]];
                willAffect = typeof finalval != "undefined";
            }

            if (willAffect) {
                this.setValueToField(field, finalval);
            }
        }
    };

    this.fillStackTable = function(stacktable, data) {
        var sInfo = stacktable.getInfo();
        var fieldname = sInfo.fieldname;
        var fullData = data[fieldname];

        if (fullData) {
            var keys = Object.keys(fullData);
            stacktable.appendRow(data);
        }
    };

    this.fillForm = function(domForm) {
        var livevarsource = domForm.dataset.livevarsource.replace('?', liliumcms.pageloader.lastLevel);
        var livevardata = liliumcms.livevars.pulloutLiveVar(livevarsource, true);

        var fields = domForm.querySelectorAll('input, select, textarea');
        log('LMLDOM', 'Looking for values to fill ' + fields.length + " fields");
        for (var i = 0; i < fields.length; i++) {
            this.fillField(fields[i], livevardata);
        }

        var stacktables = liliumcms.getStacktables();
        log('LMLDOM', 'Working with ' + stacktables.length + ' Stack Tables');
        for (var i = 0; i < stacktables.length; i++) {
            this.fillStackTable(stacktables[i], livevardata);
        }

        var ms = liliumcms.multiselects || [];
        log('LMLDOM', 'Working with ' + ms.length + ' Multiselects');
        for (var i = 0; i < ms.length; i++) {
            ms[i].fillFromData(livevardata);
        }

        var tags = domForm.querySelectorAll('.tags-input');
        log('LMLDOM', 'Working with ' + tags.length + ' Tag boxes');
        for (var i = 0; i < tags.length; i++) {
            var tag = new Tags(
                tags[i],
                livevardata
            );

            lTags = liliumcms._priv('tags');
            lTags.push(tag);
            tags[i].dataset.tagsindex = lTags.length - 1;
        }

        var quills = liliumcms.quill.getEditors();
        for (var i = 0; i < quills.length; i++) {
            liliumcms.quill.fill(quills[i], livevardata[quills[i]] || "", 'api');
        }

        log('LMLDOM', 'Done filling fields');
        domForm.dataset.filled = true;
        domForm.classList.add('lmldom-filled');
    };

    this.fillForms = function() {
        var forms = document.querySelectorAll('.lmldom-filled-form');

        log('LMLDOM', "Working with " + forms.length + " forms");
        for (var i = 0; i < forms.length; i++) {
            this.fillForm(forms[i]);
        }
    };

    this.removeFeatures = function() {
        document.body.classList.remove('fullwidth');
    };

    this.applyFeature = function(featurename) {
        switch (featurename) {
            case 'fullwidth':
                document.body.classList.add('fullwidth');
                break;
        }
    };  

    this.addFeatures = function() {
        var features = document.querySelector('lml\\:dom').getAttribute('features');

        if (features) {
            features = features.split(' ');
            for (var i = 0; i < features.length; i++) {
                this.applyFeature(features[i]);
            }
        }
    };

    this.getFormData = function(form) {
        var forms = form ? [form] : document.querySelectorAll('#lml-main form');
        var stacktables = liliumcms.getStacktables();
        var data = {};

        for (var f = 0; f < forms.length; f++) {
            var ff = {
                values : {},
                form : forms[f]
            }

            // Normal fields loop
            for (var i = 0; i < ff.form.length; i++) {
                if (
                    ff.form[i].type == "button" ||
                    ff.form[i].classList.contains("stacktable-field")
                ) {
                    continue;
                } else if (ff.form[i].classList.contains('lmldom-multibox-value')) {
                    ff.values[ff.form[i].name] = ff.form[i].value.split(',');
                } else if (CKEDITOR.instances[ff.form[i].name]) {
                    ff.values[ff.form[i].name] = CKEDITOR.instances[ff.form[i].name].getData();
                } else if (ff.form[i].type == "checkbox") {
                    ff.values[ff.form[i].name] = ff.form[i].checked;
                } else {
                    ff.values[ff.form[i].name] = ff.form[i].value;
                }
            }

            // Tags
            var aTags = ff.form.querySelectorAll('.tags-input');
            for (var i = 0; i < aTags.length; i++) {
                var hTags = aTags[i].querySelectorAll('.tag-val');
                var arr = [];
                for (var j = 0; j < hTags.length; j++) {
                    arr.push(hTags[j].value);
                }

                ff.values[aTags[i].parentElement.dataset.fieldname] = arr;
            }

            // Stack tables
            for (var i = 0; i < stacktables.length; i++) {
                ff.values[stacktables[i].getInfo().fieldname] = stacktables[i].getData();
            }

            // Deep JSONing
            var fieldnames = Object.keys(ff.values);
            for (var i = 0; i < fieldnames.length; i++) {
                var n = fieldnames[i];

                if (!n || n == "form_name") {
                    delete ff.values[n];
                } else if (n.indexOf('.') != -1) {
                    var levels = n.split('.');
                    var finalvalue = ff.values[n];
                    var values = ff.values;
                    
                    for (var j = 0; j < levels.length - 1; j++) {
                        values[levels[j]] = values[levels[j]] || {};
                        values = values[levels[j]];
                    }

                    values[levels[levels.length-1]] = finalvalue;
                    delete ff.values[n];
                }
            }

            data[ff.form.name] = ff;
        }

        return data;
    };

    this.sendForm = function(data, url, callback) {
        var maybeParseJson = function(str) {
            try {
                return JSON.parse(str);
            } catch (ex) {
                return str;
            }
        }

        var xmlhttp = new XMLHttpRequest();
        xmlhttp.addEventListener('load', function(a, b, c) {
            callback(maybeParseJson(xmlhttp.responseText), a, b, c);
        });
        xmlhttp.open("POST", url);
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify(data));
    };

    this.parseLiveFields = function(maindom) {
        // Live Select : select.lmldom-liveselect
        var liveselects = maindom.querySelectorAll(".lmldom-liveselect");
        log('LMLDOM', 'Working with ' + liveselects.length + ' live select fields');
        for (var i = 0; i < liveselects.length; i++) {
            var select = liveselects[i];
            var endpoint = select.dataset.filledby;
            var valuekey = select.dataset.selectvalue;
            var displaykey = select.dataset.selectdisplayname;
            var filling = liliumcms.livevars.pulloutLiveVar(endpoint, true);
            
            if (filling) for (var j = 0; j < filling.length; j++) {
                var elOpt = document.createElement('option');
                elOpt.textContent = filling[j][displaykey];
                elOpt.value = filling[j][valuekey];

                select.appendChild(elOpt);
            }

            select.value = select.dataset.initvalue || select.value;
        }

        // Multibox : *.lmldom-multibox
        var multiboxes = maindom.querySelectorAll(".lmldom-multibox");
        log('LMLDOM', 'Working with ' + multiboxes.length + ' live multibox fields');

        var multiboxClickCallback = function() {
            var hField = document.getElementsByName(this.dataset.fieldname)[0];
            var wrapper = hField.nextSibling;
            var selecteds = wrapper.querySelectorAll('.selected');
            var values = [];

            if (!wrapper.dataset.multiple) {
                if (selecteds.length != 0) {
                    selecteds[0].classList.remove('selected');
                }

                this.classList.add('selected');
                values = [this.dataset.value];
            } else {
                this.classList.toggle('selected');
                
                for (var i = 0; i < selecteds.length; i++) {
                    values.push(selecteds[i].dataset.value);
                }

                values.push(this.dataset.value);
            }

            hField.value = values;
        }

        for (var i = 0; i < multiboxes.length; i++) {
            var multibox = multiboxes[i];
            var endpoint = multibox.dataset.filledby;
            var valuekey = multibox.dataset.selectvalue;
            var displaykey = multibox.dataset.selectdisplayname;
            var boxfilling = liliumcms.livevars.pulloutLiveVar(endpoint, true);
            var hField = document.getElementsByName(multibox.dataset.fieldname)[0];
            var arrValue = hField.value.split(',');

            if (boxfilling) for (var j = 0; j < boxfilling.length; j++) {
                var ss = document.createElement('span');
                ss.textContent = boxfilling[j][displaykey];
                ss.dataset.value = boxfilling[j][valuekey];
                ss.dataset.fieldname = multibox.dataset.fieldname;
                ss.addEventListener('click', multiboxClickCallback);

                if (arrValue.indexOf(ss.dataset.value) != -1) {
                    ss.classList.add('selected');
                }

                multibox.appendChild(ss);
            }

        }
    };

    this.parseSnips = function(maindom, cb) {
        var allSnips = maindom.querySelectorAll('.lmldom-snip');
        var total = allSnips.length;
        var currentIndex = 0;

        log('LMLDOM', 'Working with ' + total + ' snips');
        var nextSnip = function() {
            if (currentIndex == total) {
                cb();
            } else {
                var gotSnip = function() {
                    snipMarkup = this.responseText;
                    allSnips[currentIndex].innerHTML = snipMarkup;
                    var inlineJS = allSnips[currentIndex].querySelectorAll('script');

                    for (var i = 0; i < inlineJS.length; i++) {
                        var injs = inlineJS[i].textContent;
                        eval.call(window, injs || "");
                        inlineJS[i].dataset.executedby = "lmldom";
                    }

                    currentIndex++;
                    nextSnip();
                }

                var data = allSnips[currentIndex].dataset;
                var keys = Object.keys(data);
                var dataString = "?async=true";

                for (var i = 0; i < keys.length; i++) {
                    dataString += "&" + keys[i] + "=" + data[keys[i]];
                }

                var oReq = new XMLHttpRequest();
                oReq.addEventListener("load", gotSnip);
                oReq.open("GET", "{=config.default.server.url}/admin/snips/" + allSnips[currentIndex].dataset.snip + dataString);
                oReq.send();
            }
        };

        nextSnip();
    };

    this.parse = function(lmldomReady) {
        var domv = document.querySelector('lml\\:dom');
        var lmldom = this;
        if (domv) {
            domv = domv.getAttribute('v');
        } else {
            lmldom.removeFeatures();
            return lmldomReady && lmldomReady();
        }

        ldContext.livevars = liliumcms.livevars.deepLivevars(true);

        log('LMLDOM', 'Parsing Lilium Document Object Model v' + domv);
        var now = new Date();
        lmldom.parseLiveFields(maindom);
        lmldom.parseSnips(maindom, function() {
            log('LMLDOM', 'Working with LMLDOM markup');
            lmldom.parseNode(maindom);
            var lvs = maindom.querySelectorAll("lml\\:livevars");
            for (var i = 0; i < lvs.length; i++) {
                lvs[i].remove();
            }

            lmldom.createEditors(maindom, function() {
                lmldom.fillForms();

                log('LMLDOM', 'Applying page features');
                lmldom.removeFeatures();
                lmldom.addFeatures();

                log("LMLDOM", "Rendered LMLDom v" + domv + " in " + (new Date() - now) + "ms");
                liliumcms.pageloader.parseDocument();

                log('LMLDOM', 'Dispatching lmlDOMLoaded event');
                document.dispatchEvent(new CustomEvent('lmlDOMLoaded', {
                    detail : {
                        version : domv,
                        protocol : "lmldom",
                        timetoparse : (new Date() - now)
                    }
                }));

                log('LMLDOM', 'Firing ' + domhooks.length + " LMLDOM hooks");
                while (domhooks.length) {
                    domhooks.pop()();
                }

                log('LMLDOM', 'Parsing done!');
                lmldomReady && lmldomReady(lmldom);
            });
        });
    };

    this.bind = function(cb) {
        log('LMLDOM', 'Registered hook');
        domhooks.push(cb);
    };

    this.init = function() {
        log('LMLDOM', 'Initializing Lilium Document Object Model');
        maindom = document.getElementById('lml-main');

        HTMLUnknownElement.prototype.insertAfter = 
        HTMLElement.prototype.insertAfter = 
        function (newNode) { 
            this.parentNode.insertBefore(newNode, this.nextSibling); 
        };

        HTMLElement.prototype.getElementsByName = function(name) {
            return this.querySelectorAll('[name="'+name+'"]');
        };

        log('LMLDOM', 'Done initializing');
    };
};
