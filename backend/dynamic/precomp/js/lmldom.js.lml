{#config}
/*
    LMLDom Tags

    lml:foreach     => var="newlyDefinedVariable" in="currentArray"
    lml:wrapper     => tag="tagName" id="id_and_{variableName}" class="class passed to new node"
    lml:text /      => var="variableName"
    lml:action      => callback="functionname" class="class passed to new node" pass="param_{variableName}"
    lml:editable    => value="variableName" name="string" class="class passed to new node" placeholder="string"
*/
var LMLDom = function() {
    var maindom;
    var livevars;
    var ldContext = {};

    this.foreach = function(elem) {
        var nodes = [];

        var itt = ldContext[elem.getAttribute('in')];
        var varname = elem.getAttribute('var');

        if (typeof itt == "undefined") {
            // Try deep variable
            var ittlevels = elem.getAttribute('in').split('.');
            var itt = ldContext;
            
            for (var i = 0; i < ittlevels.length; i++) {
                itt = itt[ittlevels[i]];
            }
        }

        for (var i = 0; i < itt.length; i++) {
            ldContext[varname] = itt[i];
            var wrap = document.createElement(elem.getAttribute('wrapper') || "div");
            for (var j = 0; j < elem.childNodes.length; j++) {
                wrap.appendChild(elem.childNodes[j].cloneNode(true));
            }

            this.parseNode(wrap);
            elem.insertAfter(wrap);
        }

        ldContext[varname] = undefined;

        elem.remove();
        return nodes;
    };

    this.parseNode = function(elem) {
        var fe = elem.querySelector('lml\\:foreach');
        while (fe) {
            var nd = this.foreach(fe);
            fe = elem.querySelector('lml\\:foreach');
        }

        var wr = elem.querySelector('lml\\:wrapper');
        while (wr) {
            var tagname = wr.getAttribute('tag') || 'div';
            var idstr = wr.id;
            var newid = idstr;

            while (-1 != newid.indexOf('{')) {
                var varlevels = newid.slice(newid.indexOf('{') + 1, newid.indexOf('}')).split('.');
                var newval = ldContext;
                for (var i = 0; i < varlevels.length; i++) {
                    newval = newval[varlevels[i]];
                }

                newid = newid.replace("{" + varlevels.join('.') + "}", newval);
            }

            var wrap = document.createElement(tagname);
            wrap.id = newid;
            wrap.className = wr.className;

            while (wr.children.length != 0) {
                wrap.appendChild(wr.children[0]);
            }
            
            wr.insertAfter(wrap);
            wr.remove();

            wr = elem.querySelector('lml\\:wrapper');
        }

        var act = elem.querySelector('lml\\:action');
        while (act) {
            var button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.className = act.className;
            var cbname = act.getAttribute('callback');
            var paramName = act.getAttribute('pass') || "";
            
            paramstr = paramName;
            while (-1 != paramstr.indexOf('{')) {
                var varlevels = paramstr.slice(paramstr.indexOf('{') + 1, paramstr.indexOf('}')).split('.');
                var newval = ldContext;
                for (var i = 0; i < varlevels.length; i++) {
                    newval = newval[varlevels[i]];
                }

                paramstr = paramstr.replace("{" + varlevels.join('.') + "}", newval);
            }

            cbname = cbname.split('.');
            var ftc = window;

            for (var i = 0; i < cbname.length; i++) {
                ftc = ftc[cbname[i]];
            }
            
            (function(ftc, param) {
                button.addEventListener('click', function() {
                    ftc(param);
                });
            })(ftc, paramstr);

            button.innerHTML = act.innerHTML;
            
            act.insertAfter(button);
            act.remove();

            act = elem.querySelector('lml\\:action');
        }

        var ed = elem.querySelector('lml\\:editable');
        while (ed) {
            var varlevels = ed.getAttribute('value').split('.');
            var txt = ldContext;
            
            for (var k = 0; k < varlevels.length; k++) {
                txt = txt[varlevels[k]];
            }

            var inp = document.createElement('input');
            inp.setAttribute('type', 'text');
            inp.setAttribute('placeholder', ed.getAttribute('placeholder') || "");
            inp.setAttribute('name', ed.getAttribute('name') || "");
            inp.className = (ed.className || "") + " lmleditable-seemless";
            inp.value = txt;

            ed.insertAfter(inp);
            ed.remove();
            
            ed = elem.querySelector('lml\\:editable');
        }


        var tn = elem.querySelector('lml\\:text');
        while (tn) {
            var varlevels = tn.getAttribute('var').split('.');
            var txt = ldContext;
            
            for (var k = 0; k < varlevels.length; k++) {
                txt = txt[varlevels[k]];
            }

            var elementtype = tn.getAttribute('wrapper');
            
            var spann;
            if (elementtype) {
                spann = document.createElement('span');
                spann.innerHTML = txt;
            } else {
                spann = document.createTextNode(txt);
            }

            tn.insertAfter(spann);
            tn.remove();
            
            tn = elem.querySelector('lml\\:text');
        }

        return elem;
    };

    this.parse = function() {
        var domv = document.querySelector('lml\\:dom');
        if (domv) {
            domv = domv.getAttribute('v');
        } else {
            return;
        }

        ldContext.livevars = liliumcms.livevars.deepLivevars(true);

        var now = new Date();
        this.parseNode(maindom);
        var lvs = maindom.querySelectorAll("lml\\:livevars");
        for (var i = 0; i < lvs.length; i++) {
            lvs[i].remove();
        }

        console.log("Rendered LMLDom v" + domv + " in " + (new Date() - now) + "ms");
        document.dispatchEvent(new CustomEvent('lmlDOMLoaded', {
            detail : {
                version : domv,
                protocol : "lmldom",
                timetoparse : (new Date() - now)
            }
        }));
    };

    this.init = function() {
        maindom = document.getElementById('lml-main');

        HTMLUnknownElement.prototype.insertAfter = function (newNode) { 
            this.parentNode.insertBefore(newNode, this.nextSibling); 
        };

        HTMLElement.prototype.getElementsByName = function(name) {
            return this.querySelectorAll('[name="'+name+'"]');
        };
    };
};
