{#config}
var LMLConversations = function() {
    var that = this;
    var currentConv = "";
    var cachedusers = {};
    var cachedgroups = {};
    var drawn = false;
    var unreadConv = {};
    var notificationSound = undefined;
    var pendingMessages = [];
    var writestate = false;

    var isEmoji = function(str) {
        var ranges = [
            '\ud83c[\udf00-\udfff]', // U+1F300 to U+1F3FF
            '\ud83d[\udc00-\ude4f]', // U+1F400 to U+1F64F
            '\ud83d[\ude80-\udeff]'  // U+1F680 to U+1F6FF
        ];

        var reg = new RegExp(ranges.join('|'), 'g');
        var count = 0;
        while (reg.exec(str)) {
            count++;
        }

        return count*2 == str.length;
    };

    this.getCachedUsers = function() {
        return cachedusers;
    };

    this.updateState = function(user) {
        if (user.status == "online") {
            var ctn = document.getElementById("chat-list-online");
            ctn.insertBefore(document.getElementById("user" + user.id), ctn.firstChild);
        } else {
            var ctn = document.getElementById("chat-list-everyone");
            ctn.insertBefore(document.getElementById("user" + user.id), ctn.firstChild);
        }
    };

    this.initState = function() {
        var myid = liliumcms.livevars.retrieveVar('session')._id;
        var users = liliumcms.livevars.retrieveVar("online.list");
        var container = document.getElementById("chat-list-online");

        for (var i = 0; i < users.length; i++) {
            container.appendChild(document.getElementById("user" + users[i]));
        }

        var allconv = liliumcms.livevars.retrieveVar('conversations.list');
        for (var i = 0; i < allconv.length; i++) {
            var cconv = allconv[i];
            if (cconv.uptodate.indexOf(myid) == -1) {
                if (cconv.type == "private") {
                    var usr = cconv.users[Math.abs(cconv.users.indexOf(myid) - 1)];
                    document.getElementById("user" + usr).classList.add("unread");
                    document.getElementById('nav-conversations').querySelector('b').classList.add('shown');
                    unreadConv[cconv._id] = usr;
                } else {

                }
            }
        }
    };

    this.seen = this.read = function(conversationid) {
        $.post('{=config.default.server.url}/admin/conversations/'+conversationid+'/read', {}, function() {});
    };

    this.clearConversation = function() {
        document.querySelector('.chat-messages').innerHTML = "";
    };

    this.addMessage = function(msg, list) {
        var li = document.createElement('li');
        
        if (msg.userid != liliumcms.livevars.retrieveVar('session')._id) {
            li.classList.add('in');
            
            var avat = document.createElement('img');
            avat.setAttribute('src', cachedusers[msg.userid].avatarURL);
            avat.classList.add("sender");

            li.appendChild(avat);
        } else {
            li.classList.add('out');
        }

        msg.content = msg.content.trim();
        var cc = document.createElement('span');
        cc.innerHTML = linkifyHtml(msg.content);
        li.appendChild(cc);
        li.dataset._id = msg._id;

        if (li.dataset._id == '*') {
            li.classList.add('sending');
        }

        if (isEmoji(msg.content)) {
            li.classList.add('bigger');
        }

        list.appendChild(li);
        list.scrollTop = list.scrollHeight;
    };

    this.maybeAddMessage = function(msg) {
        if (drawn && currentConv == msg.conversationid) {
            that.addMessage(msg, document.getElementById("chat-messages"));
            return true;
        }
    };

    this.fillConversation = function(messages) {
        var container = document.querySelector('.chat-messages');
        for (var i = 0; i < messages.length; i++) {
            this.addMessage(messages[i], container);

            setTimeout(function() {
                container.scrollTop = container.scrollHeight;
            }, 50);
        }
    };

    this.addUser = function(user, container) {
        var listitem = document.createElement('li');
        var avatar = user.avatarURL ? document.createElement('img') : document.createElement('i');
        var fullname = document.createElement('span');

        if (user.avatarURL) {
            avatar.setAttribute('src', user.avatarURL);
        } else {
            avatar.classList.add('fa'); 
            avatar.classList.add('fa-user'); 
            avatar.classList.add('no-avatar');
            avatar.setAttribute('aria-hidden', "true");
        }

        fullname.textContent = user.displayname;

        listitem.dataset.userid = user._id;
        listitem.dataset.type = "private";
        listitem.dataset.user = JSON.stringify(user);
        listitem.dataset.status = "offline";

        listitem.appendChild(avatar);
        listitem.appendChild(fullname);
        listitem.appendChild(document.createElement('b'));

        listitem.id = "user" + user._id;
        listitem.addEventListener('click', that.showConversation);

        container.appendChild(listitem);

        if (user._id == liliumcms.livevars.retrieveVar('session')._id) {
            listitem.style.display = "none";
        }

        cachedusers[user._id] = user;
    };

    this.addGroup = function(group, container) {
        var listitem = document.createElement('li');
        var avatar = document.createElement('i');
        var fullname = document.createElement('span');
 
        avatar.classList.add('fa'); 
        avatar.classList.add('fa-users'); 
        avatar.classList.add('no-avatar');

        fullname.textContent = group.topic;
        
        listitem.dataset.groupid = group._id;
        listitem.dataset.type = "group";
        listitem.dataset.group = JSON.stringify(group);
        listitem.appendChild(avatar);
        listitem.appendChild(fullname);

        listitem.id = "group" + group._id;
        listitem.addEventListener('click', that.showConversation);

        container.appendChild(listitem);

        cachedgroups[group._id] = group;
    };

    this.fillChat = function() {
        var users = liliumcms.livevars.retrieveVar("entities.chat");
        var container = document.getElementById("chat-list-everyone");

        for (var i = 0; i < users.length; i++) {
            this.addUser(users[i], container);
        }

        var conversations = liliumcms.livevars.retrieveVar("conversations.list");
        container = document.getElementById("chat-list-group");
        for (var i = 0; i < conversations.length; i++) if (conversations[i].type == "group") {
            this.addGroup(conversations[i], container);
        }

        this.initState();
    };

    this.createNewGroupForm = function() {
        var wrapper = document.querySelector('.lml-participants-suggestion');
        
        for (var userid in cachedusers) if (liliumcms.session.current._id != cachedusers[userid]._id) {
            var usr = cachedusers[userid];
            var userwrapper = document.createElement('div');
            var userimage;

            if (usr.avatarURL != "") {
                 userimage = document.createElement('img');
            } else {
                userimage = document.createElement('i');
                userimage.className = "fa fa-user no-avatar";
            }
            var userfullname = document.createElement('span');

            userfullname.textContent = usr.displayname;
            userimage.setAttribute('src', usr.avatarURL);

            userwrapper.appendChild(userimage);
            userwrapper.appendChild(userfullname);

            userwrapper.dataset.fullname = usr.displayname.toLowerCase();
            userwrapper.dataset.userid = usr._id;
            userwrapper.className = "lml-participants-suggestion-item";
            userwrapper.id = "newgroup_user_" + usr._id;

            userwrapper.addEventListener('click', function() {
                this.classList.toggle('selected');
            });

            wrapper.appendChild(userwrapper);
        }

        var searchinput = document.getElementById('lml-participants-add');
        searchinput.addEventListener('keyup', function() {
            that.filterParticipantsSuggestion(this.value.toLowerCase());
        });

        document.getElementById('chat-slider').querySelector('.fa-fam').addEventListener('click', function() {
            liliumcms.modals.get('conversation-group-new').show();
        });

        liliumcms.modals.get('conversation-group-new').bind('accept', that.prepareNewGroup.bind(that), that);
        liliumcms.modals.get('conversation-group-new').bind('show', that.resetNewGroup.bind(that), that);
    };

    this.fillForms = function() {
        this.createNewGroupForm();
    };

    this.resetNewGroup = function(modal) {
        document.getElementById('conversation-group-new-topic').value = "";
        document.getElementById('lml-participants-add').value = "";
        
        var userwraps = document.querySelectorAll('.lml-participants-suggestion-item.selected, .lml-participants-suggestion-item.hidden');

        for (var i = 0; i < userwraps.length; i++) {
            userwraps[i].classList.remove('selected');
            userwraps[i].classList.remove('hidden');
        }
    };

    this.prepareNewGroup = function(modal) {
        console.log("Preparing");
        var ids = [];
        var topic = document.getElementById('conversation-group-new-topic').value;

        var userwraps = document.querySelectorAll('.lml-participants-suggestion-item.selected');
        for (var i = 0; i < userwraps.length; i++) {
            ids.push(userwraps[i].dataset.userid);
        }
     
        console.log(ids);
        console.log(topic);
        if (ids.length != 0 && topic.trim() != "") {
            modal.elem.querySelector('.lml-modal-accept').setAttribute('disabled', 'disabled');
            that.createNewGroup(topic, ids, function() {
                modal.elem.querySelector('.lml-modal-accept').removeAttribute('disabled');
                modal.close();
            });
        }
    };

    this.createNewGroup = function(topic, participants, cb) {
        $.post('{=config.default.server.url}/admin/conversations/0/create', {
            topic : topic, 
            people : JSON.stringify(participants)
        }, function(resp) {
            that.addGroup(resp, document.getElementById("chat-list-group"));
            cb && cb(resp);
        });
    };

    this.filterParticipantsSuggestion = function(str) {
        var userwraps = document.querySelectorAll('.lml-participants-suggestion-item');

        for (var i = 0; i < userwraps.length; i++) {
            userwraps[i].classList[(userwraps[i].dataset.fullname.indexOf(str) == -1) ? "add" : "remove"]("hidden");
        }
    }

    this.toggleChat = function() {
        document.getElementById("chat-slider").classList.toggle('left');
        document.querySelector('main.lmladminmain').classList.toggle('left');
        document.querySelector('.lmladminsidebar').classList.toggle('left');

        document.getElementById("chat-slider").classList.remove('lefter');
        document.querySelector('main.lmladminmain').classList.remove('lefter');
        document.querySelector('.lmladminsidebar').classList.remove('lefter');
        document.getElementById('chat-conversation').classList.remove('lefter');

        drawn = false;
    };

    this.closeChat = function() {
        if (!document.getElementById('nav-conversations')) return;

        document.getElementById("chat-slider").classList.remove('lefter');
        document.querySelector('main.lmladminmain').classList.remove('lefter');
        document.querySelector('.lmladminsidebar').classList.remove('lefter');
        document.getElementById('chat-conversation').classList.remove('lefter');
        document.getElementById("chat-slider").classList.remove('left');
        document.querySelector('main.lmladminmain').classList.remove('left');
        document.querySelector('.lmladminsidebar').classList.remove('left');

        currentConv = "";
    };

    this.toggleConversation = function() {
        document.getElementById("chat-slider").classList.toggle('lefter');
        document.querySelector('main.lmladminmain').classList.toggle('lefter');
        document.querySelector('.lmladminsidebar').classList.toggle('lefter');
        document.getElementById('chat-conversation').classList.toggle('lefter');
    };

    this.showConversation = function(e, user, type) {
        drawn = true;
        var type = type || "";

        if (!user) {
            var li = e.target;
            while (li.nodeName != "LI") {
                li = li.parentElement;
            }
            if (li.dataset.user) {
                user = JSON.parse(li.dataset.user);
            } else if (li.dataset.group) {
                user = cachedgroups[li.dataset.groupid];
            }

            type = li.dataset.type;
        } else if (typeof user === "string") {
            if (type == "" || type == "private") {
                user = cachedusers[user];
                type = "private";
            } else if (type === "group") {
                user = cachedgroups[user];
            }
        } 

        document.getElementById("chat-slider").classList.add('left');
        document.querySelector('main.lmladminmain').classList.add('left');
        document.querySelector('.lmladminsidebar').classList.add('left');
        document.getElementById("chat-slider").classList.add('lefter');
        document.querySelector('main.lmladminmain').classList.add('lefter');
        document.querySelector('.lmladminsidebar').classList.add('lefter');
        document.getElementById('chat-conversation').classList.add('lefter');

        var partswrapper = document.getElementById('chat-participants-list');
        partswrapper.innerHTML = "";

        if (type == "private" || type == "") {
            document.querySelector('.chat-fullname').innerHTML = user.displayname;

            $.get('{=config.default.server.url}/admin/conversations/find?type=private&orcreate=1&async=*&with='+user._id, function(resp) {
                if (!resp.err) {
                    currentConv = resp.id;
                    if (unreadConv[currentConv]) {
                        delete unreadConv[currentConv];
                        if (Object.keys(unreadConv).length == 0) {
                            document.getElementById('nav-conversations').querySelector('b').classList.remove('shown');
                        }
    
                        document.getElementById('user' + user._id).classList.remove("unread");
                    }

                    var userspic = document.createElement('img');
                    userspic.dataset.userid = user._id;
                    userspic.setAttribute('src', cachedusers[user._id].avatarURL);
                    partswrapper.appendChild(userspic);

                    var usertag = document.createElement('span');
                    usertag.textContent = cachedusers[user._id].displayname;
                    usertag.dataset.userid = user._id;
                    usertag.classList.add("pars-list-user-" + user._id);
                    partswrapper.appendChild(usertag);

                    if (resp.uptodate.indexOf(user._id) != -1) {
                        usertag.classList.add('read');
                    }

                    partswrapper.style.display = "block";
                    $.get('{=config.default.server.url}/admin/conversations/messages/' + resp.id + '?async=*&limit=50', function(resp) {
                        that.clearConversation();
                        that.fillConversation(resp.messages);
                        that.read(currentConv);
                    });
                }
            });
        } else if (type == "group") {
            var group = user;
            var uptodate = group.uptodate;
            document.querySelector('.chat-fullname').innerHTML = group.topic;

            for (var i = 0; i < group.users.length; i++) {
                if (cachedusers[group.users[i]].avatarURL) {
                    var userspic = document.createElement('img');
                    userspic.dataset.userid = group.users[i];
                    userspic.setAttribute('src', cachedusers[group.users[i]].avatarURL);
                    partswrapper.appendChild(userspic);
                }

                var usertag = document.createElement('span');

                if (group.users[i] == liliumcms.session.current._id) {
                    usertag.textContent = "You";
                    usertag.classList.add("you")
                } else {
                    usertag.textContent = cachedusers[group.users[i]].displayname;
                }
                usertag.dataset.userid = group.users[i];
                usertag.classList.add("pars-list-user-" + group.users[i]);
                partswrapper.appendChild(usertag);

                if (uptodate.indexOf(group.users[i]) != -1 || liliumcms.session.current._id == group.users[i]) {
                    usertag.classList.add('read');
                }
            }
            partswrapper.style.display = "block";

            currentConv = group._id;
            if (unreadConv[currentConv]) {
                delete unreadConv[currentConv];
                if (Object.keys(unreadConv).length == 0) {
                    document.getElementById('nav-conversations').querySelector('b').classList.remove('shown');
                }
    
                document.getElementById('group' + group._id).classList.remove("unread");
            }
            $.get('{=config.default.server.url}/admin/conversations/messages/' + group._id + '?async=*&limit=50', function(resp) {
                that.clearConversation();
                that.fillConversation(resp.messages);
                that.read(currentConv);
            });
        }
    };

    this.sendPending = function() {
        for (var i = 0; i < pendingMessages.length; i++) {
            that.send(pendingMessages[i]);
        }
    };
    
    var txtEmoMap = {
        "\\:D" : "😄",
        "\\;\\)" : "😉",
        "\\:\\)" : "😀",
        "\\<3" : "❤️",
        "\\:\\(" : "😔",
        "\\:\\'\\(": "😢",
        "\\:O" : "😲"
    };
    var txtToEmojis = function(txt) {
        for (var emot in txtEmoMap) {
            txt = txt.replace(new RegExp(emot, 'g'), txtEmoMap[emot]);
        }

        return txt;
    };

    var parseMsg = function(txt) {
        return txtToEmojis(
            txt
        ).trim();
    };

    this.send = function(customMessage) {
        var txt = document.getElementById('chat-input').value;
        var msg = customMessage || {
            t : "text",
            c : parseMsg(txt),
            v : currentConv
        };

        if (msg.c != "") {
            var container = document.querySelector('.chat-messages');

            if (typeof customMessage == "undefined") {
                that.addMessage({
                    time : new Date(),
                    userid : liliumcms.livevars.retrieveVar('session')._id,
                    content : msg.c.replace(/\n/g, '<br />'),
                    _id : "*"       
                }, container);

                pendingMessages.push(msg);
            }

            $.post('{=config.default.server.url}/admin/conversations/'+msg.v+'/send', {
                t : "text",
                c : msg.c
            }, function(resp) {
                var parts = document.querySelectorAll('#chat-participants-list span');
                for (var i = 0; i < parts.length; i++) if (parts[i].dataset.userid != liliumcms.session.current._id) {
                    parts[i].classList.remove('read');
                }

                pendingMessages.shift();

                if (currentConv == msg.v) {
                    var li = document.querySelector(".chat-messages li.sending")
                    li.dataset._id = resp.id;
                    li.classList.remove("sending");
                }
            });
            document.getElementById('chat-input').value = "";
        }
    };

    this.bindSend = function() {
        var sent = false;
        document.getElementById('chat-input').addEventListener('keydown', function(e) {
            if (e.keyCode == 13 && !e.shiftKey) {
                that.send();
                sent = true;
                return false;
            }   
        });

        document.getElementById('chat-input').addEventListener('keyup', function(e) {
            if (e.keyCode == 13 && !e.shiftKey && sent) {
                sent=false;
                document.getElementById('chat-input').value = "";
                return false;
            }
        });
    };

    this.getConversation = function(type, users, cb) {
        
    };

    this.notifyMsg = function(msg) {
        if (Notification.permission === "granted") {
            var notification = new Notification(
                "✉️ " + cachedusers[msg.userid].displayname + (msg.type === "group" ? " in " + cachedgroups[msg.conversationid].topic : ""), 
            {
                icon: cachedusers[msg.userid].avatarURL,
                body: $('<textarea/>').html(msg.content).text(),
            });

            notification.onclick = function() {
                if (msg.type == "group") {
                    that.showConversation(undefined, msg.conversationid.toString(), 'group');
                } else {
                    that.showConversation(undefined, cachedusers[msg.userid]);
                }

                this.close();
            };
        } else {
            liliumcms.notify({type : "message", title : "✉️ " + cachedusers[msg.userid].displayname + (msg.type === "group" ? " in " + cachedgroups[msg.conversationid].topic : ""), message : $('<textarea/>').html(msg.content).text(), url : "javascript:liliumcms.conversations.showConversation(undefined, '"+(msg.type == "group" ? msg.conversationid.toString() + "', 'group" : msg.userid)+"');"});
        }

        if (currentConv != msg.conversationid || !drawn) {
            if (!msg.type || msg.type === "private") {
                unreadConv[msg.conversationid] = msg.userid;
                document.getElementById("user" + msg.userid).classList.add("unread");
                document.getElementById('nav-conversations').querySelector('b').classList.add('shown');
            } else if (msg.type === "group") {
                unreadConv[msg.conversationid] = msg.userid;
                document.getElementById("group" + msg.conversationid).classList.add("unread");
                document.getElementById('nav-conversations').querySelector('b').classList.add('shown');
            }
        }

        notificationSound.play();
    };

    this.init = function() {
        if (!document.getElementById('nav-conversations')) return;

        document.getElementById('nav-conversations').addEventListener('click', that.toggleChat);
        Mousetrap.bind(["shift+="], that.toggleChat);
        Mousetrap.bind(["escape"], that.closeChat);

        socket.on('userstatus', function(data) {
            that.updateState(data);
        });

        socket.on('message', function(msg) {
            if (!that.maybeAddMessage(msg) || !liliumcms.state.focused) {
                that.notifyMsg(msg);
            }

            if (currentConv == msg.conversationid) {
                var parts = document.querySelectorAll('#chat-participants-list span');
                for (var i = 0; i < parts.length; i++) if (parts[i].dataset.userid != liliumcms.session.current._id) {
                    parts[i].classList.remove('read');
                }
                document.querySelector('.pars-list-user-' + msg.userid).classList.add("read");
            }

            if (liliumcms.state.focused && drawn && currentConv == msg.conversationid) {
                that.read(msg.conversationid);
            }
        });

        socket.on('newchatgroup', function(chatGroup) {
            that.addGroup(chatGroup, document.getElementById("chat-list-group"));
        });

        socket.on('readreport', function(details) {
            if (currentConv == details.convid) {
                document.querySelector(".pars-list-user-" + details.userid).classList.add("read");
            }
        });

        socket.on('typingstatus', function(payload) {
            
        });

        document.getElementById('chat-input', 'keyup', function(e) {
            writingstate = e.target.value.length != 0;
        });

        document.addEventListener('reconnected', function() {
            that.sendPending();
        });

        notificationSound = document.getElementById("notification1");
        this.bindSend();
    }

    this.init();
};
