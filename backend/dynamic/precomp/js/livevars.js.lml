{#config}

var lmldate = function(str) {
    var format = "{=?config.default.posts.backend.dateformat}";
    return dateFormat(str, format == '' ? 'mmm dd yyyy, HH:MM' : format);
}

var html5datetime = function(dt) {
    return dateFormat(new Date(dt || new Date()), 'yyyy-mm-dd\'T\'hh:MM');
}

var LiveVars = function() {
    var endpoints = this.endpoints = [];
    var pageendpoints = this.pageendpoints = [];
    var paramString = "?";
    var livevars = {};
    var that = this;

    this.getSingleLivevar = function(endpoint, params, cb) {
        $.get("{=config.default.server.url}/livevars", {
            vars :JSON.stringify([{
                varname: endpoint,
                params: params
            }])
        }, cb);
    }

    this.retrieveVar = function(name) {
        return livevars[name];
    };

    this.pulloutLiveVar = function(levelStr, deep) {
        var split = levelStr.split('.');
        var curLevel = deep ? this.deepLivevars()[split[0]] : livevars[split[0]];

        for (var i = 1; i < split.length; i++) {
            curLevel = curLevel[split[i]];
            if (typeof curLevel === 'undefined') {
                break;
            }
        }

        return curLevel;
    };

    this.getLiveVars = function(cb, local) {
        urlParams = window.location.pathname.split('/');

        // regex to match { $1 }
        var reg = /({\?\s*[0-9]\s*})/g;

        if (!local) {
            endpoints.push({
                'varname': 'session',
                'params': new Object()
            });
            endpoints.push({
                'varname' : 'lys',
                'params': new Object()
            });
        } else {
            pageendpoints = [];
        }

        $((local ? "main.lmladminmain " : "") + "lml\\:livevars").each(function() {
            var elem = this;
            if (endpoints.indexOf($(this).data('varname')) == -1) {
                var params = $(this).data('varparam');

                var variableName = $(this).data('varname');
                // Check for { $1 } to extract params from the url
                var urls = variableName.match(reg);
                if (urls !== null) {
                    urls.forEach(function(elem) {
                        var urlPos = elem.match(/[0-9]/);
                        var param = urlParams[urlParams.length - (urlPos)];
                        var urlposReg = new RegExp("({\\?\\s*[" + urlPos + "]\\s*})", "g");
                        variableName = variableName.replace(urlposReg, param);
                    });
                    elem.dataset.varname = variableName;
                }

                (local ? pageendpoints : endpoints).push({
                    'varname': variableName,
                    'params': typeof params === "string" ? JSON.parse(params.replace(/&lmlquote;/g, '"')) : {}
                });

            }
        });

        $.get("{=config.default.server.url}/livevars", {
            vars: JSON.stringify(local ? pageendpoints : endpoints)
        }, function(data) {
            tLivevars = deepUnescape(data.livevars);
            for (var l in tLivevars) {
                livevars[l] = tLivevars[l];
            }            

            livevarsResponse = data.response;
            document.dispatchEvent(new CustomEvent('livevarsFetched', {
                'detail': {
                    'livevars': livevars
                }
            }));

            return cb(livevars);
        });
    };

    var deepUnescape = function(json) {
        for (var index in json) {
            switch (typeof json[index]) {
                case 'string':
                    json[index] = unescape(json[index]);
                    break;
                case 'object':
                    json[index] = deepUnescape(json[index]);
                    break;

            }
        }
        return json;
    };

    var pullOutVarFromString = function(object, str) {
        var levels = str.split('.');
        var pullout = object;

        for (var i = 0; i < levels.length; i++) {
            pullout = pullout[levels[i]];
        }

        return pullout;
    };
    /**
     * Gets the content in string of the object tempalte
     */
    var fetchTemplateObjectContent = function(obj, data, domTarget, livevarkey, node) {
        var key = obj.data('key');
        var template = $('#' + obj.data('template'));

        var sep = obj.data('arrayseparator');

        var elemContent;
        var contentFct = obj.data('content');

        if (typeof window[contentFct] === 'function') {
            return window[contentFct].apply(data, [data, node]);
        }

        var content = "";

        if (typeof key !== 'undefined') {
            // Split for keys like : endpoint.variable.id
            var keys = key.split('.');
            var currentData = data;

            keys.forEach(function(elem, i) {
                if (elem[0] === '{' && elem[elem.length-1] === '}') {
                    var pos = elem.substring(2, elem.length - 1);
                    var hArr = window.location.href.split('/');
                    elem = hArr[hArr.length - parseInt(pos)];
                }

                //Check if data[key] exists
                if (typeof currentData[elem] !== 'undefined') {
                    currentData = currentData[elem];

                    //Check if it is the last key
                    if (keys.length == i + 1) {
                        // Append data
                        // Check if array or object
                        if (typeof currentData === 'object' && Object.prototype.toString.call(currentData) === '[object Array]' && currentData.length != 0) {

                            for (var i = 0; i < currentData.length; i++) {
                                // Any array
                                if (Object.prototype.toString.call(currentData) === '[object Array]' && typeof currentData[i] !== 'object') {
                                    content += currentData[i] + (i == currentData.length - 1 ? "" : sep);
                                } else if (typeof currentData === 'object') {
                                    content += generateTemplateFromObject(template, obj, currentData[i], livevarkey, true);
                                }

                            }
                        } else {
                            content = currentData;
                        }
                    }

                } else {
                    content = obj.html();
                }

            });


        } else {
            content = obj.html();
        }
        return content;

    };

    /**
     * Transform the lml:template in html node
     */
    var generateTemplateFromObject = function(domTemplate, domTarget, data, livevarkey, isSubTemplate, appendToNode) {
        appendToNode = typeof appendToNode !== 'undefined' ? appendToNode : true;
        var templateItems = domTemplate.clone();
        while (templateItems.find('lml\\:tobject').length !== 0) templateItems.find('lml\\:tobject').each(function(index, obj) {
            obj = $(obj);

            var nodeType = obj.data('nodetype');
            var action = obj.data('action');
            var filter = obj.data('filter');
            var content = obj.data('content');
            var allDat = obj.data();

            var passed = true;

            if (typeof window[filter] === 'function') {
                passed = window[filter].apply(data, [data]);
            }

            if (passed) {

                // Create a node based on nodetype
                var node = $(document.createElement(nodeType));
                if (typeof livevarkey !== 'undefined') {
                    node.context.dataset.livevarkey = livevarkey;
                }

                if (nodeType == 'img') {
                    if (obj.data('absurl')) {
                        var abskey = obj.data('absurl');
                        var absurl = pullOutVarFromString(data, abskey);

                        node.attr('src', absurl);
                    } else {
                        if (obj.data('baseurl')) {
                            var href= fetchTemplateObjectContent(obj, data, domTarget, livevarkey, node)
                            // Add src to image node
                            var prepend = obj.data('baseurl');
                            if (href !== '') {
                                node.attr('src', prepend + fetchTemplateObjectContent(obj, data, domTarget, livevarkey, node));
                            }
                        } else {
                            // Add src to image node
                            node.attr('src', fetchTemplateObjectContent(obj, data, domTarget, livevarkey, node));
                        }
                    }
                } else if (nodeType == 'progress') {
                    node = $(document.createElement('div'));
                    node.addClass("lml-progressbar-wrapper");
                    var pval = parseInt(pullOutVarFromString(data, allDat.valuekey));
                    var pmax = parseInt(pullOutVarFromString(data, allDat.maxkey));

                    var perc = pval / pmax * 100;
                    perc = perc >= 100 ? 100 : perc;

                    barnode = $(document.createElement('div'));
                    barnode.addClass('lml-progressbar-bar');
                    barnode.css({width : perc + "%"});

                    node.append(barnode);
                } else if (nodeType == 'a') {
                    // Href for a link node
                    if (obj.data('href')) {
                        node.attr('href', obj.data('href') + fetchTemplateObjectContent(obj, data, domTarget, livevarkey, node));
                    } else if (obj.data('hrefsource')) {
                        // hrefsource just appends itself to the already existing href
                        var prepend = obj.data('prependroot') ? window.location.urlBase : "";
                        var append = obj.data('append') || "";

                        node.attr('href', prepend + pullOutVarFromString(data, obj.data('hrefsource')) + append);
                    }
                    if (obj.data('target')) {
                        node.attr('target', obj.data('target'));
                        node.data('async', true);
                    }
                    // Set html to node
                    node.html(obj.html());
                } else if (nodeType == 'template') {
                    var arr = pullOutVarFromString(data, allDat.key);

                    for (var ii = 0; ii < arr.length; ii++) {
                        generateTemplateFromObject($('#' + allDat.template), obj, arr[ii], livevarkey, true, true);
                    }
                } else {
                    // Other node types, we'll generate the content for nodes
                    node.html(fetchTemplateObjectContent(obj, data, domTarget, livevarkey, node));
                }

                // Add class to the node object
                if (obj.data('class')) {
                    var classes = obj.data('class').split(' ');

                    for (var ci = 0; ci < classes.length; ci++) {
                        node.addClass(classes[ci]);
                    }
                }

                // ?
                if (obj.data('classsource')) {
                    var classSrc = obj.data('classsource');
                    var classes = data[classSrc];
                    classes = classes ? classes.split(' ') : [];

                    for (var ci = 0; ci < classes.length; ci++) {
                        node.addClass(classes[ci]);
                    }
                }

                // Bind events to functions
                if (action && typeof window[action] === 'function') {
                    var paramkey = obj.data('actionparamkey');
                    var bindName = obj.data('bind');
                    node.bind(bindName, function() {
                        window[action].apply(data, [data[paramkey], node]);
                    });
                }

                if (formatting = obj.data('formatter')) {
                    switch (formatting) {
                        case 'lmldate':
                            node.html(lmldate(node.html()));
                            break;
                    }
                }

                // Replace the actual template with the node
                obj = $(obj).replaceWith(node);

            } else {
                // Ignore for now, validation stuff
                $(obj).remove();
                return false;
            }
        });

        // Wrapping the element with some html
        var wrap = domTemplate.data('wrapper');
        if (wrap) {
            templateItems.html('<' + wrap + '>' + templateItems.html() + '</' + wrap + '>');
        }

        // Appending element to some target
        if (appendToNode) {
            if (domTarget.data('target')) {
                $('#' + domTarget.data('target')).append(templateItems.children());
            } else {
                $(domTarget).before(templateItems.children());
            }
        }

        if (typeof isSubTemplate !== 'undefined' && isSubTemplate) {
            return templateItems.html();
        } else if (!appendToNode) {
            return templateItems.children();
        } else {
            return true;
        }
    };

    var generateFillingFromObject = function(filler, fillingData, data, dataStr) {
        var props = typeof fillingData.varparam == "object" ? fillingData.varparam : JSON.parse(fillingData.varparam.replace(/&lmlquote;/g, '"'));
        var filling = $(document.createElement(fillingData.filling));

        for (var key in props) {
            if (key === 'html') {
                filling.html(dataStr ? data : pullOutVarFromString(data, props[key]));
            } else {
                filling.attr(key, data[props[key]]);
            }
        }

        filler.append(filling);
    };
    /**
     * Generate view based on livevars and lml:templates
     */
    this.parseTextToView = function(local) {
        if (!document.querySelector('lml\\:dom')) {
            $((local ? "main.lmladminmain " : "") + "lml\\:livevars").each(function() {
                var lmlTag = $(this);

                if (typeof livevars[this.dataset.varname] === "object") {

                    var templateName = $(this).data('template');
                    var varValue = livevars[this.dataset.varname];
                    var fillerName = $(this).data('filler');
                    var sourceof = $(this).data('sourceof');
                    var cacheonly = $(this).data('cacheonly');
                    var livevarkey = this.dataset.varname;
                    var readkey = this.dataset.readkey;
                    if (typeof $(this).data('attribute') !== 'undefined') {
                        var attributes = typeof $(this).data('attribute') == "object" ? $(this).data('attribute') : JSON.parse($(this).data('attribute').replace(/&lmlquote;/g, '"'));

                    }

                    if (livevars[this.dataset.varname].length == 0) {
                        var template = $('#' + templateName);
                        $(this).after($(template).find('lml\\:empty').html());
                    }
                    if (sourceof && sourceof != "") {
                        (function(src, data) {
                            var evnt = function() {
                                if (!$('#' + src).data('_lmlfilled')) {
                                    var fCtx = $('#' + src).data('context');
                                    if ($.isArray(data)) {
                                        for (var key in data) {
                                            liliumcms.fillFormFromSource(src, data[key], key, fCtx);
                                        }
                                    } else {
                                        liliumcms.fillFormFromSource(src, data, undefined, fCtx);
                                    }
    
                                    $('#' + src).data('_lmlfilled', true);
                                    document.removeEventListener(liliumcms.LiliumEvents.livevarsPrerendered.name, evnt);
                                }
                            };
    
                            document.addEventListener(liliumcms.LiliumEvents.livevarsPrerendered.name, evnt);
                        })(sourceof, varValue);
                    }
                    if (cacheonly) {
                        // $(lmlTag).remove();
                    } else if (fillerName == "pushtable") {
                        var datascheme = $(this).data('scheme');
                        var pushTable = new PushTable($(this).data('fieldname'), $(this).data('title'), datascheme, varValue);
                        liliumcms.pushtables.push(pushTable);

                        $(lmlTag).after(pushTable.render());
                    } else if (templateName && templateName != "" && $('#' + $(this).data('template')).length != 0) {
                        var templateObj = $('#' + $(this).data('template'));
    
                        if (templateObj.length != 0) {
                            if (varValue.length > 0) {
                                // Generate template object for array
                                varValue.forEach(function(val, index) {
                                    generateTemplateFromObject(templateObj, lmlTag, val, livevarkey);
                                });
                            } else if (typeof varValue !== 'undefined' && typeof varValue.length === 'undefined') {
                                // Generate template for single data
                                generateTemplateFromObject(templateObj, lmlTag, varValue, livevarkey);
                            }
                        }
    
                        // $(lmlTag).remove();
                    } else if (fillerName != "") {
                        var filler = $(document.createElement(fillerName));
                        filler.attr('name', lmlTag.data('fieldname'));
                        if (attributes && attributes.lmlselect) {
                            if (attributes.multiple) {
                                filler.attr("multiple", "multiple");
                            }
                            var datascheme = $(this).data('scheme');
                            var multiselect = new MultiSelect($(this).data('fieldname'), lmlTag, filler);
                            liliumcms.multiselects.push(multiselect);
                            filler[0].dataset.multiselectindex = liliumcms.multiselects.length - 1;
                        }
                        if (typeof varValue.length !== 'undefined' && varValue.forEach) {
                            var d = lmlTag.data();
                            if (attributes && attributes.header) {
                                generateFillingFromObject(filler, d, attributes.header, true);
                            }

                            varValue.forEach(function(val, index) {
                                generateFillingFromObject(filler, d, val);
                            });
                        } else {
                            var d = lmlTag.data();
                            if (attributes && attributes.header) {
                                generateFillingFromObject(filler, d, attributes.header, true);
                            }
    
                            generateFillingFromObject(filler, d, varValue);
                        }
    
                        if (readkey && readkey != name) {
                            filler.data("readkey", readkey);
                            filler.get(0).dataset.readkey = readkey;
                        }
    
                        $(lmlTag).after(filler);
                    } else {
                        $(this).text(JSON.stringify(livevars[$(this).data('varname')]));
                        $(this).text(unescape(livevars[$(this).data('varname')]));
                    }   
                }
            });

            // Lilium Templates
            $('lml\\:template').remove();

            // Parse remaining independent tObjects
            $('lml\\:tobject').not('lml\\:template lml\\:tobject').not('lml\\:tabletemplate lml\\:tobject').each(function(index, tobj) {
                var nodeType = tobj.dataset.nodetype || "span";
                var node = $(document.createElement(nodeType));
                var content = fetchTemplateObjectContent(
                    $(tobj),        
                    liliumcms.livevars.deepLivevars(), 
                    $(tobj).parent(), 
                    $(tobj).data('key'), 
                    node
                );
            
                node.html(content || ("[TObjectException - Undefined live variable key " + $(tobj).data('key') + "]"));
                $(tobj).after(node).remove();
            });
        }

        // Fire ready event
        document.dispatchEvent(new CustomEvent('livevarsPrerendered', {
            'detail': {
                'livevars': livevars
            }
        }));
        document.dispatchEvent(new CustomEvent('livevarsRendered', {
            'detail': {
                'livevars': livevars
            }
        }));
    };

    this.templateToHtml = function(templateID, varValue, node) {
        var templateObj = $('#' + templateID);

        if (templateObj.data('classes')) {
            node.className = (templateObj.data("classes"));
        }

        if (templateObj.length != 0) {
            if (typeof varValue == 'object' && varValue.length > 0) {
                // Generate template object for array
                varValue.forEach(function(val, index) {
                    node.appendChild(generateTemplateFromObject(templateObj, $(node), varValue, undefined, false, false)[0]);
                });
            } else if (typeof varValue !== 'undefined' && typeof varValue.length === 'undefined') {
                // Generate template for single data
                var nodes = generateTemplateFromObject(templateObj, $(node), varValue, undefined, false, false);
                for (var i = 0; i < nodes.length; i++){
                    node.appendChild(nodes[i]);
                }
            }
        }
        return node;
    }

    this.deepLivevars = function(reload) {
        if (reload || typeof liliumcms.livevars.deeplivevars === 'undefined') {
            var dlv = new Object;
            liliumcms.livevars.deeplivevars = dlv;

            for (var k in livevars) {
                var levels = k.split('.');
                if (levels.length !== 1) {
                    var curLevel = dlv[levels[0]] = dlv[levels[0]] || {};

                    for (var i = 1; i < levels.length - 1; i++) {
                        curLevel = curLevel[levels[i]] = curLevel[levels[i]] || {};
                    }

                    curLevel[levels[levels.length-1]] = livevars[k];
                } else {
                    dlv[k] = livevars[k];
                }
            };
        }

        return liliumcms.livevars.deeplivevars;
    }

    this.livevars = function() {
        return livevars;
    };

    this.exec = function(local) {
        var that = this;
        that.getLiveVars(function() {
            that.parseTextToView(local);
        }, local);
    };

    document.addEventListener('livevarsFetched', function() {
        $('form input[data-rights]').each(function() {
            if (livevars.session.roles.indexOf('lilium') == -1 &&
                livevars.session.roles.indexOf('admin') == -1 &&
                livevars.session.roles.indexOf($(this).data('rights')) == -1) {

                $(this).closest('label[for=' + $(this).attr(name) + ']').remove();
                $(this).remove();
            };
        });
    });

    this.parseDataLivevars = function() {
        var tags = document.querySelectorAll(".data-livevar");
        for (var i = 0; i < tags.length; i++) {
            var tt = tags[i];
            var lvname = tt.dataset.livevar;
            var lbobj = JSON.parse("{" + lvname + "}");

            for (var attr in lbobj) {
                var val = liliumcms.livevars.pulloutLiveVar(lbobj[attr]);

                if (attr == "html") {
                    tags[i].innerHTML = val;
                } else {
                    tags[i].setAttribute(attr, val);
                }
            }   
        }
    };
};
