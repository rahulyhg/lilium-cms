var options;

var MultiSelect = function(tableid, lmltag, selectElem) {
    var selectElem = $(selectElem);
    var multiselectElem = undefined;
    var lmltag = $(lmltag);
    var name = selectElem.attr('name');
    var isMultiSelect = selectElem.attr('multiple') == 'multiple' ? true : false;
    var props = JSON.parse(lmltag[0].dataset.varparam.replace(/&lmlquote;/g, '"'));
    var fieldname = lmltag[0].dataset.fieldname;
    var initialValues = new Array();
    this.isRendered = false;

    log('MultiSelect', 'Created MultiSelect object with name ' + name);

    this.render = function() {
        log('MultiSelect', 'Rendering field with name : ' + fieldname);
        var wrapper = document.createElement('div');
        wrapper.className = "lmlmultiselect multiselect";
        var data = initialValues;

        $(selectElem).find('option').each(function(index, elem) {
            var selected = false;
        
            var span = document.createElement('span');
            span.id = elem.value;
            span.dataset.value = elem.value;
            span.textContent = elem.textContent;
            span.classList.add("lmlmultiselect-val-" + elem.value);

            if (data && data.indexOf(elem.value) !== -1) {
                span.classList.add('selected');

                var hf = document.createElement('input');
                hf.type = "hidden";
                hf.name = name + "[]";
                hf.value = elem.value;

                span.appendChild(hf);
            }

            wrapper.appendChild(span);
        });

        options = selectElem;
        multiselectElem = wrapper;
        lmltag.after(multiselectElem);
        selectElem.remove();
        bindClicks();
        this.isRendered = true;
    }

    this.fillFromData = function(data) {
        log('MultiSelect', 'Received initial data for field with name : ' + fieldname);
        var selected = data[fieldname];
        if (selected && typeof selected === 'object' && selected.length != 0) {
            initialValues = selected;
        }

        if (this.isRendered) {
            this.updateFromInitState();
        }
    };

    this.updateFromInitState = function() {
        log('MultiSelect', 'Initial data was received after initial render. Consider fixing this!');
        if (multiselectElem) {
            var el = multiselectElem;
            for (var i = 0; i < initialValues.length; i++) {
                var span = el.querySelector('[data-value="'+initialValues[i]+'"]');

                if (span) {
                    var hf = document.createElement('input');
                    hf.type = "hidden";
                    hf.name = name + "[]";
                    hf.value = initialValues[i];
                    span.appendChild(hf);

                    span.classList.add('selected');
                }
            }
        }
    };

    this.getInfo = function() {
        return {
            fieldname : fieldname,
            props : props,
            isMultiSelect : isMultiSelect,
            originalElement : selectElem,
            isRendered : this.isRendered
        };
    };

    var bindClicks = function() {
        $(multiselectElem).find('span').bind('click', function() {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
                $(this).find('input').remove();
            } else {
                if (!isMultiSelect) {
                    $(this).parent().find('.selected').removeClass('selected').find('input').remove();
                }

                $(this).addClass('selected');
                $(this).append('<input type="hidden" name="'+ name +'[]" value="'+ $(this).data('value') +'" />');
            }
        });

        $('form').on('submit', function(e) {
            var form = $(this);
        });
    };

    var generateMultiSelect = function (elem) {
        elem.hide();
    }
};
