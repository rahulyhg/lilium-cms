var PushTable = function(tableid, objTitle, dataScheme, dataSource) {
    var datasrc = dataSource;
    var html = "";
    var scheme = JSON.parse(dataScheme.replace(/&lmlquote;/g, '"'));
    var schemeCol = new Object();
    var htmlIdentifier = tableid;
    var that = this;
    var rows = new Object();

    var selectkeys = new Object();
    this.id = tableid;
    this.title = objTitle;

    this.rendered = false;

    var findColByFieldName = function(fieldName) {
        var col = undefined;
        for (var i = 0; i < scheme.columns.length && !col; i++) {
            if (scheme.columns[i].fiendName == fieldName) {
                col = scheme.columns[i];
            }
        }


        return col;
    };

    this.getSchemeCol = function() {
        return schemeCol;
    };

    this.bindEvents = function() {
        if (this.rendered) {
            $('#' + htmlIdentifier).find('.lmlpushtablekeyer').bind('change', function() {
                return that.selectChanged(this);
            });
            $('#' + htmlIdentifier).find('.lmlpushtablecolumnaddaction').bind('click', function() {
                return that.appendRow()
            });
            $('.lmlpushtablecolumnmultipleselect').each(function(index, field) {
                var dismissMultiSelectDLG = function(field, wrapper) {
                    $(wrapper).removeClass('shown');
                    setTimeout(function() {
                        $(wrapper).remove();
                    }, 201);
                };

                var createAndShowMultiSelectDLG = function(field) {
                    var col = schemeCol[$(field).data("fieldname")];
                    var choices = liliumcms.livevars.livevars()[col.datasource.datasource || -1];
                    var valKey = col.datasource.keyValue;
                    var displayKey = col.datasource.keyName;

                    var keyValAssoc = new Object();

                    if (col && choices) {
                        var wrapper = '<div class="multiselect-wrapper"><ul class="multiselect-choices">';
                        for (var i = 0, len = choices.length; i < len; i++) {
                            wrapper += '<li data-value="'+choices[i][valKey]+'">'+choices[i][displayKey]+'</li>';
                            keyValAssoc[choices[i][valKey]] = choices[i][displayKey];
                        }
                        wrapper += '</ul></div>';
                    }

                    var jWrapper = $(wrapper);
                    $(jWrapper).on('click:out', function() {
                        dismissMultiSelectDLG(field, jWrapper);
                    });
                    $(field).after(jWrapper);

                    setTimeout(function() {
                        jWrapper.addClass('shown');
                    }, 1);

                    var vals = $(field).data('svals');
                    if (!vals) {
                        vals = new Array();
                        $(field).data('svals', vals);
                    }

                    jWrapper.find('li').each(function(index, li) {
                        if (vals.indexOf($(li).data('value')) !== -1) {
                            $(li).addClass('selected');
                        }

                        $(li).bind('click', function() {
                            var li = $(this);
                            var selectState = li.hasClass('selected');

                            li[selectState ? 'removeClass' : 'addClass']('selected');

                            if (!selectState) {
                                vals.push(li.data('value'));
                            } else {
                                var index = vals.indexOf(li.data('value'));
                                if (index !== -1) {
                                    vals.splice(index, 1);
                                }
                            }

                            var textString = new Array();
                            for (var i = 0; i < vals.length; i++) {
                                textString.push(keyValAssoc[vals[i]]);
                            }

                            $(field).val(textString.join(', '));
                        });
                    });
                };

                $(field).bind('focus', function() {
                    var field = this;
                    createAndShowMultiSelectDLG(field);
                });
            });

            for (var i = 0; i < scheme.columns.length; i++) {
                var col = scheme.columns[i];
                if (typeof col.influence !== 'undefined') {

                    (function(col) {
                        $('.lmlpushtablecolumnfield-' + col.fieldName).bind('change', function() {
                            for (var i = 0; i < col.influence.length; i++) {
                                var affectedField = $('.lmlpushtablecolumnfield-' + col.influence[i].fieldName);
                                var newValue = parseFloat(affectedField.data("initvalue"));
                                switch (col.influence[i].eq) {
                                    case "+":
                                        newValue += parseFloat($(this).val());
                                        break;
                                    case "-":
                                        newValue -= parseFloat($(this).val());
                                        break;
                                    case "*":
                                        newValue *= parseFloat($(this).val());
                                        break;
                                    case "/":
                                        newValue /= parseFloat($(this).val());
                                        break;
                                    case "=":
                                        newValue = $(this).val();
                                        break;
                                }

                                affectedField.val(newValue);
                            }
                        });
                    })(col);
                }
            }
        } else {
            throw "Tried to apply bindings on a PushTable that was not yet rendered. Identifier : " + this.htmlIdentifier;
        }

        this.selectChanged();
    };

    this.rowToHTML = function(row) {
        var _h = '<tr class="lmlpushtableaddedrow" id="' + row._rowID + '" data-value="' + row['_lmlid'] + '"><td>' +
            '<b>' + row['_title'] + '</b><input type="hidden" name="' + tableid + '[' + row._rowID + '][prodid]" value="' + row['_lmlid'] + '" /></td>';
        var _e = '';
        var validRow = true;
        var er = undefined;
        var hiddenFields = scheme.hiddenFields;

        for (var key in row) {
            if (hiddenFields.indexOf(key) !== -1) {
                var hval = row[key].toString().replace(/\"/g, '//"');
                _e += '<input type="hidden" name="' + tableid + '[' + row._rowID + '][' + key + ']" value="'+hval+'" />';
            } else if (key[0] != "_" && schemeCol[key]) {
                if (schemeCol[key].autocomplete) {
                    // Check for column in templates
                    var livevarValue = liliumcms.livevars.retrieveVar(schemeCol[key].autocomplete.datasource);
                    var required = schemeCol[key].required;
                    var isEmpty = row[key].trim() == "";
                    var foundObject = undefined;

                    if (isEmpty && !required) {
                        foundObject = new Object();
                        foundObject[schemeCol[key].autocomplete.keyName] = "-";
                    } else {
                        for (var i = 0; i < livevarValue.length; i++) {
                            if (livevarValue[i][schemeCol[key].autocomplete.keyValue] == row[key]) {
                                foundObject = livevarValue[i];
                                break;
                            }
                        }
                    }

                    if (foundObject) {
                        _h += '<td><span>' + foundObject[schemeCol[key].autocomplete.keyName] + '</span><input type="hidden" name="' +
                            tableid + '[' + row._rowID + '][' + key + ']" value="' + row[key] + '" /></td>';
                    } else {
                        validRow = false;
                        er = new Error("Invalid Row");
                        er.invalidRow = key;
                        break;
                    }
                } else if (schemeCol[key].dataType == 'readonly') {
                    // Displays plain text, can be styled
                    var spanClass = "";
                    var displayText = "";                    
                    var rowVal = row[key];

                    if (schemeCol[key].datasource) {
                        var values = liliumcms.livevars.retrieveVar(schemeCol[key].datasource.datasource);
                        var lookupKey = schemeCol[key].datasource.keyValue;
                        var lookupVal = row[key];
                        displayText = "N/A";

                        for (var i = 0; i < values.length; i++) {
                            if (values[i][lookupKey] == lookupVal) {
                                displayText = values[i][schemeCol[key].datasource.keyName];
                                spanClass = key + "-" + row[key];
                            }
                        }
                    } else {
                        displayText = rowVal;
                    }

                    _h += '<td><span class="'+spanClass+'">'+displayText+'</span></td>';
                } else if (schemeCol[key].dataType == 'multiple') {
                    var values = liliumcms.livevars.retrieveVar(schemeCol[key].datasource.datasource);
                    var arr = row[key] || new Array();
                    var displayedVal = new Array();

                    var keyName = schemeCol[key].datasource.keyName;
                    var keyValue = schemeCol[key].datasource.keyValue;

                    var assoc = new Object();
                    for (var i = 0; i < values.length; i++) {
                        assoc[values[i][keyValue]] = values[i][keyName];
                    }

                    _h += '<td>';
                    for (var i = 0, len = arr.length; i < len; i++) {
                        _h += '<input type="hidden" value="'+arr[i]+'" name="'+tableid+'['+row._rowID+']['+key+'][]" />';
                        displayedVal.push(assoc[arr[i]]);
                    }
                    _h += '<span>'+displayedVal.join(', ')+'</span></td>';
                } else {
                    _h += '<td><span>' + row[key].toString() + '</span><input type="hidden" name="' +
                        tableid + '[' + row._rowID + '][' + key + ']" value="' + row[key] + '" /></td>';
                }
            }
        }

        return validRow ? _h + '<td class="lmlpushtableheadaction">' + _e + '<a class="lmlpushtableeditbutton fa fa-pencil-square-o lmlpushtablerowaction"></a><a class="lmlpushtableremovebutton fa fa-times lmlpushtablerowaction"></a></td></tr>' : er;
    };

    this.removeDeleteRow = function(rowID) {
        $('#' + rowID).remove();
        delete rows[rowID];
        that.updateFooter();

        return false;
    };

    this.editRow = function(rowID) {
        var _r = rows[rowID];

        if (_r) {
            $('.lmlpushtableaddedrow#' + rowID).hide();
            $('#' + htmlIdentifier + ' .lmlpushtablekeyer').val(_r["_lmlid"]).trigger("change");
            $('#' + htmlIdentifier).data('editextra', new Object()).data('editid', rowID);

            for (var fieldname in _r) {
                if (fieldname[0] != '_') {
                    var sch = schemeCol[fieldname];
                    var editField = $('*[data-fieldname="'+fieldname+'"]');

                    if (editField.length != 0) {
                        switch (sch.dataType) {
                            case "multiple": 
                                editField.data('svals', _r[fieldname]).val(_r[fieldname].length == 0 ? "[no value]" : "[multiple values]");
                                break;

                            default:
                                editField.val(_r[fieldname]);
                        }
                    } else {
                        $('#' + htmlIdentifier).data('editextra')[fieldname] = _r[fieldname];
                    }
                }
            }
        }

        return false;
    };

    this.fillFromSource = function(sourceObj) {
        for (var i = 0; i < sourceObj.length; i++) {
            this.appendRow(sourceObj[i]);
        }
    }

    this.appendRow = function(sourceObj) {
        var row = new Object();
        row._rowID = "row" + Math.random().toString(36).slice(-12);

        if (sourceObj) {
            var readKey = scheme.key.readKey || scheme.key.keyValue;
            var keyIndex = sourceObj[readKey];
            var keyObject = datasrc[keyIndex];

            row._lmlid = keyObject[scheme.key.keyValue];
            row._title = keyObject[scheme.key.keyName];

            for (var k in sourceObj) {
                if (k != readKey) {
                    row[k] = sourceObj[k];
                }
            }

            if (row._editid) {
                row._rowID = row._editid;
            }
        } else {
            var editextra = $('#' + htmlIdentifier).data('editextra')
            var editid    = $('#' + htmlIdentifier).data('editid');

            if (editid) {
                row._rowID = editid;
                $('#' + htmlIdentifier + ' #' + editid).remove();

                if (editextra) for (var extrafield in editextra) {
                    row[extrafield] = editextra[extrafield];
                }
            }

            row['_lmlid'] = $('#' + htmlIdentifier).find('.lmlpushtablekeyer').val();
            row['_title'] = $('#' + htmlIdentifier).find('.lmlpushtablekeyer option:selected').html();

            $('#' + htmlIdentifier).find('.lmlpushtablecolumnfield:not(.lmlpushtablecasenotmet)').each(function(index, val) {
                var fieldname = $(this).data('fieldname');

                if ($(this).prop('autocomplete') == 'on') {
                    row[fieldname] = $('#' + $(this).attr('list')).find('option[value="' + $(this).val() + '"]').html() || $(this).val();
                } else if ($(this).data("svals")) {
                    row[fieldname] = $(this).data("svals") || [];
                } else {
                    row[fieldname] = $(this).val();
                }
            });

            $('#' + htmlIdentifier).data('editextra', undefined).data('editid', undefined); 
        }

        rows[row._rowID] = row;
        (function(rowID) {
            if (htmlRow instanceof Error) {
                var rowKey = htmlRow.invalidRow;
                // TODO : show error message
            } else {
                var htmlRow = that.rowToHTML(row);
                $('#' + htmlIdentifier).find('tbody').append(htmlRow)
                    .find('tr').last().find('.lmlpushtableremovebutton').bind('click', function() {
                        that.removeDeleteRow(rowID);
                    });
                
                $('#' + htmlIdentifier).find('tbody').find('tr').last().find('.lmlpushtableeditbutton').bind('click', function() {
                    that.editRow(rowID);
                    return false;
                });
            }
        })(row._rowID);

        that.updateFooter();
        return false;
    };

    var findTemplateFieldFromDisplayCase = function(templateid, src) {
        var colTemp = scheme.columnTemplates[templateid];
        var dependsOn = colTemp.dependsOn;
        var valToVerify = src[dependsOn];
        var possibleFields = colTemp.fields;
        var fieldFound = undefined;
        var defaultField = undefined;

        for (var ctn = 0; ctn < possibleFields.length; ctn++) {
            var posFld = possibleFields[ctn];

            if (posFld.displayCase && posFld.displayCase.indexOf(valToVerify) !== -1) {
                fieldFound = posFld;
            } else if (posFld.displayCase.indexOf("*") != -1) {
                defaultField = posFld;
            }
        }

        if (!fieldFound && defaultField) {
            fieldFound = defaultField;
        }

        return fieldFound;
    };

    this.selectChanged = function(select) {
        var key = $(select || ("#" + htmlIdentifier + " .lmlpushtablekeyer option:selected")).val();
        var src = datasrc[key];

        $('#' + htmlIdentifier).find('.lmlpushtablecolumnfield').each(function(index, val) {
            var dataKeyName = $(this).data('keyname');
            var defaultValue = $(this).data('defaultvalue');

            var displayif = $(this).data('displayif');

            if (typeof displayif !== 'undefined' && typeof window[displayif] == 'function') {
                if (window[displayif].apply(key, [key])) {
                    //Hide the selection
                    $(this).show();
                } else {
                    //Hide the selection
                    $(this).hide();
                }

            }

            $(this).val(dataKeyName ? src[dataKeyName] : defaultValue).data("initvalue", $(this).val());
        });

        $('#' + htmlIdentifier).find('.lmlpushtableheadertitlesrow .pushtablecolumntemplatereactive').each(function(index, th) {
            var foundField = findTemplateFieldFromDisplayCase($(th).data('templateid'), src);
            $(th).html(foundField ? (foundField.displayName || foundField.fieldName) : "-");
        });

        $('#' + htmlIdentifier).find('.lmlpushtableheaderfieldsrow .lmlpushtabletemplatereactiverow').each(function(index, th) {
            var foundField = findTemplateFieldFromDisplayCase($(th).data('templateid'), src);
            $(th).children().addClass('lmlpushtablecasenotmet');
            $('.lmlpushtablecolumnfield-' + foundField.fieldName).removeClass('lmlpushtablecasenotmet');
        });

        return false;
    };

    this.render = function() {
        this.rendered = true;
        return html;
    };

    this.updateFooter = function() {
        if (scheme.footer) {
            var table = $('#' + htmlIdentifier);
            table.find('tfoot tr td:gt(0)').each(function(index, col) {
                if (scheme.footer.sumIndexes.indexOf(index) !== -1) {
                    var colScheme = scheme.columns[index];
                    var total = 0;

                    for (var rowID in rows) {
                        total += parseInt(rows[rowID][colScheme.fieldName]);
                    }

                    $(col).html(total + (colScheme.prepend || ""))
                }
            });
        }

        return false;
    };

    this.init = function() {
        html += '<table id="' + tableid + '" class="lmlpushtable lmldatasourcetable" data-title="' + this.title + '"><thead><tr class="lmlpushtableheadertitlesrow"><th>' +
            scheme.key.displayName + '</th>'

        for (var i = 0; i < scheme.columns.length; i++) {
            html += '<th class="pushtablecolumnheader' +
                (scheme.columns[i].dataType == "template" ? " pushtablecolumntemplatereactive" : "") +
                '" ' + (scheme.columns[i].templateid ? 'data-templateid="' + scheme.columns[i].templateid + '"' : "") +
                '>' + (scheme.columns[i].displayName || "") + "</th>";
        }

        html += '<th></th></tr><tr class="lmlpushtableheaderfieldsrow"><th><select class="lmlpushtablekeyer">';

        for (var key in dataSource) {
            var dat = dataSource[key];
            html += '<option class="lmlpushtableoptionkey" value="' + dat[scheme.key.keyValue] + '">' + dat[scheme.key.keyName] + '</option>';
            selectkeys[dat[scheme.key.keyValue]] = dat[scheme.key.keyName];
        }

        html += '</select></th>';

        var parseSpecialType = function(dt) {
            if (!dt) {
                return "text";
            } else {
                switch (dt) {
                    case "money" : return 'number" step="0.01';
                    case "readonly" : return 'hidden';
                    default : return dt;
                }
            }
        };

        var generateFieldCSSClasses = function(col) {
            classes = ['lmlpushtablecolumnfield', 'lmlpushtablecolumnfield-' + col.fieldName + 
                (col.displayCase ? " lmlpushtablecasenotmet lmlpushtabletemplatereactive" : "")
            ];

            switch (col.dataType) {
                case "multiple" :
                    classes.push("lmlpushtablecolumnmultipleselect");
                    break;
            }

            return classes.join(' ');
        };

        var addHeaderField = function(col) {
            if (!false) {
                var h = "";
                h += '<input class="'+generateFieldCSSClasses(col)+
                    '" type="' + parseSpecialType(col.dataType) +
                    '" data-fieldname="' + col.fieldName +
                    (col.keyName ? '" data-keyname="' + col.keyName : "") +
                    (col.displayCase ? '" data-displaycase="' + JSON.stringify(col.displayCase) : "") +
                    (col.defaultValue ? '" data-defaultvalue="' + col.defaultValue : "");

                if (col.autocomplete) {
                    h += '" list="' + tableid + col.fieldName + 
                        'list" autocomplete="on" data-acsource="' + 
                        col.autocomplete.datasource + '"';
                }

                if (col.initValue) {
                    h += '" value="' + (col.initValue || "");
                }
    
                h += '" />';
    
                if (col.autocomplete && col.autocomplete.datasource) {
                    var datVar = liliumcms.livevars.retrieveVar(col.autocomplete.datasource);
    
                    if (datVar && datVar.length) {
                        h += '<datalist id="' + tableid + col.fieldName + 'list">';
    
                        for (var j = 0; j < datVar.length; j++) {
                            h += '<option  value="' + datVar[j][col.autocomplete.keyName] + '">' + 
                                datVar[j][col.autocomplete.keyValue] + 
                                '</option>';
                        }
    
                        h += '</datalist>';
                    }
                }
    
                html += h;
            }
        }

        for (var i = 0; i < scheme.columns.length; i++) {
            var col = scheme.columns[i];
            schemeCol[col.fieldName] = col;

            if (col.dataType == "template") {
                html += '<th class="lmlpushtabletemplatereactiverow" data-templateid="' + col.templateid + '">';

                var colTemplate = scheme.columnTemplates[col.templateid];
                colTemplate.fields.forEach(function(tempField) {
                    addHeaderField(tempField);
                });
            } else {
                html += "<th>";
                addHeaderField(col);
            }
            html += "</th>"
        }

        for (var tempKey in scheme.columnTemplates) {
            var tempCols = scheme.columnTemplates[tempKey];
            for (var j = 0; j < tempCols.fields.length; j++) {
                schemeCol[tempCols.fields[j].fieldName] = tempCols.fields[j];
            }
        }

        html += '<th class="lmlpushtableheadaction"><a class="lmlpushtablecolumnaddaction fa fa-plus lmlpushtablerowaction"></a></th>' +
            '</tr></thead><tbody></tbody>';

        if (scheme.footer) {
            html += '<tfoot><tr><td>' + scheme.footer.title + '</td>';

            for (var i = 0; i < scheme.columns.length; i++) {
                if (scheme.footer.sumIndexes.indexOf(i) !== -1) {
                    html += '<td>0' + (scheme.columns[i].prepend || "") + '</td>'
                } else {
                    html += '<td></td>';
                }
            }

            html += '<td></td></tr></tfoot>';
        }

        html += '</table>';

        document.addEventListener(liliumcms.LiliumEvents.livevarsRendered.name, function() {
            that.bindEvents();
        });
    };

    this.init();
};
