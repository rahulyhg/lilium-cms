var PushTable = function(tableid, objTitle, dataScheme, dataSource) {
    var datasrc = dataSource;
    var html = "";
    var scheme = JSON.parse(dataScheme.replace(/&lmlquote;/g, '"'));
    var schemeCol = new Object();
    var htmlIdentifier = tableid;
    var that = this;
    var rows = new Object();

    var selectkeys = new Object();
    this.id = tableid;
    this.title = objTitle;

    this.rendered = false;

    var findColByFieldName = function(fieldName) {
        var col = undefined;
        for (var i = 0; i < scheme.columns.length && !col; i++) {
            if (scheme.columns[i].fiendName == fieldName) {
                col = scheme.columns[i];
            }
        }


        return col;
    };

    this.getSchemeCol = function() {
        return schemeCol;
    };

    this.bindEvents = function() {
        if (this.rendered) {
            $('#' + htmlIdentifier).find('.lmlpushtablekeyer').bind('change', function() {
                return that.selectChanged(this);
            });
            $('#' + htmlIdentifier).find('.lmlpushtablecolumnaddaction').bind('click', function() {
                return that.appendRow()
            });

            for (var i = 0; i < scheme.columns.length; i++) {
                var col = scheme.columns[i];
                if (typeof col.influence !== 'undefined') {

                    (function(col) {
                        $('.lmlpushtablecolumnfield-' + col.fieldName).bind('change', function() {
                            var affectedField = $('.lmlpushtablecolumnfield-' + col.influence.fieldName);
                            var newValue = parseInt(affectedField.data("initvalue"));
                            switch (col.influence.eq) {
                                case "+":
                                    newValue += parseInt($(this).val());
                                    break;
                                case "-":
                                    newValue -= parseInt($(this).val());
                                    break;
                                case "*":
                                    newValue *= parseInt($(this).val());
                                    break;
                                case "/":
                                    newValue /= parseInt($(this).val());
                                    break;
                                case "=":
                                    newValue = $(this).val();
                                    break;
                            }

                            affectedField.val(newValue);
                        });
                    })(col);
                }
            }
        } else {
            throw "Tried to apply bindings on a PushTable that was not yet rendered. Identifier : " + this.htmlIdentifier;
        }

        this.selectChanged();
    };

    this.rowToHTML = function(row) {
        var _h = '<tr class="lmlpushtableaddedrow" id="' + row._rowID + '" data-value="' + row['_lmlid'] + '"><td>' +
            '<b>' + row['_title'] + '</b><input type="hidden" name="' + tableid + '[' + row._rowID + '][prodid]" value="' + row['_lmlid'] + '" /></td>';
        var validRow = true;
        var er = undefined;

        for (var key in row) {
            if (key[0] != "_") {
                if (schemeCol[key].autocomplete) {
                    // Check for column in templates
                    var livevarValue = livevars[schemeCol[key].autocomplete.datasource];
                    var required = schemeCol[key].required;
                    var isEmpty = row[key].trim() == "";
                    var foundObject = undefined;

                    if (isEmpty && !required) {
                        foundObject = new Object();
                        foundObject[schemeCol[key].autocomplete.keyName] = "-";
                    } else {
                        for (var i = 0; i < livevarValue.length; i++) {
                            if (livevarValue[i][schemeCol[key].autocomplete.keyValue] == row[key]) {
                                foundObject = livevarValue[i];
                                break;
                            }
                        }
                    }

                    if (foundObject) {
                        _h += '<td><span>' + foundObject[schemeCol[key].autocomplete.keyName] + '</span><input type="hidden" name="' +
                            tableid + '[' + row._rowID + '][' + key + ']" value="' + row[key] + '" /></td>';
                    } else {
                        validRow = false;
                        er = new Error("Invalid Row");
                        er.invalidRow = key;
                        break;
                    }
                } else {
                    _h += '<td><span>' + row[key].toString() + '</span><input type="hidden" name="' +
                        tableid + '[' + row._rowID + '][' + key + ']" value="' + row[key] + '" /></td>';
                }
            }
        }

        return validRow ? _h + '<td><button class="lmlpushtableremovebutton">Remove</button></td></tr>' : er;
    };

    this.removeDeleteRow = function(rowID) {
        $('#' + rowID).remove();
        delete rows[rowID];
        that.updateFooter();

        return false;
    };

    this.fillFromSource = function(sourceObj) {
        for (var i = 0; i < sourceObj.length; i++) {
            this.appendRow(sourceObj[i]);
        }
    }

    this.appendRow = function(sourceObj) {
        var row = new Object();
        row._rowID = "row" + Math.random().toString(36).slice(-12);

        if (sourceObj) {
            var readKey = scheme.key.readKey || scheme.key.keyValue;
            var keyIndex = sourceObj[readKey];
            var keyObject = datasrc[keyIndex];

            row._lmlid = keyObject[scheme.key.keyValue];
            row._title = keyObject[scheme.key.keyName];

            for (var k in sourceObj) {
                if (k != readKey) {
                    row[k] = sourceObj[k];
                }
            }
        } else {
            row['_lmlid'] = $('#' + htmlIdentifier).find('.lmlpushtablekeyer').val();
            row['_title'] = $('#' + htmlIdentifier).find('.lmlpushtablekeyer option:selected').html();

            $('#' + htmlIdentifier).find('.lmlpushtablecolumnfield:not(.lmlpushtablecasenotmet)').each(function(index, val) {
                var fieldname = $(this).data('fieldname');

                if ($(this).prop('autocomplete') == 'on') {
                    row[fieldname] = $('#' + $(this).attr('list')).find('option[value="' + $(this).val() + '"]').html() || $(this).val();
                } else {
                    row[fieldname] = $(this).val();
                }
            });
        }

        rows[row._rowID] = row;
        (function(rowID) {
            if (htmlRow instanceof Error) {
                var rowKey = htmlRow.invalidRow;
                // TODO : show error message
            } else {
                var htmlRow = that.rowToHTML(row);
                $('#' + htmlIdentifier).find('tbody').append(htmlRow)
                    .find('tr').last().find('.lmlpushtableremovebutton').bind('click', function() {
                        that.removeDeleteRow(rowID);
                    });
            }
        })(row._rowID);

        that.updateFooter();
        return false;
    };

    var findTemplateFieldFromDisplayCase = function(templateid, src) {
        var colTemp = scheme.columnTemplates[templateid];
        var dependsOn = colTemp.dependsOn;
        var valToVerify = src[dependsOn];
        var possibleFields = colTemp.fields;
        var fieldFound = undefined;
        var defaultField = undefined;

        for (var ctn = 0; ctn < possibleFields.length; ctn++) {
            var posFld = possibleFields[ctn];

            if (posFld.displayCase == valToVerify) {
                fieldFound = posFld;
            } else if (posFld.displayCase == "*") {
                defaultField = posFld;
            }
        }

        if (!fieldFound && defaultField) {
            fieldFound = defaultField;
        }

        return fieldFound;
    };

    this.selectChanged = function(select) {
        var key = $(select || ("#" + htmlIdentifier + " .lmlpushtablekeyer option:selected")).val();
        var src = datasrc[key];

        $('#' + htmlIdentifier).find('.lmlpushtablecolumnfield').each(function(index, val) {
            var dataKeyName = $(this).data('keyname');
            var defaultValue = $(this).data('defaultvalue');

            var displayif = $(this).data('displayif');

            if (typeof displayif !== 'undefined' && typeof window[displayif] == 'function') {
                if (window[displayif].apply(key, [key])) {
                    //Hide the selection
                    $(this).show();
                } else {
                    //Hide the selection
                    $(this).hide();
                }

            }

            $(this).val(dataKeyName ? src[dataKeyName] : defaultValue).data("initvalue", $(this).val());
        });

        $('#' + htmlIdentifier).find('.lmlpushtableheadertitlesrow .pushtablecolumntemplatereactive').each(function(index, th) {
            var foundField = findTemplateFieldFromDisplayCase($(th).data('templateid'), src);
            $(th).html(foundField ? (foundField.displayName || foundField.fieldName) : "-");
        });

        $('#' + htmlIdentifier).find('.lmlpushtableheaderfieldsrow .lmlpushtabletemplatereactiverow').each(function(index, th) {
            var foundField = findTemplateFieldFromDisplayCase($(th).data('templateid'), src);
            $(th).children().addClass('lmlpushtablecasenotmet');
            $('.lmlpushtablecolumnfield-' + foundField.fieldName).removeClass('lmlpushtablecasenotmet');
        });

        return false;
    };

    this.render = function() {
        this.rendered = true;
        return html;
    };

    this.updateFooter = function() {
        if (scheme.footer) {
            var table = $('#' + htmlIdentifier);
            table.find('tfoot tr td:gt(0)').each(function(index, col) {
                if (scheme.footer.sumIndexes.indexOf(index) !== -1) {
                    var colScheme = scheme.columns[index];
                    var total = 0;

                    for (var rowID in rows) {
                        total += parseInt(rows[rowID][colScheme.fieldName]);
                    }

                    $(col).html(total + (colScheme.prepend || ""))
                }
            });
        }

        return false;
    };

    this.init = function() {
        html += '<table id="' + tableid + '" class="lmlpushtable lmldatasourcetable" data-title="' + this.title + '"><thead><tr class="lmlpushtableheadertitlesrow"><th>' +
            scheme.key.displayName + '</th>'

        for (var i = 0; i < scheme.columns.length; i++) {
            html += '<th class="pushtablecolumnheader' +
                (scheme.columns[i].dataType == "template" ? " pushtablecolumntemplatereactive" : "") +
                '" ' + (scheme.columns[i].templateid ? 'data-templateid="' + scheme.columns[i].templateid + '"' : "") +
                '>' + (scheme.columns[i].displayName || "") + "</th>";
        }

        html += '<th></th></tr><tr class="lmlpushtableheaderfieldsrow"><th><select class="lmlpushtablekeyer">';

        for (var key in dataSource) {
            var dat = dataSource[key];
            html += '<option class="lmlpushtableoptionkey" value="' + dat[scheme.key.keyValue] + '">' + dat[scheme.key.keyName] + '</option>';
            selectkeys[dat[scheme.key.keyValue]] = dat[scheme.key.keyName];
        }

        html += '</select></th>';

        var addHeaderField = function(col) {
            html += '<input class="lmlpushtablecolumnfield lmlpushtablecolumnfield-' + col.fieldName + (col.displayCase ? " lmlpushtablecasenotmet lmlpushtabletemplatereactive" : "") + '" type="' + (col.dataType || "text") +
                '" data-fieldname="' + col.fieldName +
                (col.keyName ? '" data-keyname="' + col.keyName : "") +
                (col.displayCase ? '" data-displaycase="' + col.displayCase : "") +
                (col.defaultValue ? '" data-defaultvalue="' + col.defaultValue : "");

            if (col.autocomplete) {
                html += '" list="' + tableid + col.fieldName + 'list" autocomplete="on" data-acsource="' + col.autocomplete.datasource + '"';
            }

            html += '" />';

            if (col.autocomplete && col.autocomplete.datasource) {
                var datVar = livevars[col.autocomplete.datasource];

                if (datVar && datVar.length) {
                    html += '<datalist id="' + tableid + col.fieldName + 'list">';

                    for (var j = 0; j < datVar.length; j++) {
                        html += '<option  value="' + datVar[j][col.autocomplete.keyName] + '">' + datVar[j][col.autocomplete.keyValue] + '</option>';
                    }

                    html += '</datalist>';
                }
            }
        }

        for (var i = 0; i < scheme.columns.length; i++) {
            var col = scheme.columns[i];
            schemeCol[col.fieldName] = col;

            if (col.dataType == "template") {
                html += '<th class="lmlpushtabletemplatereactiverow" data-templateid="' + col.templateid + '">';

                var colTemplate = scheme.columnTemplates[col.templateid];
                colTemplate.fields.forEach(function(tempField) {
                    addHeaderField(tempField);
                });
            } else {
                html += "<th>";
                addHeaderField(col);
            }
            html += "</th>"
        }

        for (var tempKey in scheme.columnTemplates) {
            var tempCols = scheme.columnTemplates[tempKey];
            for (var j = 0; j < tempCols.fields.length; j++) {
                schemeCol[tempCols.fields[j].fieldName] = tempCols.fields[j];
            }
        }

        html += '<th><button class="lmlpushtablecolumnaddaction">Add</button></th>' +
            '</tr></thead><tbody></tbody>';

        if (scheme.footer) {
            html += '<tfoot><tr><td>' + scheme.footer.title + '</td>';

            for (var i = 0; i < scheme.columns.length; i++) {
                if (scheme.footer.sumIndexes.indexOf(i) !== -1) {
                    html += '<td>0' + (scheme.columns[i].prepend || "") + '</td>'
                } else {
                    html += '<td></td>';
                }
            }

            html += '<td></td></tr></tfoot>';
        }

        html += '</table>';

        document.addEventListener(LiliumEvents.livevarsRendered.name, function() {
            that.bindEvents();
        });
    };

    this.init();
};
