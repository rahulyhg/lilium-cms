{#config;forms;theme}
{$
	baseurl = config.default.server.url;
$}

var CKEditor = function() {
	var picture_id_url = {};
	var selectedPicture;
	var pictures = [];
    var supportedEmbed = ["instagram", "facebook", "youtube", "soundcloud"];    
    var that = this;

    var ckIsUrl = function(s) {
        var regexp = /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i;
        return regexp.test(s);
    }

    var embedCurIndex = 0;

    var ckBindEmbedPaste = function(ev) {
        ev.editor.on('paste', function (evt) {
            if(evt.data.type == "text") {
                var vdata = evt.data.dataValue;
                var embedFound = false;

                if (ckIsUrl(vdata)) {
                    // Look for embed
                    for (var domainid in supportedEmbed) {
                        var domain = supportedEmbed[domainid];
    
                        if (vdata.indexOf(domain) !== -1) {
                            switch (domain) {
                                case "instagram":
                                    var rand = embedCurIndex++;
                                    (function(rand, evt) {
                                        evt.data.type = "html";
                                        evt.data.dataValue = '<div class="ck-temp-spacer"></div><div id="instagramEmbed'+
                                            rand+
                                            '" class="ck-embed-placeholder mediaInsertPlaceholder">[Loading Instagram embed]</div>';

                                        $.get('{=config.default.server.url}/admin/embed?async=*&type=instagram&url=' + vdata, function(html) {
                                            evt.editor.document.$.querySelector('#instagramEmbed' + rand).outerHTML = html;
                                            evt.editor.document.$.querySelector('.ck-temp-spacer').outerHTML = "";
                                        });
                                    })(rand, evt);
                                    break;
    
                                case "youtube":
                                    evt.data.type = "html";
                                    evt.data.dataValue = '<iframe allowfullscreen="" frameborder="0" src="'+
                                        vdata.replace("watch?v=", 'embed/') +
                                        '" class="ck-embed-video"></iframe>';
                                    break;
    
                                case "facebook":
                                    if (vdata.indexOf('video') !== -1) {
                                        evt.data.type = "html";
                                        evt.data.dataValue = '<iframe src="https://www.facebook.com/plugins/video.php?href='+
                                            vdata + 
                                            '&show_text=0" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true" class="ck-embed-video"></iframe>';
                                    break;
                                    }
                            }
    
                            embedFound = true;
                            break;
                        }
                    }
                } else if (vdata.indexOf("<iframe")) {
                    evt.data.type = "html";
                }
            }
        });
    };

    this.initEditor = function() {
        if (typeof CKEDITOR === 'undefined') {
            return;
        }

        CKEDITOR.basePath = '{=baseurl}/bower/ckeditor/';

        CKEDITOR.on('instanceReady', function(ev) {
            // Output paragraphs as <p>Text</p>.
            this.document.appendStyleSheet('/compiled/admin.css');
            ckBindEmbedPaste(ev);
        });
        CKEDITOR.config.entities = false;
        CKEDITOR.config.height = 360;
        CKEDITOR.config.extraPlugins = 'image-finder,youtube,image-editor';
        CKEDITOR.config.fillEmptyBlocks = false;
        CKEDITOR.config.autoParagraph = false;
        CKEDITOR.config.entities_greek = false;
        CKEDITOR.config.entities_latin = false;
        CKEDITOR.config.removeButtons = 'image';
        CKEDITOR.config.removePlugins = 'image';    
        CKEDITOR.config.allowedContent = true;
        CKEDITOR.config.contentsCss = '/compiled/theme/ckeditor.css';
        CKEDITOR.config.skin = "BootstrapCK4,/bower/BootstrapCK4-Skin/skins/bootstrapck/";

        CKEDITOR.plugins.addExternal('youtube', '/bower/ckeditor-youtube-plugin/youtube/');


        //CKEDITOR plugin to choose picture
        CKEDITOR.dialog.add("imagebrowserDialog", function(editor) {
            return {
                title: "Add an image to the article",
                minWidth: 800,
                minHeight: 400,
                maxWidth: 800,
                maxHeight: 400,
                contents: [{
                    id: "tab-step1",
                    label: "Browse for images",
                    elements: [{
                        type: "html",
                        html: '<div id="picture-list"></div><div class="picture-list-form">{=forms.render('ckimagecredit')}</div>'
                    }]
                }, {
                    id: "tab-step2",
                    label: "Upload an image",
                    elements: [{
                        type: "html",
                        html: '<div id="image-upload"></div><div class="picture-upload-form">{=forms.render('ckimagecredit')}</div>'
                    }]
                }],
                onShow: function() {
					dialog = this;  

					// Bypass the bug where tabs are disabled if they only contain html
					$('.cke_dialog_tabs > a').removeClass('cke_dialog_tab_disabled');

                    // Check if pictures are loaded first
                    if (pictures.length == 0) {
                        //Load pictures
                        $.get("/livevars", {
                            vars: JSON.stringify([{
                                varname: "media",
                                "params": {}
                            }])
                        }, function(data) {
                            pictures = data.livevars.media;
                            if (pictures) {
                                pictures.forEach(function(picture, index) {
                                    picture_id_url[picture._id] = picture.url;

                                    $('#picture-list').prepend('<img id="' + picture._id + '" src="' + picture.sizes.thumbnail.url + '">');
                                });
                            }

                        });
                    }

					$('#image-upload').html('<h1>Upload a media</h1>{=forms.render('media_create')}<div class="bar"><div class="progress"><div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div></div></div>');
					watchForSubmition();
                },
                onOk: function(e) {

                if ($('.ck-image-credit-form input[name="ckimagecreditname"]').val() < 2){
                        $('.ck-image-credit-form input[name="ckimagecreditname"]').focus();
                        e.preventDefault();
                       } else if ($('.ck-image-credit-form input[name="ckimagecrediturl"]').val() < 2){
                        $('.ck-image-credit-form input[name="ckimagecrediturl"]').focus();
                        e.preventDefault();
                } else if ($('.cke_dialog_tab_selected').index() == 0) {

                        if (typeof selectedPicture !== 'undefined') {
                            var htmlPlaceholder = createImagePlaceholder(editor);                            

                            var id = $(selectedPicture).attr('id');
                            var img = editor.document.createElement('img');

                            insertImageInEditor(
                                '{=config.default.server.url}/uploads/' + picture_id_url[id],
                                $('.ck-image-credit-form input[name="ckimagecreditname"]').val(),
                                $('.ck-image-credit-form input[name="ckimagecrediturl"]').val(),
                                editor, 
                                htmlPlaceholder
                            );
                        }
                    } else if ($('.cke_dialog_tab_selected').index() == 1) {
                        if ($('#image-upload input[type="file"]').val() != "") {
                            triggerCKUpload(undefined, editor);
                        }
                    }
                }
            }
        })
        CKEDITOR.plugins.add('image-editor', {
          init: function(editor) {
            editor.addCommand('editcommand', new CKEDITOR.dialogCommand('imagebrowserDialog'));
            if (editor.addMenuItem) {
              // A group menu is required
              // order, as second parameter, is not required
              editor.addMenuGroup('edit');
             
              // Create a manu item
              editor.addMenuItem('edititem', {
                label: 'Edit Image',
                command: 'editcommand',
                group: 'edit'
              });
            }
              
            if (editor.contextMenu) {
              editor.contextMenu.addListener(function(element, selection) {
               if ( element.getAscendant( 'img', true ) ) {
                return { edititem: CKEDITOR.TRISTATE_ON };
                }
              });
            }
          }
        });

        CKEDITOR.plugins.add("image-finder", {
            init: function(editor) {
                editor.addCommand('imagebrowser', { exec : that.castImageSelector });
                editor.ui.addButton('imgbrowser', {
                    label: 'Insert Image',
                    command: 'imagebrowser',
                    toolbar: 'insert'
                });
            }
        });
    };

    this.generateImageWrapper = function(imgobj) {
        var wrapper = document.createElement('div');
        var img = document.createElement('img');
        var creditname = document.createElement('span');
        var crediturl = document.createElement('a');

        img.dataset.iid = imgobj._id;
        img.dataset.credit = {
            name : imgobj.artistname,
            url : imgobj.artisturl
        };
        img.setAttribute('src', imgobj.sizes.content ? imgobj.sizes.content.url : "{=config.default.server.url}/uploads/" + imgobj.url);
        img.classList.add("lml-content-image");

        creditname.innerHTML = "Via ";
        crediturl.innerHTML = imgobj.artistname;
        crediturl.setAttribute("href", imgobj.artisturl);
        crediturl.setAttribute('target', '_blank');

        wrapper.classList.add("lml-image-wrapper");
        wrapper.classList.add("lml-content-image-wrapper");
        wrapper.appendChild(img);
        wrapper.appendChild(creditname);
        wrapper.appendChild(crediturl);

        return wrapper;
    };

    this.validateImageWithoutCredit = function(imgobj) {
        
    };

    this.insertImageInEditor = function(e, imgobj) {
        if (typeof imgobj == "object") {
            if (!imgobj.artistname || !imgobj.artisturl || imgobj.artistname.trim() == "" || imgobj.artisturl.trim() == "") {
                that.validateImageWithoutCredit(imgobj);
            } else {
                var url = imgobj.sizes.content ? imgobj.sizes.content.url : ("{=config.default.server.url}/uploads/" + imgobj.url);
                e.insertElement(CKEDITOR.dom.element.get(that.generateImageWrapper(imgobj)));
            }
        } else if (imgobj === -1) {
            
        }
    };

    this.castImageSelector = function(e) {
        var sel = e.getSelectedHtml();
        var imageurl;

        if (sel) {
            if (sel.nodeName == "IMG") {
                imgurl = sel.getAttribute("src");
            } else {
                var maybeimg = sel.$.querySelector("img");
                if (maybeimg) {
                    imgurl = maybeimg.getAttribute("src");
                }
            }
        }

        liliumcms.imagepicker.cast(function(imgo) {that.insertImageInEditor(e, imgo);}, undefined, {url : imageurl, withcredit : true});
    }

    this.parseDocument = function() {
        if ($('[ckeditor]').ckeditor) {
            $('[ckeditor][data-readonly=true]').ckeditor(function() {

            }, {
                readOnly: true
            })
            $('[ckeditor]').ckeditor();
        }

        $('body').on('click', '#picture-list img', function(event) {
            var elem = event.target;
            if (typeof selectedPicture !== 'undefined') {
                $(selectedPicture).removeClass('selectedPicture');
            }

            selectedPicture = elem;
            $(selectedPicture).addClass('selectedPicture');
        });
    };

    var insertImageInEditor = function(src, creditname, crediturl, editor, htmlPlaceholder) {
        var mustInsert = typeof htmlPlaceholder === 'undefined';

        var img = editor.document.createElement('img');
        img.setAttribute('src', src);

        var em = editor.document.createElement('em');
        em.setHtml('Photo cred - ');

        var credits = editor.document.createElement('a');
        credits.setHtml(creditname);
        credits.setAttribute('href', crediturl);

        if (mustInsert) {
            htmlPlaceholder = editor.document.createElement('span');
        } 
           
        htmlPlaceholder.setHtml(""); 
        htmlPlaceholder.append(img);
        htmlPlaceholder.append(em);
        htmlPlaceholder.append(credits);

        if (mustInsert) {
            editor.insertElement(htmlPlaceholder);
        }
    };

    var createImagePlaceholder = function(editor) {
        var htmlPlaceholder = editor.document.createElement('span');
        htmlPlaceholder.addClass('lmlcontentimage');
        htmlPlaceholder.setHtml('<div class="mediaInsertPlaceholder">Please wait, inserting image</div>');
        editor.insertElement(htmlPlaceholder);

        return htmlPlaceholder;
    };

    var triggerCKUpload = function(e, editor) {
			if (typeof selectedPicture !== 'undefined') {
				$(selectedPicture).removeClass('selectedPicture');
				selectedPicture = undefined;
			}

            var htmlPlaceholder = createImagePlaceholder(editor);
            var imageCreditName = $('.picture-upload-form input[name="ckimagecreditname"]').val();
            var imageCreditURL =  $('.picture-upload-form input[name="ckimagecrediturl"]').val();

			var bar = $('.progress .progress-bar');
			bar.removeClass('progress-bar-danger');
			bar.removeClass('progress-bar-success');

			if (e && e.preventDefault) {
                e.preventDefault();
            }

			$('.progress').show();

			var fileInput = $('#image-upload input:File')[0];

			var file = fileInput.files[0];
			var form_name =  $("#image-upload input[name='form_name']").val();
			var formData = new FormData();

			formData.append($(fileInput).attr('name'), file);
			formData.append('form_name', form_name);

			var req = new XMLHttpRequest();
			req.open('post', '{=baseurl}/admin/media/upload', true);

			req.upload.onprogress = function(e) {
				if (e.lengthComputable) {
					var uploadPerc = (e.loaded / e.total) * 100 > 40 ? 40 :(e.loaded / e.total) * 100 ;
					bar.css('width', uploadPerc + '%');
					if (uploadPerc >= 40) {
						bar.text('Resizing pictures...');
					} else {
						bar.text('Uploading...');
					}

				}
			};

			req.onerror = function(e) {
				console.log(e);
			};

			req.onload = function(e) {
				var res = JSON.parse(e.target.response);
				if (res.success) {
					bar.css('width', '100%');
					bar.addClass('progress-bar-success');
					bar.text('Upload Success!');

					liliumcms.notify({message: 'Upload Success', type: 'success', title: 'Media'});
					// Insert uploaded picture
					picture_id_url[res.picture._id] = res.picture.url;
					$('#picture-list').prepend('<img id="' + res.picture._id + '" src="' + res.picture.sizes.thumbnail.url + '">');
        
                    insertImageInEditor(
                        '{=config.default.server.url}/uploads/' + res.picture.url, 
                        imageCreditName, 
                        imageCreditURL,
                        editor,
                        htmlPlaceholder
                    );
				} else {
					bar.addClass('progress-bar-danger');
					liliumcms.notify({message: 'There was a problem uploading your media', type: 'danger', title: 'Media'})
				}

			};

			req.send(formData);
    };

	/**
	 * Image upload
	 */
	var watchForSubmition = function () { 
		$('#image-upload input[type="submit"]').on('click', function(e) {e.preventDefault();});
	};
};
