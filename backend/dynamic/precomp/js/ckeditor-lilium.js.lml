{#config;forms;theme}
{$
	baseurl = config.default.server.url;
$}

var CKEditor = function() {
	var picture_id_url = {};
	var selectedPicture;
	var pictures = [];
    var supportedEmbed = ["instagram.c", "facebook.c", "youtube.", "soundcloud.", "imgur"];    
    var that = this;

    var ckIsUrl = function(s) {
        var regexp = /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i;
        return regexp.test(s);
    }

    var embedCurIndex = 0;

    var ckBindEmbedPaste = function(ev) {
        log('CKEditor', "Binding paste event");
        ev.editor.on('paste', function (evt) {
            log('CKEditor', "Paste event caught with data type : " + evt.data.type);
            if (true || evt.data.type == "text") {
                var vdata = evt.data.dataValue;
                var embedFound = false;

                log('CKEditor', "Pasted content is text; looking for URLs");
                if (ckIsUrl(vdata)) {
                    log('CKEditor', "Paste : URL detected");
                    // Look for embed
                    var ffound = false;
                    for (var domainid in supportedEmbed) {
                        var domain = supportedEmbed[domainid];
                        log('CKEditor', "Found domain in pasted text : " + domain);
    
                        if (vdata.indexOf(domain) !== -1) {
                            switch (domain) {
                                case "instagram":
                                    var rand = embedCurIndex++;
                                    (function(rand, evt) {
                                        evt.data.type = "html";
                                        evt.data.dataValue = '<div class="ck-temp-spacer"></div><div id="instagramEmbed'+
                                            rand+
                                            '" class="ck-embed-placeholder mediaInsertPlaceholder">[Loading Instagram embed]</div><p></p>';

                                        $.get('{=config.default.server.url}/admin/embed?async=*&type=instagram&url=' + vdata, function(html) {
                                            evt.editor.document.$.querySelector('#instagramEmbed' + rand).outerHTML = html;
                                            evt.editor.document.$.querySelector('.ck-temp-spacer').outerHTML = "";
                                        });
                                    })(rand, evt);
                                    ffound = true;
                                    break;
    
                                case "youtube":
                                    evt.data.type = "html";
                                    evt.data.dataValue = '<iframe allowfullscreen="" frameborder="0" src="'+
                                        vdata.replace("watch?v=", 'embed/') +
                                        '" class="ck-embed-video"></iframe>';
                                    ffound = true;
                                    break;

                                case "imgur":
                                    var imgid = "";
                                    var dotsplit = vdata.split('.');
                                    var idcont = dotsplit[dotsplit.length - 2];

                                    if (idcont.indexOf("imgur") != -1) {
                                        imgid = vdata.split('/').pop();
                                    } else {
                                        imgid = idcont.split('/').pop();
                                    }

                                    evt.data.type = "html";
                                    evt.data.dataValue = '<blockquote class="imgur-embed-pub" lang="en" data-id="'+imgid+'"><a href="//imgur.com/'+imgid+'">'+vdata+'</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>';

                                    ffound = true;
                                    break;
    
                                case "facebook":
                                    if (vdata.indexOf('video') !== -1) {
                                        evt.data.type = "html";
                                        evt.data.dataValue = '<iframe src="https://www.facebook.com/plugins/video.php?href='+
                                            vdata + 
                                            '&show_text=0" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true" class="ck-embed-video"></iframe>';
                                    break;
                                    }
                                    ffound = true;
                                    break;

                                default:
                            }
    
                            embedFound = true;
                            break;
                        }

                        if (!embedFound) {
                            var selection = this.getSelection().getSelectedText();
                            var markup = '<a href="'+vdata+'">'+(selection == "" ? vdata : selection)+'</a>';

                            evt.data.type = 'html';
                            evt.data.dataValue = markup;
                        }
                    }
                } else if (vdata.indexOf("<iframe")) {
                    evt.data.type = "html";
                }
            }
        });
    };

    this.insertPage = function(e) {
        var lmlpage = e.document.createElement('lml-page');
        e.insertElement(lmlpage);
    };

    this.castTwitterSelector = function(e) {
        window["lml-insert-twitter-modal_accept"] = function() {
            var twurl = d.id('insert-twitter-embed').value;
            liliumcms.lmldom.get("{=config.default.server.url}/admin/embed", {
                spinflower : true,
                params : {
                    async : "*",
                    type : "twitter",
                    as : "json",
                    url : twurl
                }
            }, function(resp) {
                if (typeof resp != "object") {
                    try {
                        resp = JSON.parse(resp);
                    } catch (err) {
                        return liliumcms.notify({ 
                            type : "error", 
                            message : "Twitter refused to embed the provided URL. Make sure it is complete and that the Tweet was not deleted.", 
                            delay : 10000,
                            title : "Embed error" 
                        });
                    }
                }

                var wrap = document.createElement('div');
                wrap.innerHTML = resp.html;

                var parag = e.document.createElement('blockquote');
                var blockquote = wrap.querySelector('blockquote');

                parag.$.innerHTML = blockquote.innerHTML;
                parag.$.className = blockquote.className; 
                e.insertElement(parag);

                liliumcms.modals.get('lml-insert-twitter-modal').dismiss();
            });
        };

        liliumcms.modals.get('lml-insert-twitter-modal').cast();

    };

    this.castInstagramSelector = function(e) {
        window["lml-insert-instagram-modal_accept"] = function() {
            var igurl = d.id('insert-instagram-embed').value;
            liliumcms.lmldom.get("{=config.default.server.url}/admin/embed", {
                spinflower : true,
                params : {
                    async : "*",
                    type : "instagram",
                    as : "json",
                    url : igurl
                }
            }, function(resp) {
                if (typeof resp != "object") {
                    try {
                        resp = JSON.parse(resp);
                    } catch (err) {
                        return liliumcms.notify({ 
                            type : "error", 
                            message : "Instagram refused to embed the provided URL. Make sure that the user profile is public and that the image still exists.", 
                            delay : 10000,
                            title : "Embed error" 
                        });
                    }
                }

                var wrap = document.createElement('div');
                wrap.innerHTML = resp.markup;

                var parag = e.document.createElement('p');
                while (wrap.firstElementChild) {
                    parag.$.appendChild(wrap.firstElementChild);
                }
                
                e.insertElement(parag);
                liliumcms.modals.get('lml-insert-instagram-modal').dismiss();
            });
        };

        liliumcms.modals.get('lml-insert-instagram-modal').cast();
    };

    this.initEditor = function() {
        log('CKEditor', 'Initializing CKEditor global object');
        if (typeof CKEDITOR === 'undefined') {
            return;
        }

        CKEDITOR.basePath = '{=baseurl}/bower/ckeditor/';

        CKEDITOR.on('instanceReady', function(ev) {
            // Output paragraphs as <p>Text</p>.
            this.document.appendStyleSheet('/compiled/admin.css');
            ckBindEmbedPaste(ev);

            ev.editor.document.on('copy', function(e) {
                liliumcms.localclip.handleCopy(e, this.$);
            });
        });
        CKEDITOR.config.entities = false;
        CKEDITOR.config.height = 360;
        CKEDITOR.config.extraPlugins = 'lml-image-finder,lml-insert-instagram,lml-insert-twitter';
        CKEDITOR.config.fillEmptyBlocks = false;
        CKEDITOR.config.autoParagraph = false;
        CKEDITOR.config.entities_greek = false;
        CKEDITOR.config.entities_latin = false;
        CKEDITOR.config.removeButtons = 'image,SpecialChar,Table';
        CKEDITOR.config.removePlugins = 'image,liststyle,scayt,menubutton,specialchar,contextmenu,tabletools,tableselection';
        CKEDITOR.config.disableNativeSpellChecker = false;
        CKEDITOR.config.allowedContent = true;
        CKEDITOR.config.extraAllowedContent = 'ad,lml-page,lml-ad,lml-related';
        CKEDITOR.config.contentsCss = '/compiled/theme/ckeditor.css';
        CKEDITOR.config.skin = "BootstrapCK4,/bower/BootstrapCK4-Skin/skins/bootstrapck/";

        var validUrlRegex = /^(https?|ftp):\/\/(-\.)?([^\s\/?\.#-]+\.?)+(\/[^\s]*)?[^\s\.,]$/ig,
            doubleQuoteRegex = /"/g;

        CKEDITOR.plugins.add("lml-image-finder", {
            init: function(editor) {
                editor.addCommand('lmlimgbrowser', { exec : that.castImageSelector });
                editor.ui.addButton('lmlimgbrowser', {
                    label: 'Insert Image',
                    command: 'lmlimgbrowser',
                    toolbar: 'insert',
                    icon : "{=config.default.server.url}/static/media/ck-image-icon.png"
                });
            }
        });

        CKEDITOR.plugins.add('lml-insert-instagram', {
            init: function(editor) {
                editor.addCommand('lmlpopupinstagram', { exec : that.castInstagramSelector });
                editor.ui.addButton('lmlpopupinstagram', {
                    label : "Insert image from Instagram",
                    command: 'lmlpopupinstagram',
                    toolbar : 'insert', 
                    icon : "{=config.default.server.url}/static/media/ck-instagram-icon.png"
                });
            }
        });

        CKEDITOR.plugins.add('lml-insert-twitter', {
            init: function(editor) {
                editor.addCommand('lmlpopuptwitter', { exec : that.castTwitterSelector });
                editor.ui.addButton('lmlpopuptwitter', {
                    label : "Insert Tweet",
                    command: 'lmlpopuptwitter',
                    toolbar : 'insert', 
                    icon : "{=config.default.server.url}/static/media/ck-twitter-icon.png"
                });
            }
        });

        log('CKEditor', 'Done initializing');
    };

    this.generateImageWrapper = function(imgobj) {
        var wrapper = document.createElement('p');
        var img = document.createElement('img');
        var crediturl = document.createElement('a');

        img.setAttribute('src', "{=config.default.server.url}/" + imgobj.fullurl);
        img.dataset.iid = imgobj._id;
        img.classList.add("lml-content-image");
        img.classList.add("lml-instagram-embed-2");
        img.dataset.width = imgobj.size.width;
        img.dataset.height = imgobj.size.height;

        crediturl.setAttribute("href", imgobj.artisturl);
        crediturl.setAttribute('target', '_blank');
        crediturl.textContent = "Via " + imgobj.artistname;

        wrapper.appendChild(img);
        wrapper.appendChild(crediturl);

        return wrapper;
    };

    this.validateImageWithoutCredit = function(imgobj) {
        
    };

    this.insertImageInEditor = function(e, imgs) {
        var keys = Object.keys(imgs);

        for (var i = 0; i < keys.length; i++) {
            var imgobj = imgs[keys[i]];
            if (typeof imgobj == "object") {
                var url = ("{=config.default.server.url}/uploads/" + imgobj.url);
                e.insertElement(CKEDITOR.dom.element.get(that.generateImageWrapper(imgobj)));
            } else if (imgobj === -1) {
                
            }
        }
    };

    this.castImageSelector = function(e) {
        var sel = e.getSelectedHtml();
        var imageurl;

        if (sel) {
            if (sel.nodeName == "IMG") {
                imgurl = sel.getAttribute("src");
            } else {
                var maybeimg = sel.$.querySelector("img");
                if (maybeimg) {
                    imgurl = maybeimg.getAttribute("src");
                }
            }
        }

        liliumcms.imagepicker.cast(function(imgo) {that.insertImageInEditor(e, imgo);}, undefined, {url : imageurl, withcredit : true, multiple : true});
    }

    this.parseDocument = function() {
        if ($('[ckeditor]').ckeditor) {
            $('[ckeditor][data-readonly=true]').ckeditor(function() {

            }, {
                readOnly: true
            })
            $('[ckeditor]').ckeditor();
        }
    };

    var insertImageInEditor = function(src, creditname, crediturl, editor, htmlPlaceholder) {
        var mustInsert = typeof htmlPlaceholder === 'undefined';

        var img = editor.document.createElement('img');
        img.setAttribute('src', src);

        var em = editor.document.createElement('em');
        em.setHtml('Photo cred - ');

        var credits = editor.document.createElement('a');
        credits.setHtml(creditname);
        credits.setAttribute('href', crediturl);

        if (mustInsert) {
            htmlPlaceholder = editor.document.createElement('span');
        } 
           
        htmlPlaceholder.setHtml(""); 
        htmlPlaceholder.append(img);
        htmlPlaceholder.append(em);
        htmlPlaceholder.append(credits);

        if (mustInsert) {
            editor.insertElement(htmlPlaceholder);
        }
    };

    var createImagePlaceholder = function(editor) {
        var htmlPlaceholder = editor.document.createElement('span');
        htmlPlaceholder.addClass('lmlcontentimage');
        htmlPlaceholder.setHtml('<div class="mediaInsertPlaceholder">Please wait, inserting image</div>');
        editor.insertElement(htmlPlaceholder);

        return htmlPlaceholder;
    };

    var triggerCKUpload = function(e, editor) {
			if (typeof selectedPicture !== 'undefined') {
				$(selectedPicture).removeClass('selectedPicture');
				selectedPicture = undefined;
			}

            var htmlPlaceholder = createImagePlaceholder(editor);
            var imageCreditName = $('.picture-upload-form input[name="ckimagecreditname"]').val();
            var imageCreditURL =  $('.picture-upload-form input[name="ckimagecrediturl"]').val();

			var bar = $('.progress .progress-bar');
			bar.removeClass('progress-bar-danger');
			bar.removeClass('progress-bar-success');

			if (e && e.preventDefault) {
                e.preventDefault();
            }

			$('.progress').show();

			var fileInput = $('#image-upload input:File')[0];

			var file = fileInput.files[0];
			var form_name =  $("#image-upload input[name='form_name']").val();
			var formData = new FormData();

			formData.append($(fileInput).attr('name'), file);
			formData.append('form_name', form_name);

			var req = new XMLHttpRequest();
			req.open('post', '{=baseurl}/admin/media/upload', true);

			req.upload.onprogress = function(e) {
				if (e.lengthComputable) {
					var uploadPerc = (e.loaded / e.total) * 100 > 40 ? 40 :(e.loaded / e.total) * 100 ;
					bar.css('width', uploadPerc + '%');
					if (uploadPerc >= 40) {
						bar.text('Resizing pictures...');
					} else {
						bar.text('Uploading...');
					}

				}
			};

			req.onerror = function(e) {
				console.log(e);
			};

			req.onload = function(e) {
				var res = JSON.parse(e.target.response);
				if (res.success) {
					bar.css('width', '100%');
					bar.addClass('progress-bar-success');
					bar.text('Upload Success!');

					liliumcms.notify({message: 'Upload Success', type: 'success', title: 'Media'});
					// Insert uploaded picture
					picture_id_url[res.picture._id] = res.picture.url;
					$('#picture-list').prepend('<img id="' + res.picture._id + '" src="' + res.picture.sizes.thumbnail.url + '">');
        
                    insertImageInEditor(
                        '{=config.default.server.url}/uploads/' + res.picture.url, 
                        imageCreditName, 
                        imageCreditURL,
                        editor,
                        htmlPlaceholder
                    );
				} else {
					bar.addClass('progress-bar-danger');
					liliumcms.notify({message: 'There was a problem uploading your media', type: 'danger', title: 'Media'})
				}

			};

			req.send(formData);
    };

	/**
	 * Image upload
	 */
	var watchForSubmition = function () { 
		$('#image-upload input[type="submit"]').on('click', function(e) {e.preventDefault();});
	};
};
