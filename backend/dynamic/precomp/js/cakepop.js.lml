{#config}

var CAKEPOP_ALLOWED_ACTIONS = {
    "send" : { displayname : "Send", action : "send" },
    "dismiss" : { displaylane : "Dismiss", action : "dismiss" }
};

var Cakepop = function() {
    var self = this;
    this.checkForNew = function() {
        
    };

    this.collectAndSend = function(nodata) {
        
    };

    this.handleAction = function(e) {
        var actionname = e.target.dataset.action;

        if (actionname == "send") {
            self.collectAndSend();
        } else {
            self.collectAndSend(false);
        }
    };

    this.createActionButton = function(act) {
        if (act) {
            var actionname = act.action;
            var displayname = act.displayname;

            var button = document.createElement('button');
            button.textContent = displayname;
            button.dataset.action = actionname;
            button.className = "cakepop-action cakepop-action-" + actionname;

            button.addEventListener('click', this.handleAction);

            return button;
        }
    };
    
    this.fill = function(popobj) {
        var actions = document.getElementById("cakepop-actions");
        var elHTML = document.getElementById("cakepop-html");
        var elContent = document.getElementById("cakepop-content");

        self.currentid = popobj._id;

        if (popobj.html) {
            elHTML.innerHTML = popobj.html;
            elHTML.style.display = "block";

            elContent.innerHTML = "";
            elContent.parentElement.style.display = "none";
        } else {
            elHTML.innerHTML = "";
            elHTML.style.display = "none";

            elContent.innerHTML = popobj.content;
            elContent.parentElement.style.display = "block";
        }

        document.getElementById("cakepop-stylesheet").textContent = popobj.stylesheet || "";
        
        while (actions.firstElementChild) { actions.firstElementChild.remove(); }
        if (popobj.actions) for (var i = 0; i < popobj.actions; i++) {
            var act = this.createActionButton( CAKEPOP_ALLOWED_ACTIONS[ popobj.actions[i] ] );
            if (act) {
                actions.appendChild(act);
            }
        }

    }; 

    this.cast = function() {
        var wrap = document.getElementById('cakepop');
        wrap.style.display = "block";
        setTimeout(function() {
            var card = document.getElementById('cakepop-wrapper');
            var cardheight = card.getBoundingClientRect().height;
            var screenheight = window.innerHeight;
            var top = (screenheight / 2) - (cardheight / 2);

            if (top < 100) { top = 100; }
            card.style.top = top + "px";

            wrap.classList.add('shown');
        }, 20);

        self.hideIcon();
    };

    this.dismiss = function() {
        var wrap = document.getElementById('cakepop');
        wrap.classList.remove('shown');
        setTimeout(function() {
            wrap.style.display = "none";
            document.getElementById("cakepop-stylesheet").textContent = "";
        }, 200);
    };

    this.showIcon = function() {
        document.getElementById('topbar-cakepop').style.display = "block";
    };

    this.hideIcon = function() {
        document.getElementById('topbar-cakepop').style.display = "none";
    };

    this.read = function() {
        liliumcms.lmldom.post({id : self.currentid}, "{=config.default.server.url}/admin/cakepop/read", function(resp) {
            self.serverResponded = resp && !!resp.delicious;
        });
    };

    this.initWithLivevar = function() {
        var latest = liliumcms.livevars.retrieveVar('cakepop.latests', true);
        if (latest.found) {
            var pop = latest.cakepop;
            self.fill(pop);
            self.showIcon();
        }

        document.getElementById('topbar-cakepop').addEventListener('click', function() {
            self.cast();
            self.read();
        });
    };

    this.construct = function() {
        var cpWrap = document.getElementById('cakepop');
        cpWrap.addEventListener('click', function(ev) {
            if (ev.target === cpWrap) {
                liliumcms.cakepop.dismiss();
            }
        });
    };

    self.construct();
};
