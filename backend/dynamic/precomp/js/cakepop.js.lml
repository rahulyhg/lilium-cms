{#config}

var CAKEPOP_ALLOWED_ACTIONS = {
    "send" : { displayname : "Send", action : "send" },
    "dismiss" : { displaylane : "Dismiss", action : "dismiss" }
};

var CAKEPOP_DEFAULT_ACTION = {
    identifier : "dismiss",
    color : "black",
    displayname : "Dismiss"
};

var CAKEPOP_TIMER_MS = 1000 * 60 * 30;

var Cakepop = function() {
    var self = this;
    this.checkForNew = function() {
        !self.visible && liliumcms.livevars.getSingleLivevar("cakepop.latests", {}, function(resp) {
            if (resp && resp.livevars && resp.livevars["cakepop.latests"] && resp.livevars["cakepop.latests"].found) {
                liliumcms.livevars.livevars()["cakepop.latests"] = resp.livevars["cakepop.latests"];
                self.initWithLivevar();
            }
        })
    };

    this.collectAndSend = function(actionid, cb) {
        liliumcms.lmldom.post({
            response : actionid,
            id : self.currentid
        }, "{=config.default.server.url}/admin/cakepop/respond", function() {
            cb && cb();
        });
    };

    this.handleAction = function(e) {
        var actionname = e.target.dataset.action;

        if (!self.pop.preview) { 
            self.collectAndSend(actionname, function() { self.dismiss(); });
        } else { 
            self.dismiss();
        }
    };

    this.createActionButton = function(act) {
        if (act) {
            var actionname = act.identifier;
            var displayname = act.displayname;

            var button = document.createElement('button');
            button.textContent = displayname;
            button.dataset.action = actionname;
            button.className = "cakepop-action cakepop-action-" + actionname;

            if (act.color) {
                button.style.color = act.color;
            }

            button.addEventListener('click', this.handleAction);

            return button;
        }
    };
    
    this.fill = function(popobj) {
        var actions = document.getElementById("cakepop-actions");
        var elHTML = document.getElementById("cakepop-html");
        var elContent = document.getElementById("cakepop-content");

        self.currentid = popobj._id;
        self.pop = popobj;

        if (popobj.nocontainer) {
            elHTML.innerHTML = popobj.content;
            elHTML.style.display = "block";

            elContent.innerHTML = "";
            elContent.parentElement.style.display = "none";
        } else {
            elHTML.innerHTML = "";
            elHTML.style.display = "none";

            elContent.innerHTML = popobj.content;
            elContent.parentElement.style.display = "block";
        }

        document.getElementById("cakepop-stylesheet").textContent = popobj.stylesheet || "";
        
        while (actions.firstElementChild) { actions.firstElementChild.remove(); }
        if (popobj.responses && popobj.responses.length != 0) {
            for (var i = 0; i < popobj.responses.length; i++) {
                var act = this.createActionButton( popobj.responses[i] );
                if (act) {
                    actions.appendChild(act);
                }
            }
        } else {
            actions.appendChild(this.createActionButton( CAKEPOP_DEFAULT_ACTION ));
        }

    }; 

    this.cast = function() {
        self.visible = true;
        var wrap = document.getElementById('cakepop');
        wrap.style.display = "block";
        setTimeout(function() {
            var card = document.getElementById('cakepop-wrapper');
            var cardheight = card.getBoundingClientRect().height;
            var screenheight = window.innerHeight;
            var top = (screenheight / 2) - (cardheight / 2);

            if (top < 100) { top = 100; }
            card.style.top = top + "px";

            wrap.classList.add('shown');
        }, 20);

        self.hideIcon();
    };

    this.dismiss = function() {
        var wrap = document.getElementById('cakepop');
        wrap.classList.remove('shown');
        setTimeout(function() {
            wrap.style.display = "none";
            document.getElementById("cakepop-stylesheet").textContent = "";
            self.visible = false;

            self.checkForNew();
        }, 200);
    };

    this.showIcon = function() {
        document.getElementById('topbar-cakepop').style.display = "block";
    };

    this.hideIcon = function() {
        document.getElementById('topbar-cakepop').style.display = "none";
    };

    this.read = function() {
        liliumcms.lmldom.post({id : self.currentid}, "{=config.default.server.url}/admin/cakepop/read", function(resp) {
            self.serverResponded = resp && !!resp.delicious;
        });
    };

    this.initWithLivevar = function() {
        var latest = liliumcms.livevars.retrieveVar('cakepop.latests', true);
        if (latest.found) {
            var pop = latest.cakepop;
            self.fill(pop);

            if (pop.auto) {
                self.cast();
                self.read();
            } else {
                self.showIcon();
            }
        }
    };

    this.construct = function() {
        var cpWrap = document.getElementById('cakepop');
        if (!cpWrap) {
            return;
        }

        cpWrap.addEventListener('click', function(ev) {
            if (ev.target === cpWrap && !self.pop.mendatory) {
                liliumcms.cakepop.dismiss();
            }
        });

        document.getElementById('topbar-cakepop').addEventListener('click', function() {
            self.cast();
            self.read();
        });

        self.timer = setInterval(self.checkForNew, CAKEPOP_TIMER_MS)
    };

    self.construct();
};
