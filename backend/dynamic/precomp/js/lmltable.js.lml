var LmlTable = function(table) {
	var that = this;
	var table = $(table);
    var domid = table.attr('id');
	var maxEntries = table.data('max');
	var currentPage = 1;
	var currentData;
	var keys = new Array();
	var numberOfCols = table.find('thead th').size();
	var cachedData = {};
    var currentFilter = "";
    var filters = {};

	var timeInitial;
	var timeRendering;

	this.init = function() {
		generateKeysObj();
		timeInitial = new Date();
		this.getData(function() {
			var now = new Date();
			console.log('Table Initialized in ' + (now.getTime() - timeRendering.getTime()) + 'ms (' + (now.getTime() - timeInitial) + ' ms with livevar fetching)');

		});
		table.parent().find('.header select').change(function() {
			var filtername = this.name;
            var filtervalue = this.value;

            filters[filtername] = filtervalue || undefined;
			cachedData = {};
			updateTable();
		});

        table.parent().on('keyup', '.search-table', function() {
            if (currentFilter != $(this).val().trim()) {
                currentFilter = $(this).val().trim();
                if (currentFilter && currentFilter.length > 3) {
			        updateTable(undefined, true, currentFilter);
                } else {
                    updateTable(undefined, false, "");
                }
            }
        });

		table.on('click', 'th[sortable]', function() {
			if (typeof $(this).attr('sorted') !== 'undefined') {
                table.find('thead th.sorted-desc, thead th.sorted-asc').removeClass('sorted-desc sorted-asc');
				// Change sort order
				var sortOrder = table.data('sort-order') == 1 ? -1 : 1;
				$(this).removeClass((sortOrder == 1 ? 'sorted-desc' : 'sorted-asc'));
				$(this).addClass((sortOrder == 1 ? 'sorted-asc' : 'sorted-desc'));

				table.data('sort-order', sortOrder);
				updateTable();
			} else {
                table.find('thead th.sorted-desc, thead th.sorted-asc').removeClass('sorted-desc sorted-asc').removeAttr('sorted');
				table.data('sortby', ($(this).data('sortkey') || $(this).data('key')));
				$(this).addClass('sorted-asc');
				$(this).attr('sorted', true);
				table.data('sort-order', 1);
				updateTable();
			}
		});

		table.closest('.tablewrapper').on('click', '.navbuttons button:not(.previous, .next)', function() {
			that.changePage($(this).text());
		});

        table.closest('.tablewrapper').on('click', '.navbuttons .previous:not(.disabled)', function() {
            that.previousPage();
        });

        table.closest('.tablewrapper').on('click', '.navbuttons .next:not(.disabled)', function() {
            that.nextPage();
        });

	};

	var generateKeysObj = function() {
		table.find('thead th').each(function() {
			keys.push({
				key: $(this).data('key'),
				template: typeof $(this).data('template') !== 'undefined' ? $(this).data('template') : undefined,
                generator: this.dataset.generator || false,
                classes: $(this).data()
			})

		});
	}

	this.filter = function() {

	};

	var genButtons = function() {
        currentPage = currentPage || 1;

		var pages = Math.ceil(currentData.size / maxEntries);
		var buttons = document.createElement('div');
		buttons.className = 'navbuttons pull-right';
        var prevButton = document.createElement('BUTTON');
        prevButton.appendChild(document.createTextNode('Previous'));
        prevButton.className = 'previous';
        if (currentPage == 1) {
            prevButton.className = 'previous disabled';
        }
        buttons.appendChild(prevButton);
        var totalPages = pages;
        var smallest = 1;
        var highest = totalPages;
        
        if (totalPages > 5) {
            var cPage = parseInt(currentPage);
            if (totalPages - cPage < 3) {
                smallest = highest - 5;
            } else if (cPage < 4) {
                highest = 5;
            } else {
                highest = cPage + 2;
                smallest = cPage - 2;
            }
        }

		for (var i = smallest; i <= highest; i++) {
			var button = document.createElement('BUTTON');
			var text = document.createTextNode('' + i);
            if (currentPage == i) {
                button.className = 'selected';
            }
			button.appendChild(text);
			buttons.appendChild(button);
		}

        var nextButton = document.createElement('BUTTON');
        nextButton.appendChild(document.createTextNode('Next'));
        nextButton.className = 'next';
        if (currentPage == pages || currentData.size == 0) {
            nextButton.className = 'next disabled';
        }
        buttons.appendChild(nextButton);

		return buttons;
	}

	var updateNav = function() {
        table.parent().find('.footer').html('<div><p>Displaying entries ' + ((currentPage - 1) * maxEntries + (currentData.size == 0? 0 : 1)) + '-' + (((currentPage - 1) * maxEntries) + currentData.data.length) + ' of ' + (currentData.size || 0) + '</p>' +
			'</div>');
        table.parent().find('.footer').append(genButtons());
	};

	this.nextPage = function() {
        this.changePage(currentPage + 1);
	};

	this.previousPage = function() {
        this.changePage(currentPage == 1 ? currentPage : currentPage - 1);
	};

	this.changePage = function(pageNumber) {
		currentPage = pageNumber;
		table.data('page', pageNumber);

		updateTable();
	};

    var fireUpdated = function() {
        var ev = new CustomEvent('lmltablerefresh', {detail : { 'table': table, 'id' : domid, lmltable : that }});
        document.dispatchEvent(ev);
    };

    this.forceUpdate = function() {
        updateTable(undefined, true, "");
    };

	var updateTable = function(cb, isSearch, searchTerm) {
		timeInitial = new Date();
        liliumcms.pageloader.tidy();

		fieldSort = table.data('sortby');
		fieldOrder = table.data('sort-order');
		if (!isSearch && cachedData[currentPage] && cachedData[currentPage][fieldSort] && cachedData[currentPage][fieldSort][fieldOrder]) {
            currentData = cachedData[currentPage][fieldSort][fieldOrder];
			renderRows();
            updateNav();
			var now = new Date();
			console.log('Table updated from cache in ' + (now.getTime() - timeRendering.getTime()) + 'ms (' + (now.getTime() - timeInitial) + ' ms with livevar fetching)');
            liliumcms.pageloader.present();
            fireUpdated();
		} else {
			liliumcms.livevars.getSingleLivevar(table.data('endpoint'), {
				sortby: fieldSort,
				order: fieldOrder,
				max: parseInt(maxEntries),
				skip: (currentPage - 1) * maxEntries,
				search: (searchTerm ? searchTerm : undefined),
                filters : filters
			}, function(data) {
				cachedData[currentPage] = cachedData[currentPage] ? cachedData[currentPage] : {};
				cachedData[currentPage][fieldSort] = cachedData[currentPage][fieldSort] ? cachedData[currentPage][fieldSort] : {};
				cachedData[currentPage][fieldSort][fieldOrder] = cachedData[currentPage][fieldSort][fieldOrder] ? cachedData[currentPage][fieldSort][fieldOrder] : {};

				currentData = cachedData[currentPage][fieldSort][fieldOrder] = typeof data.livevars !== 'undefined' ? data.livevars[table.data('endpoint')] : undefined;
				renderRows();
                updateNav();
				var now = new Date();
				console.log('Table updated in ' + (now.getTime() - timeRendering.getTime()) + 'ms (' + (now.getTime() - timeInitial) + ' ms with livevar fetching)');
                liliumcms.pageloader.present();

                fireUpdated();
                cb && cb();
			});
		}
	}

	var renderRows = function() {
		timeRendering = new Date();
		if (typeof currentData !== 'undefined' && currentData.size !== 0) {
			table.find('tbody tr.lmltable-no-entry').remove();
			// Replace rows if they exists, create them if not, remove the over
			var rowNum = table.find('tbody tr').size();
			// Contains every row
			var ColHtml = [];
			var tableContent = table.find('tbody').get(0);
			// Each colums
			var colHtml = '';
			for (var i in currentData.data) {
				if (i >= maxEntries) {
					break;
				}
				var trdata = currentData.data[i];

				//Replace current row if tr is already present(update)
				if (i < rowNum) {
					// Get current tr
					var tr = tableContent.children[i];
					for (var j in keys) {
						var td = document.createElement('TD');

						// Check if templating is needed
						if (typeof keys[j].template !== 'undefined') {
							td = liliumcms.livevars.templateToHtml(keys[j].template, trdata, td);
                        } else if (keys[j].generator && window[keys[j].generator]) {
                            window[keys[j].generator](trdata, td);
						} else {
							td.appendChild(document.createTextNode(trdata[keys[j].key]));
						}

                        if (keys[j].classes) {
                            td.className = keys[j].classes;
                        }

						tr.replaceChild(td, tr.children[j]);
					}
				} else { // Create a new tr
					var tr = document.createElement('TR');
					rowNum++;
					for (var j in keys) {
						var td = document.createElement('TD');

						// Check if templating is needed
						if (typeof keys[j].template !== 'undefined') {
							td = liliumcms.livevars.templateToHtml(keys[j].template, trdata, td);
                        } else if (keys[j].generator && window[keys[j].generator]) {
                            window[keys[j].generator](trdata, td);
						} else {
							td.appendChild(document.createTextNode(trdata[keys[j].key]));

						}
						tr.appendChild(td);
					}
					tableContent.appendChild(tr);

				}

			}

			// Remove unsued tr
			if (currentData.data.length < rowNum) {
				for (var rowsToRemove = rowNum - currentData.data.length; rowsToRemove > 0; rowsToRemove--) {
					tableContent.removeChild(tableContent.children[currentData.data.length]);
				}
			}

            liliumcms.pageloader.parseDocument(tableContent.querySelectorAll('a'));
		} else {
			table.find('tbody tr').remove();
			table.append('<tr class="lmltable-no-entry"><td class="empty" colspan="' + numberOfCols + '">There is no entries...</td></tr>');
		}

	};

	this.addRow = function() {

	};

	this.getData = function(cb) {
		updateTable(cb);
	};

	this.init();
};
