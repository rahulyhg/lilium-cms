var LmlTable = function(table) {
	var that = this;
	var table = $(table);
	var maxEntries = table.data('max');
	var currentPage = 1;
	var currentData;
    var keys = new Array();
	var numberOfCols = table.find('thead th').size();
    var cachedData = new Array();

    var timeInitial;
    var timeRendering;

	this.init = function() {
        generateKeysObj();
        timeInitial = new Date();
		this.getData(function() {
			that.createNav();
            var now = new Date();
            console.log('Table Initialised in ' + (now.getTime() - timeRendering.getTime()) + 'ms (' + (now.getTime() - timeInitial) + ' ms with livevar fetching)');

		});

		table.on('click', 'th[sortable]', function() {

		});

        table.on('click', '.navbuttons button', function() {
            that.changePage($(this).text());
        });

	};

    var generateKeysObj = function() {
        table.find('thead th').each(function() {
            keys.push({
                key: $(this).data('key'),
                template : typeof $(this).data('template') !== 'undefined' ?  $(this).data('template'): undefined
            })

        });
    }

	this.filter = function() {

	};

	this.createNav = function() {
		table.after('<div><p>Displaying entries ' + ((currentPage - 1) * maxEntries + 1) + '-' + (currentPage * maxEntries) + ' of '+ (currentData.size || 0) + '</p>' +
        '</div>').get(0).appendChild(genButtons());
	};

    var genButtons = function() {
        var pages = Math.ceil(currentData.size / maxEntries);
        var buttons = document.createElement('div');
        buttons.className = 'navbuttons';

        for (var i=1; i<=pages; i++) {
            var button = document.createElement('BUTTON');
            var text = document.createTextNode('' +i);
            button.appendChild(text);
            buttons.appendChild(button);
        }

        return buttons;
    }

	this.updateNav = function() {

	};

	this.nextPage = function() {

	};

	this.previousPage = function() {

	};

	this.changePage = function(pageNumber) {
        timeInitial = new Date();
        currentPage = pageNumber;
        if (typeof cachedData[currentPage] !== 'undefined') {
            currentData = cachedData[currentPage];
            renderRows();
            var now = new Date();
            console.log('Table updated in ' + (now.getTime() - timeRendering.getTime()) + 'ms (' + (now.getTime() - timeInitial) + ' ms with livevar fetching)');

        } else {
            liliumcms.livevars.getSingleLivevar(table.data('endpoint'), {
                sortby: table.data('sortby'),
                max: table.data('max'),
                skip: (pageNumber - 1) * table.data('max')
            }, function(data) {
                currentData = cachedData[pageNumber]  = typeof data.livevars !== 'undefined' ? data.livevars[table.data('endpoint')] : undefined;
                renderRows();
                var now = new Date();
                console.log('Table updated in ' + (now.getTime() - timeRendering.getTime()) + 'ms (' + (now.getTime() - timeInitial) + ' ms with livevar fetching)');

                if (typeof cb !== 'undefined') cb();
            });
        }

	};

	var renderRows = function() {
        timeRendering = new Date();
		if (typeof currentData !== 'undefined' && currentData.size !== 0) {
			// Replace rows if they exists, create them if not, remove the over
			var rowNum = table.find('tbody tr').size();
			// Contains every row
			var ColHtml = [];
            var tableContent = table.find('tbody').get(0);
			// Each colums
			var colHtml = '';
			for (var i in currentData.data) {
                if (i >= maxEntries) {
                    break;
                }
                var trdata = currentData.data[i];

                //Replace current row if tr is already present(update)
                if (i < rowNum) {
                    // Get current tr
                    var tr = tableContent.children[i];
                    for (var j in keys) {
                        var td =  document.createElement('TD');

                        // Check if templating is needed
                        if (typeof keys[j].template !== 'undefined') {
                            td = liliumcms.livevars.templateToHtml(keys[j].template, trdata, td);
                        } else {
                            td.appendChild(document.createTextNode(trdata[keys[j].key]));
                        }

                        tr.replaceChild(td, tr.children[j]);
                    }
                } else { // Create a new tr
                    var tr =  document.createElement('TR');
                    rowNum++;
                    for (var j in keys) {
                        var td = document.createElement('TD');

                        // Check if templating is needed
                        if (typeof keys[j].template !== 'undefined') {
                            td = liliumcms.livevars.templateToHtml(keys[j].template, trdata, td);
                        } else {
                            td.appendChild(document.createTextNode(trdata[keys[j].key]));

                        }
                        tr.appendChild(td);
                    }
                    tableContent.appendChild(tr);

                }

			}

            // Remove unsued tr
            if (currentData.data.length < rowNum) {
                for (var rowsToRemove = rowNum - currentData.data.length; rowsToRemove > 0; rowsToRemove--) {
                    tableContent.removeChild(tableContent.children[currentData.data.length]);
                }
            }

		} else {
			table.append('<tr><td colspan="' + numberOfCols + '">There is no entries...</td></tr>');
		}

	};

	this.addRow = function() {

	};

	this.getData = function(cb) {
		liliumcms.livevars.getSingleLivevar(table.data('endpoint'), {
			sortby: table.data('sortby'),
			max: table.data('max'),
			skip: (table.data('page')-1) * table.data('max')
		}, function(data) {
			currentData = cachedData[table.data('page')] = typeof data.livevars !== 'undefined' ? data.livevars[table.data('endpoint')] : undefined;
            renderRows();

			if (typeof cb !== 'undefined') cb();
		});
	};

	this.init();
};
