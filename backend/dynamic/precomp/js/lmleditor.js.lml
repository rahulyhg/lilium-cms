{#config}
// Required LMLDom 0.8+
var LMLEditor = function(name, el, readycb) {
    var that = this;

    this.templateElement = el;
    this.wrapper;
    this.editorContent;

    this.name = name;
    this.events = {};
    this.ready = false;
    this.tempContent = "";

    this.present = function() {
        that.wrapper.style.display = "";
    };

    this.fill = function(html) {
        if (that.editorContent) {
            that.editorContent.innerHTML = html;
        } else {
            that.tempContent = html;
        }
    };

    this.fillFromLivevar = function(livevar) {
        that.fill(livevar[that.name] || "");
    };

    this.getContent = function() {
        return that.editorContent ? that.editorContent.innerHTML : that.tempContent;
    };

    this.on = function(eventname, callback) {
        that.events[eventname] = that.events[eventname] || [];
        that.events[eventname].push(callback);
    };

    var insertTextAtCursor = function(text) {
        var sel, range, html;
        if (window.getSelection) {
            sel = window.getSelection();
            if (sel.getRangeAt && sel.rangeCount) {
                range = sel.getRangeAt(0);
                range.deleteContents();
                range.insertNode( document.createTextNode(text) );
            }
        } else if (document.selection && document.selection.createRange) {
            document.selection.createRange().text = text;
        }
    }

    var handlePasteEvent = function(e) {
        var clipboardData, pastedData;

        // Stop data actually being pasted into div
        e.stopPropagation();
        e.preventDefault();

        // Get pasted data via clipboard API
        clipboardData = e.clipboardData || window.clipboardData;
        pastedData = clipboardData.getData('Text');

        insertTextAtCursor(pastedData);
    };

    var handleCopyEvent = function(e) {

    };

    this.bindEditor = function() {
        that.editorContent.parentElement.addEventListener('click', function(e) {
            if (e.target == this) {
                that.editorContent.focus();
            }
        });

        // that.editorContent.addEventListener('paste', handlePasteEvent);
        that.editorContent.addEventListener('copy', handleCopyEvent);
    }

    this.init = function() {
        var ready = function() {
            that.editorContent = that.wrapper.querySelector('.lmlcontenteditor');
            that.editorContent.innerHTML = that.tempContent || "";
            that.bindEditor();

            that.ready = true;

            readycb && readycb(that);

            var initevents = that.events['init'];
            if (initevents) for (var i = 0; i < initevents.length; i++) {
                initevents(that);
            }

            that.present();
        };

        var gotEditor = function() {
            var editorMarkup = this.responseText;
            var wrapper = document.createElement('div');
            wrapper.style.display = "none";
            wrapper.innerHTML = editorMarkup;
            
            that.templateElement.parentElement.insertBefore(wrapper, that.templateElement);
            that.templateElement.parentElement.removeChild(that.templateElement);

            that.wrapper = wrapper;

            ready();
        }

        var oReq = new XMLHttpRequest();
        oReq.addEventListener("load", gotEditor);
        oReq.open("GET", "{=config.default.server.url}/admin/snips/lmleditor?async=*");
        oReq.send();
    };

    that.init();
};

LMLEditor.editors = {};
LMLEditor.create = function(name, lmldom, ready) {
    if (!lmldom) {
        throw new Error("LMLEditor required a valid DOM Element.");
    }

    var editor = new LMLEditor(name, lmldom, ready);
    LMLEditor.editors[name] = editor;

    return editor;
};
