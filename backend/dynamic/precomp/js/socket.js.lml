$(document).ready(function() {
    window.socketInit = false;
    document.addEventListener(liliumcms.LiliumEvents.livevarsRendered.name, function(e) {
        if (window.socketInit) {
            return;
        }
        window.socketInit = true;

        var session = e.detail.livevars.session;

        // Subscribe to channels based on user roles
        if (session) {
            for (var index in session.roles) {
                // Join socket channel
                socket.join(session.roles[index]);
            }
            socket.join("lmlsite_" + session.site);
            socket.join("lml_network");
        }

        var nnotifications = liliumcms.livevars.livevars()["notifications.mine"];
        if (nnotifications) {
            var notifs = nnotifications;
            var notificationList = $('.nav > .dropdown #notification-dropdown #notification_list');
            var nbUnviewed = session.newNotifications ? session.newNotifications : 0;
            for (var index in notifs) {
                // Update small counter
                var notifHtml = generateNotification(notifs[index]);
                notificationList.prepend(notifHtml);
            }
            // Update notification badge
            if (nbUnviewed == 0) {
                $('.dropdown .dropdown-toggle .badge').hide();
            } else {
                $('.dropdown .dropdown-toggle .badge').html(nbUnviewed);
            }
            // Update time for notifications
            $("time.timeago").timeago();

            $('body').on('click', '#notification_list li', function(e) {
                e.preventDefault();

                if ($(this).hasClass('new')) {
                    $(this).removeClass('new');
                    socket.emit('notification-interaction', $(this).attr('id'));
                }

                if ($(this).data('href')) {
                    window.location.href = $(this).data('href');
                } else {
                    $('.dropdown.open .dropdown-toggle').dropdown('toggle');
                }

            });

            $('#dropdown-notification').on('click', function() {
                var badge = $("#dropdown-notification > span > .badge");
                socket.emit('notification-view', {});
                // Hide badge
                badge.html(0);
                badge.hide();
            });
        }
    });

    document.addEventListener(liliumcms.LiliumEvents.pageLoaded.name, function(ev) {
        socket.emit('hit', { path : document.location.pathname });
    });

    var generateNotification = function(notif) {
        var isNew = typeof notif.interacted !== 'undefined' && !notif.interacted ? "new" : "";
        var type = notif.type ? notif.type : "info";
        var link = notif.url ? "data-href='" + notif.url + "'" : "";
        var title = notif.title ? "<div class='notif-title'>" + notif.title + "</div>" : "";
        var msg = notif.msg ? notif.msg : "Empty Notification :(";
        var date = notif.date ? "<time class='date timeago' datetime='" + notif.date.toString() + "'>" + notif.date + "</time>" : '';

        var html = "<li id='" + notif._id + "' class='" + isNew + ' ' + type + " link' " + link + "><div>" + title + "<div class='notif-msg'>" + msg + '</div>' + date + "</div></li>";

        return html;
    };

    if (typeof io !== "undefined") {
        io.Socket.prototype.join = function(groupName) {
            this.emit('join', groupName);
        };

        socket.on('join', function(data) {
            if (!data.success) {
                console.error('[Notifications] ' + data.group + ' : ' + data.msg);
            }
        });

        socket.on('group', function(data) {
            if (debugMode) {
                log('Notification', 'Message from group "' + data.group + '" : ' + data.msg);
            }
        });

        socket.on('debug', function(data) {
            if (debugMode) {
                log('Notification', data.msg);
            }
        })

        socket.on('err', function(data) {
            log('Notification', data.msg, 'err');
        });

        socket.on('disconnect', function(err) {
            log("Lilium", "Lost connection with server.", "warn");
            $('body').addClass('offline');
            liliumcms.notify({
                title : "You are now offline",
                message : "Lilium server is currently unreachable. Let me try to reconnect.",
                type : "system",
                delay: 4000
            });
        });

        socket.on('reconnect', function(rec) {
            log("Lilium", 'Reconnected with server after ' + rec + ' tries.', "info");
            $('body').removeClass('offline');
            liliumcms.notify({
                title : "And we're back online!",
                message : "Connection with Lilium server was established successfully. Yay!",
                type : "system",
                delay : 4000
            });

            var session = liliumcms.livevars.retrieveVar("session");

            // Subscribe to channels based on user roles
            if (session) {
                for (var index in session.roles) {
                    // Join socket channel
                    socket.join(session.roles[index]);
                }
                socket.join("lmlsite_" + session.site);
                socket.join("lml_network");
            }   

            document.dispatchEvent(new CustomEvent("reconnected"))
        });

        socket.on('reconnecting', function(rec) {
            if (rec == 8) {
                liliumcms.notify({
                    title : "Well, that's inconvenient",
                    message : "Connection with Lilium server could not be established. Please verify that your internet connection is stable, or check the server status with an administrator. You will be notified once a stable connection is established.",
                    type : "system",
                    delay : 12000
                });
            }
        });

        socket.on('newbadge', function(pack) {
            liliumcms.badges.fetchLatests();
        });

        socket.on('notification', function(notification) {
            var notif = generateNotification(notification);
            var badge = $('.dropdown .dropdown-toggle .badge');
            $('#notification_list').prepend(notif);
            $(badge).html(parseInt(badge.html()) + 1);
            $(badge).show();

            // Update time for notifications
            $("time.timeago").timeago();

            notification.type = notification.type || 'info';
            notification.message = notification.msg || "";

            var lmlevent = new CustomEvent('lmlnotification', notification);
            document.dispatchEvent(lmlevent);
            liliumcms.notify(notification);
        });

        var event = new CustomEvent('socketReady', {});
        document.dispatchEvent(event);
    };

    var makeNotifyOptions = function(n) {
        // Adapter from jQuery
        if (n.delay) n.duration = n.delay;
        if (n.message) n.content = n.message;
        if (n.url) n.link = n.url;
        if (n.type == "danger") { n.type = "error" }

        return Object.assign({
            duration : 5000,
            title : "Notification",
            link : "",
            content : "",
            type : "info"
        }, n);
    }

    liliumcms.notify = function(n) {
        n = makeNotifyOptions(n || {});
        var wrap = document.createElement('div');
        wrap.className = "notification lml-notification notification-type-" + n.type;
        
        var title = document.createElement(n.link ? 'a' : 'div');
        title.className = "notification-title";
        title.textContent = n.title;

        if (n.link) {
            title.href = n.link;
            title.target = "_blank";
        }

        var content = document.createElement('div');
        content.className = "notification-content";
        content.innerHTML = n.content;

        wrap.appendChild(title);
        wrap.appendChild(content);
        document.getElementById("notifications-wrapper").appendChild(wrap);

        setTimeout(function() {
            wrap.classList.add('shown');
        }, 20);

        (function(wrap) {
            var dismissWrap = function() {
                wrap.classList.remove('shown');
                wrap.classList.add('dismissed');

                setTimeout(function() {
                    wrap.remove();
                }, 300);
            }

            var dismissTick = setTimeout(dismissWrap, n.duration + 20);

            wrap.addEventListener('click', function() {
                clearTimeout(dismissTick);
                dismissWrap();
            });
        })(wrap);
    };
});
