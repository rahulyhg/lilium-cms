$(document).ready(function() {
    document.addEventListener(liliumcms.LiliumEvents.livevarsRendered.name, function(e) {
        var session = e.detail.livevars.session;

        // Subscribe to channels based on user roles
        if (session) {
            for (var index in session.roles) {
                // Join socket channel
                socket.join(session.roles[index]);
            }
            socket.join("lmlsite_" + session.site);
        }
        if (session && session.notifications) {
            var notifs = session.notifications;
            var notificationList = $('.nav > .dropdown #notification-dropdown #notification_list');
            var nbUnviewed = session.newNotifications ? session.newNotifications : 0;
            for (var index in notifs) {
                // Update small counter
                var notifHtml = generateNotification(notifs[index]);
                notificationList.prepend(notifHtml);
            }
            // Update notification badge
            if (nbUnviewed == 0) {
                $('.dropdown .dropdown-toggle .badge').hide();
            } else {
                $('.dropdown .dropdown-toggle .badge').html(nbUnviewed);
            }
            // Update time for notifications
            $("time.timeago").timeago();

            $('body').on('click', '#notification_list li', function(e) {
                e.preventDefault();

                if ($(this).hasClass('new')) {
                    $(this).removeClass('new');
                    socket.emit('notification-interaction', $(this).attr('id'));
                }

                if ($(this).data('href')) {
                    window.location.href = $(this).data('href');
                } else {
                    $('.dropdown.open .dropdown-toggle').dropdown('toggle');
                }

            });

            $('#dropdown-notification').on('click', function() {
                var badge = $("#dropdown-notification > span > .badge");
                socket.emit('notification-view', {});
                // Hide badge
                badge.html(0);
                badge.hide();
            });
        }
    });

    var generateNotification = function(notif) {

        var isNew = typeof notif.interacted !== 'undefined' && !notif.interacted ? "new" : "";
        var type = notif.type ? notif.type : "info";
        var link = notif.url ? "data-href='" + notif.url + "'" : "";
        var title = notif.title ? "<div class='notif-title'>" + notif.title + "</div>" : "";
        var msg = notif.msg ? notif.msg : "Empty Notification :(";
        var date = notif.date ? "<time class='date timeago' datetime='" + notif.date.toString() + "'>" + notif.date + "</time>" : '';

        var html = "<li id='" + notif._id + "' class='" + isNew + ' ' + type + " link' " + link + "><div>" + title + "<div class='notif-msg'>" + msg + '</div>' + date + "</div></li>";

        return html;
    };

    if (typeof io !== "undefined") {
        io.Socket.prototype.join = function(groupName) {
            this.emit('join', groupName);
        };

        io.Socket.prototype.emitToGroup = function(groupName, data) {
            this.emit('emittogroup', {
                group: groupName,
                data: data
            });
        };

        io.Socket.prototype.notifyURL = function(groupName, data) {
            this.emit('urlChanged', window.location.href);
        };

        socket.notifyURL();

        socket.on('join', function(data) {
            if (!data.success) {
                console.error('[Notifications] ' + data.group + ' : ' + data.msg);
            }
        });

        socket.on('group', function(data) {
            if (debugMode) {
                console.log('[Notification] Message from group "' + data.group + '" : ' + data.msg);
            }
        });

        socket.on('debug', function(data) {
            if (debugMode) {
                console.log('[Notification] ' + data.msg);
            }
        })

        socket.on('err', function(data) {
            console.error('[Notification] ' + data.msg);
        });

        socket.on('notification', function(notification) {
            var notif = generateNotification(notification);
            var badge = $('.dropdown .dropdown-toggle .badge');
            $('#notification_list').prepend(notif);
            $(badge).html(parseInt(badge.html()) + 1);
            $(badge).show();

            // Update time for notifications
            $("time.timeago").timeago();

            notification.type = notification.type || 'info';
            notification.message = notification.msg || "";

            var lmlevent = new CustomEvent('lmlnotification', notification);
            document.dispatchEvent(lmlevent);
            liliumcms.notify(notification);
        });

        var event = new CustomEvent('socketReady', {});
        document.dispatchEvent(event);
    };

    liliumcms.notify = function(notification) {
        $.notify(notification, {
            type: notification.type,
            newest_on_top: false,
            delay: -1,
            animate: {
                enter: 'animated fadeInUp',
                exit: 'animated fadeOutDown'
            },
            placement: {
                from: "bottom",
                align: "right"
            },
            template: '<div data-notify="container" class="col-xs-11 col-sm-3 alert alert-{0}" role="alert">' +
                '<button type="button" aria-hidden="true" class="close fa fa-times" data-notify="dismiss"></button>' +
                '<span data-notify="icon"></span> ' +
                '<div data-notify="title"><b>{1}</b></div> ' +
                '<span data-notify="message">{2}</span>' +
                '<div class="progress" data-notify="progressbar">' +
                '<div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>' +
                '</div>' +
                '<a href="{3}" target="{4}" data-notify="url"></a>' +
                '</div>'
        });
    };
});
