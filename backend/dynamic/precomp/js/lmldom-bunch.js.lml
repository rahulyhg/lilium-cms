// Instanciable by LMLDom
var LMLDOM_Bunch = function(ldContext, bunchElement) {
    var that = this;

    this.elem = bunchElement;
    this.template = bunchElement.querySelector("lml-bunchitem");
    this.settings = new LMLDOM_JSON(ldContext, bunchElement.querySelector('script[type="lmljson"]'));
    this.templateFilters = bunchElement.querySelector('lml-bunchfilters');
    this.topbar = bunchElement.querySelector('lml-topbar');
    this.filters = {};
    this.page = {
        index : 1,
        max : 25
    };

    this.valid = false;

    if (this.elem && this.template && this.settings.valid) {
        this.valid = true;
    } else {
        log('LMLDOM', "Error in LMLBunch tag, make sure it has a template and a LMLJson tag", 'err');
    }

    this.loopThroughItems = function(items, done) {
        for (var i = 0; i < items.length; i++) {
            liliumcms.lmldom.injectInContext(that.settings.data.loopvar, items[i]);
            var nds = that.template.children;

            for (var j = 0; j < nds.length; j++) {
                that.bunchWrap.appendChild(
                    liliumcms.lmldom.parseNode(nds[j].cloneNode(true))
                );
            }
        }

        done();
    }

    this.render = function(done) {
        var endpoint = that.settings.data.datasource;
        liliumcms.livevars.getSingleLivevar(endpoint, {
            filters : that.filters,
            page : that.page.index,
            max : that.page.max
        }, function(lv) {
            if (lv.response.code == 200) {
                var pack = lv.livevars[endpoint];
                while (that.bunchWrap.firstChild) {
                    that.bunchWrap.removeChild(that.bunchWrap.firstChild);
                }

                that.loopThroughItems(pack.items, function() {
                    done && done();
                });
            } else {
                log('LMLDOM', "Received non-200 code from livevar request at endpoint : " + endpoint, "warn");
                done && done();
            }
        });
    };

    this.bindFilters = function() {
        var filters = that.filterWrapper ? that.filterWrapper.querySelectorAll("input, select") : [];
        for (var i = 0; i < filters.length; i++) {
            filters[i].addEventListener('change', function(e) {
                that.filters[e.target.name] = e.target.value;
                that.render();
            });

            that.filters[filters[i].name] = filters[i].value;
        }
    };

    this.createID = function(salt) {
        return "bunchwrap_" + salt + Math.random().toString().substring(2) + Math.random().toString().substring(2);
    };

    this.init = function() {
        var bunchWrap = document.createElement('div');
        bunchWrap.id = this.settings.data.id || that.createID(this.settings.name);
        bunchWrap.className = "lmlbunch-items-wrapper"

        var filterWrapper = that.templateFilters && that.templateFilters.firstElementChild.cloneNode(true);
        that.filterWrapper = filterWrapper;

        that.elem.parentElement.insertBefore(bunchWrap, that.elem);
        filterWrapper && bunchWrap.parentElement.insertBefore(filterWrapper, bunchWrap);
        that.elem.id = "bunch_" + (this.settings.data.id || this.settings.name);
        that.id = (this.settings.data.id || this.settings.name);

        this.topbar && bunchWrap.parentElement.insertBefore(this.topbar.firstElementChild.cloneNode(true), bunchWrap);

        that.bunchWrap = bunchWrap;
        liliumcms.lmldom.stage(that.elem);

        that.bindFilters();
    };
};
