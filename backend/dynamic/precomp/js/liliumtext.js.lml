{#config}

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Image Insertion                                                        //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumTextImageInsertionPlugin = function(editor) {
    this.identifier = "LiliumTextImageInsertionPlugin";
    this.editor = editor;
};

LiliumTextImageInsertionPlugin.prototype.executeInsertImage = function() {
    var that = this;
    liliumcms.imagepicker.cast(function(images) {
        if (images == -1) {
            
        } else if (images) {
            Object.keys(images).forEach(imageid => {
                var image = images[imageid];
                var parag = document.createElement('p');
                parag.className = "parag-image-wrapper";
                parag.contentEditable = false;
                
                var imgel = document.createElement('img');
                imgel.className = "lml-content-image lml-instagram-embed-2";
                imgel.dataset.height = image.size.height;
                imgel.dataset.width = image.size.width;
                imgel.dataset.iid = imageid;
                imgel.src = image.sizes.content.url;
                parag.appendChild(imgel);
                
                if (image.artistname) {
                    var cred = document.createElement('a');
                    cred.target = "_blank";
                    cred.href = image.artisturl;
                    cred.textContent = "Via " + image.artistname;
                    parag.appendChild(cred);
                }

                that.editor.insertBlock(parag);
            });

            that.editor.takeSnapshot();
        }
    }, undefined, {
        multiple : true,
        withcredit : true
    });
}

LiliumTextImageInsertionPlugin.prototype.register = function() {
    log('LiliumText', 'Registering plugin LiliumTextImageInsertionPlugin');
    this.insertCommand = new LiliumTextCustomCommand("insert-image", this.executeInsertImage.bind(this), 'far fa-image');
    this.editor.addCommand(this.insertCommand, 3);
};

LiliumTextImageInsertionPlugin.prototype.unregister = function() {

};

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Custom commands                                                        //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumTextCustomUndo = function(ev, that, editor) {
    editor.undo();
}

var LiliumTextCustomRedo = function(ev, that, editor) {
    editor.redo();
}

var LiliumTextCustomCommandCode = function(ev, that, editor) {
    editor.toggleCode();
}

var LiliumTextCustomCommandFullscreen = function(ev, that, editor) {
    editor.wrapperel.classList.toggle("fullscreen");
};

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Image Selection                                                        //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumTextImageSelectionPlugin = function(editor) {
    this.identifier = "LiliumTextImageSelectionPlugin";
    this.editor = editor;
};

LiliumTextImageSelectionPlugin.prototype.clicked = function(editor, clickArgs) {
    var el = clickArgs.event.target;
    var imageparag;

    if (el.nodeName == "IMG") {
        var imageparag = el.parentElement;
        while (!imageparag.classList.contains("instagram-media") && 
            !imageparag.classList.contains("twitter-tweet") && 
            imageparag.nodeName != "P" && 
            imageparag.className != "liliumtext-editor"
        ) {
            imageparag = imageparag.parentElement;
        }

        if (imageparag.className == "liliumtext-editor") {
            imageparag = undefined;
        }
    } else if (clickArgs.context && clickArgs.context.length != 0 && el != editor.contentel) {
        var maybeparag = clickArgs.context[clickArgs.context.length - 1];
        if (maybeparag.classList.contains('instagram-media') || 
            maybeparag.classList.contains('twitter-tweet') || 
            (
                maybeparag.querySelector && 
                maybeparag.querySelector('img')
            )
        ) {
            imageparag = maybeparag;
        }
    }

    if (imageparag) {
        var range = document.createRange();
        range.selectNode(imageparag);

        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }
};

LiliumTextImageSelectionPlugin.prototype.register = function() {
    this.editor.bind('clicked', this.clicked.bind(this));
};

LiliumTextImageSelectionPlugin.prototype.unregister = function() {

};

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Embeds                                                                 //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumTextEmbedPlugin= function(editor) {
    this.identifier = "LiliumTextEmbedPlugin";
    this.editor = editor;
    this.domains = [ "instagram.c", "facebook.c", "youtube.c", "soundcloud.c", "imgur" ];
};

LiliumTextEmbedPlugin.prototype.handleEmbed = function(type, transfer, text) {
    var editor = this.editor;
    switch (type) {
        case "igphoto":
        case "igcarousel":
        case "igvideo":
        case "instagram.c":
            var wrapid = "instatemp" + Math.random().toString().substring(2);
            var template = document.createElement('div');
            template.className = "instatemp";
            template.id = wrapid;

            var sel = window.getSelection();
            var range = sel.getRangeAt(0).cloneRange();

            editor.insertBlock(template);

            sel.removeAllRanges();
            sel.addRange(range);
            
            log('Instagram', "Handling Instagram embed");
            var urltype = type == "igcarousel" ? type : "instagram";
            liliumcms.lmldom.get('{=config.default.server.url}/admin/embed?async=*&type='+urltype+'&as=json&url=' + text, 
                { }, 
            function(resp) {
                try {
                    resp = JSON.parse(resp);
                    if (!resp.instagram) {
                        throw new Error("No markup");
                    }

                    var parser = document.createElement('div');
                    parser.innerHTML = resp.markup;
    
                    var newParag = parser.firstElementChild;
                    template.parentElement.insertBefore(newParag, template);

                    var maybeNext = newParag.nextElementSibling;
                    if (!maybeNext || !maybeNext.textContent.toString().trim()) {
                        var nextp = document.createElement('p');
                        newParag.insertAfter(nextp);
                        maybeNext = nextp;
                    }

                    if (!maybeNext.textContent.toString().trim()) {
                        maybeNext.innerHTML = "<br>";
                    }

                    var scrolltop = maybeNext.getClientRects()[0].top;
                    // editor.contentel.scrollTop = scrolltop + 30;
                } catch (err) {
                    liliumcms.modals.error("Instagram embed", "There was an error embeding the following url : " + text + ". It would seem there is a problem with the Instagram embed feature of this post. Make sure the picture is from a public account, and that it is correctly formatted.");
                    console.err(err);
                }

                template.remove();
            });
            break;

        case "link":
            this.editor.restoreSelection();
            document.execCommand("createLink", false, text);
            break;

        case "reddit":
            var bq = document.createElement('blockquote');
            bq.className = "reddit-card";
            
            var a = document.createElement('a');
            a.href = text;
            bq.appendChild(a);
            editor.insertBlock(bq);
            break;

        case "fbpost":
        case "fbvideo":
        case "vimeo":
        case "twitter":
        case "facebook.c":
            var template = document.createElement('div');
            editor.insertBlock(template);

            log("Embed", "Sending request to server for " + type + " embed");
            liliumcms.lmldom.get('{=config.default.server.url}/admin/embed?async=*&type='+type+'&as=json&url=' + text, 
                {  }, 
            function(resp) {
                try {
                    resp = JSON.parse(resp);
                    template.innerHTML = resp.markup;
                    while (template.firstChild) {
                        template.parentElement.insertBefore(template.firstChild, template);
                    }
                } catch(err) {
                    liliumcms.modals.error("Embed", "There was an error embeding the following url : " + text + ". It would seem there is a problem with the " + type + " embed feature of this post. Make sure the post is from a public account, and that it is correctly formatted.");
                    console.err(err);
                }

                template.remove();
            });
            break;

        case "youtube":
        case "youtube.c":
            var param = text.split('v=')[1].split('&')[0];
            var iframe = d.make({
                node : "iframe",
                attr : {
                    allow : "autoplay; encrypted-media",
                    allowfullscreen : "",
                    width : "640",
                    height: "360",
                    frameborder : "0",
                    src : "https://www.youtube.com/embed/" + param
                }
            }).get();

            editor.insert(iframe);
            break;

        case "soundcloud":
        case "soundcloud.c":
            var iframe = d.make({
                node : "iframe",
                attr : {
                    width : "100%",
                    height: "170",
                    frameborder : "0",
                    src : "https://w.soundcloud.com/player/?url=" + text
                }
            }).get();

            editor.insert(iframe);
            break;

        case "html":
            var template = document.createElement('div');
            template.innerHTML = text;
            editor.insert(template);
            
            while (template.firstChild) { template.parentElement.insertBefore(template.firstChild, template); }
            break;
    }
};

LiliumTextEmbedPlugin.prototype.handlePaste = function(editor, pasteArgs) {
    var transfer = pasteArgs.dataTransfer;
    var textdata = transfer.getData("text");

    if (textdata) {
        var isURL = /^(https?\:\/\/)?[a-zA-Z0-9\.]+[a-zA-Z0-9\-\=\?\&\/]*$/.test(textdata);
        if (isURL) {
            for (var i = 0; i < this.domains.length; i++) {
                if (textdata.includes(this.domains[i])) {
                    this.handleEmbed(this.domains[i], transfer, textdata);
                    pasteArgs.event.preventDefault();
                    return false;
                }
            }   
        } else if (textdata == '<!--LML-->' && window.LML_GLOBAL_SELECTION) {
            window.getSelection().getRangeAt(0).insertNode(window.LML_GLOBAL_SELECTION.cloneNode(true));

            pasteArgs.event.preventDefault();
            return false;
        } else {
            var textdata = (pasteArgs.event.originalEvent || pasteArgs.event).clipboardData.getData('text/plain');
            document.execCommand('insertHtml', false, textdata);

            pasteArgs.event.preventDefault();
            return false;
        }
    }
};

LiliumTextEmbedPlugin.prototype.handleCopy = function(ev) {
    ev.clipboardData.setData('text/html', '<!--LML-->');
    ev.clipboardData.setData('text', '<!--LML-->');
    window.LML_GLOBAL_SELECTION = window.getSelection().getRangeAt(0).cloneContents();

    ev.preventDefault();
    return false;
};

LiliumTextEmbedPlugin.prototype.handleCommandAccept = function(modal) {
    var text = document.getElementById('embedlink-text').value;
    var type = document.getElementById('embedlink-type').value;
    var dt = new DataTransfer();
    dt.setData('text', text);

    modal.dismiss();
    this.handleEmbed(type, dt, text);

    document.getElementById('embedlink-text').value = "";
    document.getElementById('embedlink-type').value = "link";
}

LiliumTextEmbedPlugin.prototype.commandClick = function() {
    var context = this.editor.createSelectionContext(this.editor.restoreSelection().focusNode);
    var maybeLink = context.find(function(el) { return el.nodeName == "A" });

    if (maybeLink) {
        window["lml-edit-link-modal_accept"] = function() {
            var newurl = document.getElementById('edit-link-modal-url').value.toString().trim();
            if (!newurl || (newurl.indexOf('http') == -1 && newurl.indexOf('#') != 0)) {
                liliumcms.notify({
                    type : "warning",
                    title : "Edit link",
                    message : "The provided URL is invalid. Make sure it begins with http or https."
                });
            } else {
                maybeLink.href = newurl; 
                liliumcms.modals.get('lml-edit-link-modal').dismiss();
            }
        };

        document.getElementById('edit-link-modal-url').value = maybeLink.getAttribute('href');
        liliumcms.modals.get('lml-edit-link-modal').cast();
    } else {
        window["lml-insert-embedlink-modal_accept"] = this.handleCommandAccept.bind(this);
        liliumcms.modals.get('lml-insert-embedlink-modal').cast();
    }
};

LiliumTextEmbedPlugin.prototype.register = function() {
    this.editor.bind('paste', this.handlePaste.bind(this));
    this.editor.contentel.addEventListener('copy', this.handleCopy.bind(this));
    this.editor.addCommand(new LiliumTextCustomCommand("embedlink", this.commandClick.bind(this), "far fa-link"), 3);
}

LiliumTextEmbedPlugin.prototype.unregister = function() {

}

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Code view                                                              //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumCodeFormatPlugin = function(editor) {
    this.identifier = "LiliumCodeFormatPlugin";
    this.editor = editor;
};

LiliumCodeFormatPlugin.prototype.handleCode = function(editor, iscode) {
    if (iscode) {
        editor.codeel.textContent = window.html_beautify(editor.codeel.textContent, {
            "indent_size": 4,
            "indent_char": "  ",
            "eol": "\n\n",
            "indent_level": 0,
            "indent_with_tabs": false,
            "preserve_newlines": false,
            "max_preserve_newlines": 10,
            "jslint_happy": false,
            "space_after_anon_function": false,
            "brace_style": "collapse",
            "keep_array_indentation": false,
            "keep_function_indentation": false,
            "space_before_conditional": true,
            "break_chained_methods": false,
            "eval_code": false,
            "unescape_strings": false,
            "wrap_line_length": 0,
            "wrap_attributes": "auto",
            "wrap_attributes_indent_size": 4,
            "end_with_newline": false
        });
    }
};

LiliumCodeFormatPlugin.prototype.register = function() {
    this.editor.bind('code', this.handleCode.bind(this));
}
