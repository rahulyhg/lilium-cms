{#config}
////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Image Insertion                                                        //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumTextImageInsertionPlugin = function(editor) {
    this.identifier = "LiliumTextImageInsertionPlugin";
    this.editor = editor;
};

LiliumTextImageInsertionPlugin.prototype.executeInsertImage = function() {
    var that = this;
    liliumcms.imagepicker.cast(function(images) {
        if (images == -1) {
            
        } else if (images) {
            Object.keys(images).forEach(imageid => {
                var image = images[imageid];
                var parag = document.createElement('p');
                parag.className = "parag-image-wrapper";
                
                var imgel = document.createElement('img');
                imgel.className = "lml-content-image lml-instagram-embed-2";
                imgel.dataset.height = image.size.height;
                imgel.dataset.width = image.size.width;
                imgel.dataset.iid = imageid;
                imgel.src = image.sizes.content.url;
                parag.appendChild(imgel);
                
                if (image.artistname) {
                    var cred = document.createElement('a');
                    cred.target = "_blank";
                    cred.href = image.artisturl;
                    cred.textContent = "Via " + image.artistname;
                    parag.appendChild(cred);
                }

                that.editor.insertBlock(parag);
            });

            that.editor.takeSnapshot();
        }
    }, undefined, {
        multiple : true,
        withcredit : true
    });
}

LiliumTextImageInsertionPlugin.prototype.register = function() {
    log('LiliumText', 'Registering plugin LiliumTextImageInsertionPlugin');
    this.insertCommand = new LiliumTextCustomCommand("insert-image", this.executeInsertImage.bind(this), 'far fa-image');
    this.editor.addCommand(this.insertCommand, 3);
};

LiliumTextImageInsertionPlugin.prototype.unregister = function() {

};

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Custom commands                                                        //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumTextCustomUndo = function(ev, that, editor) {
    editor.undo();
}

var LiliumTextCustomRedo = function(ev, that, editor) {
    editor.redo();
}

var LiliumTextCustomCommandCode = function(ev, that, editor) {
    editor.toggleCode();
}

var LiliumTextCustomCommandFullscreen = function(ev, that, editor) {
    editor.wrapperel.classList.toggle("fullscreen");
};

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Image Selection                                                        //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumTextImageSelectionPlugin = function(editor) {
    this.identifier = "LiliumTextImageSelectionPlugin";
    this.editor = editor;
};

LiliumTextImageSelectionPlugin.prototype.clicked = function(editor, clickArgs) {
    var el = clickArgs.event.target;
    var imageparag;

    if (el.nodeName == "IMG") {
        var imageparag = el.parentElement;
        while (imageparag.nodeName != "P" && imageparag.className != "liliumtext-editor") {
            imageparag = imageparag.parentElement;
        }

        if (imageparag.className == "liliumtext-editor") {
            imageparag = undefined;
        }
    } else if (clickArgs.context && clickArgs.context.length != 0) {
        var maybeparag = clickArgs.context[clickArgs.context.length - 1];
        if (maybeparag.querySelector && maybeparag.querySelector('img')) {
            imageparag = maybeparag;
        }
    }

    if (imageparag) {
        var range = document.createRange();
        range.selectNode(imageparag);

        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }
};

LiliumTextImageSelectionPlugin.prototype.register = function() {
    this.editor.bind('clicked', this.clicked.bind(this));
};

LiliumTextImageSelectionPlugin.prototype.unregister = function() {

};

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Embeds                                                                 //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
var LiliumTextEmbedPlugin= function(editor) {
    this.identifier = "LiliumTextEmbedPlugin";
    this.editor = editor;
    this.domains = [ "instagram.c", "facebook.c", "youtube.c", "soundcloud.c", "imgur" ];
};

LiliumTextEmbedPlugin.prototype.handleEmbed = function(type, transfer, text) {
    var editor = this.editor;
    switch (type) {
        case "instagram.c":
            var wrapid = "instatemp" + Math.random().toString().substring(2);
            var template = document.createElement('div');
            template.className = "instatemp";
            template.id = wrapid;
            editor.insertBlock(template);
            
            log('Instagram', "Handling Instagram embed");
            liliumcms.lmldom.get('{=config.default.server.url}/admin/embed?async=*&type=instagram&as=json&url=' + text, { }, function(resp) {
                try {
                    resp = JSON.parse(resp);
                    if (!resp.instagram) {
                        throw new Error("No markup");
                    }

                    var parser = document.createElement('div');
                    parser.innerHTML = resp.markup;
    
                    var newParag = parser.firstElementChild;
                    template.parentElement.insertBefore(newParag, template);

                    var maybeNext = newParag.nextElementSibling;
                    if (!maybeNext || !maybeNext.textContent.toString().trim()) {
                        var nextp = document.createElement('p');
                        newParag.insertAfter(nextp);
                        maybeNext = nextp;
                    }

                    if (!maybeNext.textContent.toString().trim()) {
                        maybeNext.innerHTML = "<br>";
                    }

                    var range = document.createRange();
                    range.setStart(maybeNext, 0);
                    range.collapse(true);

                    var sel = window.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(range);
                } catch (err) {
                    liliumcms.modals.error("Instagram embed", "There was an error embeding the following url : " + text + ". It would seem there is a problem with the Instagram embed feature of this post. Make sure the picture is from a public account, and that it is correctly formatted.");
                    console.err(err);
                }

                template.remove();
            });
            break;

        case "facebook.c":

            break;

        case "youtube.c":

            break;

        case "soundcloud.c":

            break;

        case "imgur":

            break;
    }
};

LiliumTextEmbedPlugin.prototype.handlePaste = function(editor, pasteArgs) {
    var transfer = pasteArgs.dataTransfer;
    var textdata = transfer.getData("text");
    if (textdata) {
        var isURL = /^(https?\:\/\/)?[a-zA-Z0-9\.]+[a-zA-Z0-9\-\=\?\&\/]*$/.test(textdata);
        if (isURL) {
            for (var i = 0; i < this.domains.length; i++) {
                if (textdata.includes(this.domains[i])) {
                    this.handleEmbed(this.domains[i], transfer, textdata);
                    pasteArgs.event.preventDefault();
                    return false;
                }
            }   
        }
    }
};

LiliumTextEmbedPlugin.prototype.register = function() {
    this.editor.bind('paste', this.handlePaste.bind(this));
}

LiliumTextEmbedPlugin.prototype.unregister = function() {

}
