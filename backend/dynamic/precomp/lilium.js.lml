/*********************************************************************************************************
 *                                                                                                       *
 *  88          88 88 88                                     ,ad8888ba,  88b           d88  ad88888ba    *
 *  88          "" 88 ""                                    d8"'    `"8b 888b         d888 d8"     "8b   *
 *  88             88                                      d8'           88`8b       d8'88 Y8,           *
 *  88          88 88 88 88       88 88,dPYba,,adPYba,     88            88 `8b     d8' 88 `Y8aaaaa,     *
 *  88          88 88 88 88       88 88P'   "88"    "8a    88            88  `8b   d8'  88   `"""""8b,   *
 *  88          88 88 88 88       88 88      88      88    Y8,           88   `8b d8'   88         `8b   *
 *  88          88 88 88 "8a,   ,a88 88      88      88     Y8a.    .a8P 88    `888'    88 Y8a     a8P   *
 *  88888888888 88 88 88  `"YbbdP'Y8 88      88      88      `"Y8888Y"'  88     `8'     88  "Y88888P"    *
 *                                                                                                       *
 *********************************************************************************************************
 * LILIUM CMS | GLOBAL FRONTEND JAVASCRIPT                                                               *
 *                                                                                                       *
 * Author : Erik Desjardins                                                                              *
 * Contributors : Samuel Rondeau-Millaire                                                                *
 * Description : Global styling for admin section of Lilium.                                             *
 * Documentation : http://liliumcms.com/docs                                                             *
 *********************************************************************************************************/
{#config}
window.location.urlBase = "{=config.default.server.url}/";
window.location.urlBaseStrip = "{=config.default.server.url}";
var __indx = window.location.urlBase.indexOf('/', 2);
window.location.lmldomain = window.location.urlBase.substring(2, __indx); 
window.location.lmlpath = window.location.urlBase.substring(__indx);

var debugMode = 'true';
var socket = typeof io !== 'undefined' ? io("{=config.default.server.url}/{=config.default.uid}", {
    transports : ['websocket']
}) : undefined;
window.lmlsocket = socket;


var LiliumCMS = function() {
    var livevarsResponse;
    var urlParams;
    var pushtables = this.pushtables = new Array();
    var multiselects = this.multiselects = new Array();
    var tags = new Array();
    var stacktables = new Array();
    var $url = this.$url = new Array();
    var queryParams = new Object();

    this.queryparams;
    this.formvalidator;
    this.formParser;
    this.livevars;
    this.ckeditor;
    this.adminmenu;
    this.formbeautifier;
    this.multiselect;
    this.previewer;
    this.imagepicker;
    this.conversations;
    this.facebook;
    this.tables = new Array();
    this.lys = new Lys();

    var that = this;

    this.LiliumEvents = {
        livevarsPrerendered: {
            name: "livevarsPrerendered"
        },
        livevarsRendered: {
            name: "livevarsRendered"
        },
        livevarsFetched: {
            name: "livevarsFetched"
        }
    };

    this.state = {
        focused : true
    };

    this.bindFocus = function() {
        window.addEventListener('blur', function() {
            liliumcms.state.focused = false;
        });
        
        window.addEventListener('focus', function() {
            liliumcms.state.focused = true;
        });
    };

    this.getUrlParams = function() {
        return urlParams;
    };

    this._priv = function(n) {
        switch (n) {
            case "stacktables" : return stacktables;
            case "multiselects" : return multiselects;
            case "tags" : return tags;
            case "pushtables" : return pushtables;
            default : return undefined;
        }
    };

    var FormBeautifier = function() {
        var createCheckboxWrapper = function(oObj) {
            var obj = document.createElement('div');
            obj.setAttribute('name', oObj.getAttribute('name'));
            obj.classList.add('lmlbeautifiedcheckbox');
            if (oObj.checked) {
                obj.classList.add("checked");
            }

            return obj;
        };

        this.beautify = function() {
            $('input[type="checkbox"]:not(.systeminput)').each(function(index, cbox) {
                var beautifulCheckbox = $(createCheckboxWrapper(cbox));

                $(beautifulCheckbox).bind('click', function() {
                    $(this).toggleClass('checked');
                    cbox.checked = $(this).hasClass('checked');
                });

                $(cbox).bind('change', function() {
                    $(beautifulCheckbox)[cbox.checked ? "addClass" : "removeClass"]('checked');
                });

                $(cbox).after(beautifulCheckbox);
            });
        };
    };

    var FormValidator = function() {
        this.validate = function(form) {
            var validForm = true;
            $(form).find('.v_invalid_msg').remove();

            $(form).find('.v_validate ').each(function() {
                var validField = true;

                // If a field : text, textarea
                if ($(this).attr('type') == 'text' ||
                    $(this).attr('type') == 'textarea' ||
                    $(this).attr('type') == 'email' ||
                    $(this).attr('type') == 'password') {

                    if ($(this).attr('required') && $(this).val().length == 0) {
                        validField = false;
                        $(this).before('<div class="v_invalid_msg">This field is required</div>');
                    }

                    // Min and maxlength verification
                    if ($(this).attr('minlength') && $(this).val().length < $(this).attr('minlength')) {
                        validField = false;
                        $(this).before('<div class="v_invalid_msg">Minimum length is '+ $(this).attr('minlength') +'</div>');

                    } else if ($(this).attr('maxlength') && $(this).val().length > $(this).attr('maxlength')) {
                        validField = false;
                        $(this).before('<div class="v_invalid_msg">Maximum length is '+ $(this).attr('maxlength') +'</div>');
                    }
                }

                if ($(this).attr('type') == 'email') {
                    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    if (!re.test($(this).val())) {
                        $(this).before('<div class="v_invalid_msg">This email is invalid</div>');
                    }
                }


                if ($(this).attr('type') == 'checkbox' && $(this).data('required') == true && !$(this).is(':checked')) {
                    validField = false;
                    $(this).before('<div class="v_invalid_msg">This field is required</div>');
                }

                if ($(this).attr('type') == 'number') {
                    // Min and maxlength verification
                    if ($(this).attr('min') && $(this).val() < $(this).attr('min')) {

                        validField = false;
                        $(this).before('<div class="v_invalid_msg">The minimum value is '+ $(this).attr('min') +'</div>');

                    } else if ($(this).attr('max') && $(this).val() > $(this).attr('max')) {
                        $(this).before('<div class="v_invalid_msg">The maximum value is '+ $(this).attr('max') +'</div>');

                        validField = false;
                    }
                }
                $('[ckeditor]').val($('[ckeditor]').ckeditor().val());

                if (!validField) {
                    validForm = false;
                }

                if (!validField) {
                    $(this).removeClass('v_valid');
                    $(this).addClass('v_invalid');
                } else {
                    $(this).removeClass('v_invalid');
                    $(this).addClass('v_valid');
                }

            });

            if (validForm) {
                $('alert.alert-info').last().remove();
            } else {
                lmlAlert('The form contains invalid fields. Please review them.');
            }

            return validForm;

        };

        this.prepareValidation = function(cb) {
            var that = this;
            $('.v_form_validate').submit(function(e) {
                e.preventDefault();

                if (that.validate()) {
                    // Send via ajax
                    processForm($(this));
                }
                return false;
            });

            var processForm = function(form) {
                var that = this;
                var serialized_form = form.serialize();
                // Process files
                processFiles(form, function() {
                    $.post(form.attr('action') || window.location.href.toString(), serialized_form, function(data) {
                        if (data.success && data.redirect) {
                            window.location.replace(data.redirect);
                        }
                        var event = new CustomEvent('formSubmited', {
                            'detail': data
                        });
                        document.dispatchEvent(event);
                        return false;
                    });
                    if (cb) cb();
                });
                return false;

            };

            var processFiles = function(form, cb) {
                if (form.find('input[type=file]').length > 0) {
                    var data = new FormData();
                    jQuery.each(form.find('input[type=file]')[0].files, function(i, file) {
                        data.append('file-' + i, file);
                    });

                    jQuery.ajax({
                        url: form.attr('action'),
                        data: data,
                        cache: false,
                        contentType: false,
                        processData: false,
                        type: 'POST',
                        success: function(data) {
                            return cb();
                        }
                    });
                } else {
                    return cb();
                }
            };
        };
    }

    var LocalCache = function() {
        var cache = window.localStorage;

        this.cacheForm = function() {

        };

        this.fillFormFromCache = function(formName) {

        };

        this.setVar = function(key, value) {
            window.localStorage.setItem(key, value);
        };

        this.getVar = function(key) {
            var item = window.localStorage.getItem(key);
            return item == null ? undefined : item;
        };

        cache.forms = cache.forms || new Object();
        cache.adminmenus = cache.adminmenus || new Object();
    };

    var findPushTableFromTitle = function(title) {
        var pt = undefined;
        for (var i = 0; i < that.pushtables.length; i++) {
            if (that.pushtables[i].title == title) {
                pt = that.pushtables[i];
                break;
            }
        }

        return pt;
    }

    this.fillFormFromSource = function(src, data, index, fCtx) {
        index = typeof index == 'undefined' ? 0 : index;
        var form = $('form[name="' + src + '"]:nth-of-type(' + index + 1 + ')');

        that.multiselects.forEach(function(mselect) {
            mselect.fillFromData(data);
        });

        $(form).find('.tags-input').each(function(index, tagsInput) {
            var tag = new Tags(
                tagsInput,
                data
            );

            tags.push(tag);
            tagsInput.dataset.tagsindex = tags.length - 1;
        });

        // Check for stacktable
        $(form).find('table.lmlstacktable').each(function(index, osTable) {
            var sTable = $(osTable);
            var stackTable = new StackTable(
                sTable.attr('id'),
                sTable.data('title'),
                JSON.parse(osTable.dataset.scheme.replace(/\&lmlquote;/g, '"')),
                sTable.data('fieldname')
            );
            stacktables.push(stackTable);

            osTable.dataset.stacktableindex = stacktables.length - 1;

            if (stackTable) {
                stackTable.appendRow(data);
            }
        });

        var foreachloop = function(data, kString) {
            for (var key in data) {
                var kkString = kString + (kString == "" ? "" : ".") + key;
                var val = data[key];
                var pt = undefined;

                if (typeof val === "object") {
                    if ((pt = findPushTableFromTitle(kkString))) {
                        pt.fillFromSource(val);
                    } else {
                        foreachloop(val, kkString);
                    }
                } else {
                    var field = form.find('*[name="' + kkString + '"]');
                    if (field.length > 0) {
                        if (field.data("type") == "leaflet") {
                            var locSplit = val.split('_');
                            liliumcms.formParser.setLeafletLocation(kkString, undefined, locSplit[1], locSplit[0]);
                        } else if (field.attr('type') == 'checkbox') {
                            field.get(0).checked = val === true;
                        } else if (field.attr('type') == 'datetime-local') {
                            field.val(html5datetime(val));
                        } else if (field.hasClass("media-input")) {
                            field.val(val);
                            
                            var mediaimg = field.siblings("img");
                            liliumcms.imagepicker.setImageToElement(mediaimg[0], val);
                        } else {
                            field.val(val);
                        }
                    } else {
                        var selField = $('select[data-readkey="' + kkString + '"]');
                        if (selField.length > 0) {
                            selField.val(val);
                        }
                    }
                }
            }
        }

        if (form.length != 0) {
            foreachloop(data, "");
        }
    };

    var FormParser = function() {
        var makeSingleStackTable = this.makeSingleStackTable = function(index, osTable) {
            if (!osTable.dataset.stacktableindex) {
                var sTable = $(osTable);
                var stackTable = new StackTable(
                    sTable.attr('id'),
                    sTable.data('title'),
                    JSON.parse(osTable.dataset.scheme.replace(/\&lmlquote;/g, '"')),
                    sTable.data('fieldname')

                );
                stacktables.push(stackTable);
            }

        };

        var makeSingleTag = this.makeSingleTag = function(index, tagsInput) {
            if (!tagsInput.dataset.tagsindex) {
                var tag = new Tags(
                    tagsInput
                );

                tags.push(tag);
            }

        };

        var makeStackTables = function() {
            stacktables = [];
            $('.lmlstacktable').each(makeSingleStackTable);
        };

        var makeTags = function() {
            tags = [];
            $('.lmltagswrapper .tags-input').each(makeSingleTag);
        };

        var makeTables = function() {
            that.tables = [];
            $('table.lmltablebuilder').each(function(index, elem) {
                that.tables.push(new LmlTable(elem));
            });
        };

        var makeSections = function() {
            if (liliumcms.livevars.retrieveVar('session').roles.indexOf('lilium') === -1) {
                $('.lmlform-cond-section').each(function(index, section) {
                    if (section.dataset.if) {
                        var ifstr = JSON.parse(section.dataset['if'].replace(/\&lmlquote\;/g, '"'));
                        var cshow = true;
    
                        for (var k in ifstr) {
                            var lval = liliumcms.livevars.pulloutLiveVar(k);
                            if (typeof lval === 'object' && typeof lval.indexOf === 'function') {
                                if (lval.indexOf(ifstr[k] === -1)) {
                                    cshow = false;
                                    break;
                                }
                            } else if (lval !== ifstr[k]) {
                                cshow = false;
                                break;
                            }
                        }
        
                        if (!cshow) {
                            $(section).hide().find('input.lmlsection-ignore').val(1);
                        }
                    }


                });
            }
        };

        this.parse = function(selector) {
            $("form").deserialize(that.livevars.livevars()[selector][0]);
        };

        this.setLeafletLocation = function(llName, realName, lat, lng) {
            if (realName) {
                $('#leaflet-search-' + llName).val(realName);
            }

            if (isNaN(lat) || isNaN(lng)) {
                lat = 45.56028;
                lng = -73.8524761;
            }

            var llmap = window["llmap" + llName];

            llmap.setZoom(12);
            llmap.panTo({lat:lat,lng:lng});
            llmap.removeLayer(llmap.mm || "");
            var mm = llmap.mm = L.marker({lat:lat,lng:lng});
            mm.addTo(window["llmap" + llName]);

            $('#' + llName + 'coords').val(lng + "_" + lat);
        };

        var handleLeafletSearchResponse = function(llName, resp) {
            if (resp && resp.status === "OK") {
                if (resp.results.length == 1) {
                    var place = resp.results[0];
                    var geo = place.geometry.location;

                    liliumcms.formParser.setLeafletLocation(llName, place.formatted_address, geo.lat, geo.lng);
                } else {
                    console.log("TODO : Show choices");
                }
            }
        };

        var handleLeafletSearch = function(llName) {
            var gKey = "{=config.default.google.apikey}";
            var rcn = Math.random().toString().substring(2) + Math.random().toString().substring(2);
            var geocodeAddr = "https://maps.googleapis.com/maps/api/geocode/json?callback=llcb"+rcn+"&key="+gKey+"&address=";
            var addr = $('#leaflet-search-' + llName).val();
            
            // Only used for JSONP
            window["llcb" + rcn] = function(data) {};

            if (addr && addr.trim() !== '') {
                if (gKey == "") {
                    alert("A Google API key must be configured before the map can be used");
                } else {
                    $.getJSON(geocodeAddr + addr, function(data) {
                        handleLeafletSearchResponse(llName, data);
                    });
                }
            }
        };

        var bindFromClasses = function() {
            $('.lml-field-nosubmit').bind('keydown', function(e) {
                if (event.keyCode == 13) {
                    event.cancelBubble = true;
                    event.returnValue = false;

                    return false;
                }
            });

            $('.lml-leaflet-search-input').bind('keydown', function(e) {
                if (event.keyCode == 13) {
                    handleLeafletSearch($(this).data("leafletname"));

                    event.cancelBubble = true;
                    event.returnValue = false;
                }
            });

            $("form.lml-async").bind('submit', function(ev) {
                var cb = window[$(this).attr('name') + "_callback"] || function() {};
                var btn = document.activeElement;
                var loading = $('<i class="fa fa-circle-o-notch" aria-hidden="true"></i>');
                var hasCheck = !$(this).hasClass("no-check");

                var check = hasCheck ? $('<i class="fa fa-check async-form-check-icon" aria-hidden="true"></i>') : "";

                $.post($(this).attr('action') || window.location.href, $(this).serialize(), function(a) {
                    if (hasCheck) {
                        btn.style.display = "";
                        $(loading).remove();
                        $(btn).after(check);
                    
                        setTimeout(function() {
                            check.addClass('shown');
                            setTimeout(function() {
                                check.removeClass('shown');
                                setTimeout(function() {
                                    check.remove();
                                }, 200);
                            }, 5000);
                        }, 50);
                    }

                    cb(a, $(this));
                }); 

                var onclick = window[$(this).attr("name") + "_submit"];
                onclick($(this));

                if (hasCheck) {
                    $(btn).after(loading);
                    btn.style.display = "none";
                }

                return false;
            });
        };

        this.init = function() {
            makeStackTables();
            makeTags();
            makeTables();
            makeSections();
            bindFromClasses();
        };
    };

    var AdminMenu = function() {
        this.init = function() {
            var currentHref = window.location.href;

            $('.lmladminsidebaritems li').each(function(index, li) {
                li = $(li);
                var href = li.find('a').attr('href');
                // Check if menu as submenus
                if (li.find('ul > li').size() > 0) {
                    li.addClass('parent');
                    li.find('> a').append('<i class="fa fa-angle-left"></i>');
                }
            });
        
            this.highlight();
        };

        this.highlight = function() {
            var currentHref = window.location.href;
            var found = false;
            $('.lmladminsidebaritems li').each(function(index, li) {
                li = $(li);
                var href = li.find('a').attr('href');
                if (currentHref.indexOf(href) !== -1) {
                    // Check if child
                    if (li.parent().parent().hasClass('parent')) {
                        li.parent().parent().addClass('child-selected');
                    }

                    if (!li.hasClass("lmladminsidebarselected")) {
                        $(".lmladminsidebaritems li.lmladminsidebarselected").removeClass("lmladminsidebarselected");
                        li.addClass('lmladminsidebarselected');
                    }

                    found = true;
                    return false;
                }
            });

            if (!found) {
                $(".lmladminsidebaritems li.lmladminsidebarselected").removeClass("lmladminsidebarselected");
            }
        };
    };

    var QueryParams = function() {
        this.parseURL = function() {
            var querystring = window.location.href.split("?");
            if (querystring.length > 1) {
                var unescapedParams = querystring[1].split('&');

                for (var i = 0; i < unescapedParams.length; i++) {
                    var split = unescapedParams[i].split('=');
                    queryParams[split.shift()] = unescape(split.join('='));
                }

                liliumcms.queryparams.parseHTML();
            }
        };

        this.parseHTML = function() {
            $('lml\\:queryparam').each(function(index, qTag) {
                var urlval = queryParams[$(qTag).data('param')];

                if (urlval) {
                    $(qTag).find('lml\\:tobject').each(function(index, tobj) {
                        $(tobj).after(queryParams[$(tobj).data("querystring")]);
                        $(tobj).remove();
                    });

                    $(qTag).after(qTag.innerHTML);
                }

                $(qTag).remove();
            });
        };
    }

    this.parseURL = function() {
        this.$url = new Array();
        var urlarr = document.location.href.split('/');

        this.$url.push(document.location.href);
        for (var i = urlarr.length - 1; i >= 0; i--) if (urlarr[i] !== '') {
            this.$url.push(urlarr[i]);
        }
    };

    var Hooks = function() {

    };

    var LMLHTML5 = function() {
        var init = function() {

        };

        init();
    };

    var PageLoader = function() {   
        var that = this;

        this.present = function() {
            $("#lilium-logo").removeClass('quickrotate');
        };
    
        this.tidy = function() {
            $("#lilium-logo").addClass('quickrotate');
        };

        this.bindHistory = function() {
            window.onpopstate = function(event) {
                that.load(document.location.href, true);
            };
        };

        this.pushHistory = function(url) {
            window.history.pushState(null, null, url);
        };

        this.back = function() {
            window.history.back();
        };

        this.load = function(url, ignoreHistory) {
            this.tidy();
            if (!ignoreHistory) {
                this.pushHistory(url);
            }

            liliumcms.adminmenu.highlight();
            liliumcms.conversations.closeChat();

            var formattedUrl = url + (url.indexOf('?') === -1 ? "?" : "&") + "async=*";
            $.get(formattedUrl, function(html) {
                $('main.lmladminmain').html(html);
                that.postload();
            });
        };  

        this.loadCurrentURL = function() {
            this.load(location.href, true);
        }

        this.postload = function() {
            liliumcms.livevars.exec(true);
        };

        this.parseDocument = function(wrapper) {
            $(wrapper || 'main.lmladminmain a').each(function(index, a) {
                a = $(a);
                var href = a.attr('href');
                if (
                    !a.data('async') &&
                    !a.data("replace") && 
                    href.indexOf('#') === -1 && 
                    href.indexOf("{=config.default.server.url}") !== -1 && 
                    href.indexOf('*') === -1) 
                {
                    a.data("async", true).attr("href", href).on('click', function(ev) {
                        ev.preventDefault();
                        ev.stopPropagation();
                        that.load(href);
                        return false;
                    });
                }
            });
        };

        this.parseAdminPanel = function() {
            $('a').each(function(index, a) {
                a = $(a);
                var href = a.attr('href');
                if (href && href.indexOf("#") === -1 && href.indexOf("{=config.default.server.url}") !== -1 && !a.data("replace")) {
                    a.attr("href", href).on('click', function(ev) {
                        ev.preventDefault();
                        ev.stopPropagation();
                        that.load(href);
                        return false;
                    });
                }
            });
        };
    };

    var Animator = function() {
        var that = this;
        this.slide = function() {
            var sliders = document.querySelectorAll(".init-anim");
            var delay = 200;

            for (var i = 0; i < sliders.length; i++) {
                (function(i) {
                    setTimeout(function() {
                        sliders[i].classList.add("anim-slid");
                    }, delay * i);
                })(i);
            }
        };

        this.unslide = function(ddelay) {
            var sliders = document.querySelectorAll(".anim-slid");
            var delay = ddelay || 200;

            for (var i = sliders.length; i >= 0; i--) {
                (function(i) {
                    setTimeout(function() {
                        sliders[i] && sliders[i].classList.remove("anim-slid");
                    }, delay * i);
                })(i);
            }
        };

        this.present = function() {
            this.slide();
        };  

        this.finish = function(delay) {
            this.unslide(delay);
        };
    };

    this.everythingIsAwesome = function() {
        $('.dropdown-menu #avatar img').attr('src', that.livevars.livevars().session.avatarURL);
        $('body').addClass('lmlrendered');

        if (Notification.permission !== "granted") {
            Notification.requestPermission();
        }
    };

    var AwesomeStrapper = function() {
        this.strap = function() {
            var lmlhtml5 = new LMLHTML5();
            that.queryparams = new QueryParams();
            that.formvalidator = new FormValidator();
            that.formParser = new FormParser();
            that.pageloader = new PageLoader();
            that.imagepicker = new LMLImagePicker();
            that.previewer = new LMLPreviewer();
            that.conversations = new LMLConversations();
            that.animator = new Animator();
            that.facebook = new LMLFacebook();
            that.badges = typeof LiliumBadges != "undefined" ? new LiliumBadges() : {};
            that.parseURL();        
            L.Icon.Default.imagePath = "{=config.default.server.url}/static/leaflet/images";

            if (typeof LiveVars !== 'undefined') {
                that.livevars = new LiveVars();
                that.livevars.exec();
            }

            that.ckeditor = typeof CKEditor !== 'undefined' ? new CKEditor() : undefined;
            that.adminmenu = new AdminMenu();
            that.formbeautifier = new FormBeautifier();
            that.imagepicker.init();
            that.previewer.init();
            that.facebook.loadfbscript();
            that.bindFocus();
            
            liliumcms.lys.bindKeys();
        };
    };

    this.awesomestrapper = new AwesomeStrapper();

    // API
    this.refresh = function() {
        window.location.reload();
    };

    var oldBrowsers = function() {
        if (typeof Object.assign === 'undefined') {
            Object.assign = function() {
                var len = arguments.length;
                var newObj = {};
                for (var i = 0; i < len; i++) {
                    var o = arguments[i];
                    for (var k in o) {
                        newObj[k] = o[k];
                    }
                }

                return newObj;
            }
        };
    };

    var init = function() {
        oldBrowsers();
        var pathname = window.location.pathname;
        var split = pathname.split('?')[1];
        window.location.params = new Object();

        if (split) {
            split = split.split('&');
            for (var i = 0; i < split.length; i++) {
                var keyVal = split[i].split('=');
                window.location.params[keyVal[0]] = keyVal[1];
            }
        }
    };
    init();
};
var liliumcms = new LiliumCMS();

$(document).ready(function() {
    liliumcms.awesomestrapper.strap();
});

document.addEventListener('livevarsRendered', function(e) {
    if (!liliumcms.admininit) {
        liliumcms.admininit = true;

        liliumcms.queryparams.parseURL();
        liliumcms.ckeditor ? liliumcms.ckeditor.initEditor() : false;
        liliumcms.adminmenu.init();
        liliumcms.pageloader.parseAdminPanel();
        liliumcms.pageloader.loadCurrentURL();
        liliumcms.pageloader.bindHistory();
        liliumcms.badges.createCache();
        liliumcms.badges.fillSidebar();
        liliumcms.conversations.fillChat();
        liliumcms.everythingIsAwesome();
    } else {
        liliumcms.multiselects.forEach(function(select) {
            if (!select.isRendered) {
                select.render();
            }
        });

        liliumcms.imagepicker.seek();
        liliumcms.imagepicker.refresh();
        liliumcms.queryparams.parseURL();
        liliumcms.ckeditor ? liliumcms.ckeditor.parseDocument() : false;
        liliumcms.formbeautifier.beautify();
        liliumcms.formParser.init();
        liliumcms.pageloader.parseDocument();
        liliumcms.livevars.parseDataLivevars();
        liliumcms.pageloader.present();
        liliumcms.animator.present();
    }
});
