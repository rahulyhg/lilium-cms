/*********************************************************************************************************
 *                                                                                                       *
 *  88          88 88 88                                     ,ad8888ba,  88b           d88  ad88888ba    *
 *  88          "" 88 ""                                    d8"'    `"8b 888b         d888 d8"     "8b   *
 *  88             88                                      d8'           88`8b       d8'88 Y8,           *
 *  88          88 88 88 88       88 88,dPYba,,adPYba,     88            88 `8b     d8' 88 `Y8aaaaa,     *
 *  88          88 88 88 88       88 88P'   "88"    "8a    88            88  `8b   d8'  88   `"""""8b,   *
 *  88          88 88 88 88       88 88      88      88    Y8,           88   `8b d8'   88         `8b   *
 *  88          88 88 88 "8a,   ,a88 88      88      88     Y8a.    .a8P 88    `888'    88 Y8a     a8P   *
 *  88888888888 88 88 88  `"YbbdP'Y8 88      88      88      `"Y8888Y"'  88     `8'     88  "Y88888P"    *
 *                                                                                                       *
 *********************************************************************************************************
 * LILIUM CMS | GLOBAL FRONTEND JAVASCRIPT                                                               *
 *                                                                                                       *
 * Author : Erik Desjardins                                                                              *
 * Contributors : Samuel Rondeau-Millaire                                                                *
 * Description : Global styling for admin section of Lilium.                                             *
 * Documentation : http://liliumcms.com/docs                                                             *
 *********************************************************************************************************/
{#config}
window.location.urlBase = "{=config.default.server.url}/";
window.location.urlBaseStrip = "{=config.default.server.url}";
window.location.uid = "{=config.default.uid}"
var __indx = window.location.urlBase.indexOf('/', 2);
window.location.lmldomain = window.location.urlBase.substring(2, __indx); 
window.location.lmlpath = window.location.urlBase.substring(__indx);
window.location.cdn = "{=?config.default.content.cdn.domain}";

var debugMode = 'true';
var socket = typeof io !== 'undefined' ? io(window.location.urlBase + window.location.uid, {
    transports : ['websocket']
}) : undefined;
window.lmlsocket = socket;
 
var LOG_MAX_SENDER_SIZE = 14;
var log = window.log = function(sender, msg, type, style) {
    var spacing = " ";
    var si = sender.length;
    while (si < LOG_MAX_SENDER_SIZE) {
        ++si; 
        spacing += " ";
    }

    var output = new Date().toLocaleTimeString() + ' [' + sender + "]" + spacing + msg;
    switch (type) {
        case "warn"    :  console.warn  (output); break;
        case "err"     :  console.error (output); break;
        case "info"    :  console.info  (output); break;
        case "deprec"  :  console.log   ("%c" + output, "color: #E56330;"); break;
        case "lilium"  :  console.log   ("%c" + output, "color: #9B59B6; font-weight: bold;"); break;
        case "style"   :  console.log   ('%c' + output, style); break;
        default        :  console.log   (output);
    };
};

var LiliumCMS = function() {
    // console.log("%cLilium CMS", "font-size: 48px; color: #9B59B6; text-shadow: 0px 0px 10px rgba(200,110,220,0.3); font-family : Arial;");
    console.log("%c", "font-size: 1px; line-height: 100px; background-image: url({=config.default.server.protocol}{=config.default.server.url}/static/media/masthead.png); background-size: 340px 100px; padding: 50px 170px;");
    var livevarsResponse;
    var urlParams;
    var pushtables = this.pushtables = [];
    var multiselects = this.multiselects = [];
    var tags = [];
    var stacktables = [];
    var $url = this.$url = [];
    var queryParams = {};
    var initialBinds = [];

    this.cdn;
    this.queryparams;
    this.formvalidator;
    this.formParser;
    this.livevars;
    this.ckeditor;
    this.quill;
    this.adminmenu;
    this.formbeautifier;
    this.multiselect;
    this.treeselect;
    this.localclip;
    this.previewer;
    this.errorhandler;
    this.backendsearch;
    this.imagepicker;
    this.cakepop;
    this.facebook;
    this.tables = [];
    // this.lys = new Lys();
    this.ssl = document.location.protocol === "https:";
    this.env = "{=config.default.env}";

    var that = this;

    this.LiliumEvents = {
        livevarsPrerendered: {
            name: "livevarsPrerendered"
        },
        livevarsRendered: {
            name: "livevarsRendered"
        },
        livevarsFetched: {
            name: "livevarsFetched"
        },
        pageLoaded: {
            name : "pageLoaded"
        }
    };

    this.state = {
        focused : true
    };

    this.bindFocus = function() {
        window.addEventListener('blur', function() {
            liliumcms.state.focused = false;
        });
        
        window.addEventListener('focus', function() {
            liliumcms.state.focused = true;
        });
    };

    this.getUrlParams = function() {
        return urlParams;
    };

    this._priv = function(n) {
        switch (n) {
            case "stacktables" : return stacktables;
            case "multiselects" : return multiselects;
            case "tags" : return tags;
            case "pushtables" : return pushtables;
            default : return undefined;
        }
    };

    this.getStacktables = function() {
        return stacktables;
    }

    var FormBeautifier = function() {
        var createCheckboxWrapper = function(oObj) {
            var obj = document.createElement('div');
            obj.setAttribute('name', oObj.getAttribute('name'));
            obj.classList.add('lmlbeautifiedcheckbox');
            if (oObj.checked) {
                obj.classList.add("checked");
            }

            return obj;
        };

        this.beautify = function() {
            var cbs = document.querySelectorAll('input[type="checkbox"]:not(.systeminput)');
            Array.prototype.forEach.call(cbs, function(cbox) {
                var beautifulCheckbox = createCheckboxWrapper(cbox);

                beautifulCheckbox.addEventListener('click', function(ev) {
                    ev.target.classList.toggle('checked');
                    cbox.checked = ev.target.classList.contains('checked');

                    if (cbox.dataset.changed) {
                        var fcn = window[cbox.dataset.changed];
                        typeof fcn == "function" && fcn(cbox, cbox.checked);
                    }                    
                });

                cbox.addEventListener('change', function() {
                    beautifulCheckbox.classList[cbox.checked ? "add" : "remove"]('checked');
                });

                cbox.parentElement.insertBefore(beautifulCheckbox, cbox);
            });
        };
    };

    var FormValidator = function() {
        this.validate = function(form) {
            log('Validator', 'Called old validation process which is always validate', 'deprec');
            return true;
        };

        this.prepareValidation = function(cb) {
            var processForm = function(form) {
                log('Validator', 'Called form processing. This will most likely hang, or crash', 'deprec');
                cb && cb();
                return false;
            };

            var processFiles = function(form, cb) {
                log('Validator', 'Called file processing. This will most likely hang, or crash', 'deprec');
                cb && cb();
            };
        };
    }

    var findPushTableFromTitle = function(title) {
        var pt = undefined;
        for (var i = 0; i < that.pushtables.length; i++) {
            if (that.pushtables[i].title == title) {
                pt = that.pushtables[i];
                break;
            }
        }

        return pt;
    }

    this.fillFormFromSource = function(src, data, index, fCtx) {
        index = typeof index == 'undefined' ? 0 : index;
        var form = $('form[name="' + src + '"]:nth-of-type(' + index + 1 + ')');

        that.multiselects.forEach(function(mselect) {
            mselect.fillFromData(data);
        });

        $(form).find('.tags-input').each(function(index, tagsInput) {
            var tag = new Tags(
                tagsInput,
                data
            );

            tags.push(tag);
            tagsInput.dataset.tagsindex = tags.length - 1;
        });

        // Check for stacktable
        $(form).find('table.lmlstacktable').each(function(index, osTable) {
            var sTable = $(osTable);
            var stackTable = new StackTable(
                sTable.attr('id'),
                sTable.data('title'),
                JSON.parse(osTable.dataset.scheme.replace(/\&lmlquote;/g, '"')),
                sTable.data('fieldname')
            );
            stacktables.push(stackTable);

            osTable.dataset.stacktableindex = stacktables.length - 1;

            if (stackTable) {
                stackTable.appendRow(data);
            }
        });

        var foreachloop = function(data, kString) {
            for (var key in data) {
                var kkString = kString + (kString == "" ? "" : ".") + key;
                var val = data[key];
                var pt = undefined;

                if (typeof val === "object") {
                    if ((pt = findPushTableFromTitle(kkString))) {
                        pt.fillFromSource(val);
                    } else {
                        foreachloop(val, kkString);
                    }
                } else {
                    var field = form.find('*[name="' + kkString + '"]');
                    if (field.length > 0) {
                        if (field.data("type") == "leaflet") {
                            var locSplit = val.split('_');
                            liliumcms.formParser.setLeafletLocation(kkString, undefined, locSplit[1], locSplit[0]);
                        } else if (field.attr('type') == 'checkbox') {
                            field.get(0).checked = val === true;
                        } else if (field.attr('type') == 'datetime-local') {
                            field.val(html5datetime(val));
                        } else if (field.hasClass("media-input")) {
                            field.val(val);
                            
                            var mediaimg = field.siblings("img");
                            liliumcms.imagepicker.setImageToElement(mediaimg[0], val);
                        } else {
                            field.val(val);
                        }
                    } else {
                        var selField = $('select[data-readkey="' + kkString + '"]');
                        if (selField.length > 0) {
                            selField.val(val);
                        }
                    }
                }
            }
        }

        if (form.length != 0) {
            foreachloop(data, "");
        }
    };

    var ErrorHandler = function() {
        var handlecrash = function(errorpayload) {
            if (liliumcms.session.current.roles.indexOf("admin") != -1) {
                liliumcms.notify({ type : "danger", title : "Unhandled error detected", message : errorpayload.msg + (errorpayload.url ? (" at line " + errorpayload.line + " in file " + errorpayload.url) : ""), delay : 10000 });
            } else {
                // liliumcms.notify({ type : "danger", title : "Hmm, something went wrong here", message : "Nothing dramatic, really. If the page did not load, I recommend trying again or refreshing your browser.", delay : 10000 });
            }
        };

        var bind = function() {
            window.onerror = function(msg, url, line, col, error) {
                handlecrash({msg : msg, url : url, line : line, col : col, error : error});
            }
        };

        bind();
    };

    var FormParser = function() {
        var makeSingleStackTable = this.makeSingleStackTable = function(osTable) {
            if (!osTable.dataset.stacktableindex) {
                var sTable = osTable;
                var stackTable = new StackTable(
                    sTable.id,
                    sTable.dataset.title,
                    JSON.parse(osTable.dataset.scheme.replace(/\&lmlquote;/g, '"')),
                    sTable.dataset.fieldname
                );

                stacktables.push(stackTable);
            }
        };

        var makeSingleTag = this.makeSingleTag = function(tagsInput) {
            if (!tagsInput.dataset.tagsindex) {
                var tag = new Tags(
                    tagsInput
                );

                tags.push(tag);
            }

        };

        var makeStackTables = function() {
            stacktables = [];

            var lmlst = document.querySelectorAll('.lmlstacktable');
            for (var i = 0; i < lmlst.length; i++) {
                makeSingleStackTable(lmlst[i]);
            }
        };

        var makeTags = function() {
            tags = [];

            var lmlst = document.querySelectorAll('.lmltagswrapper .tags-input');
            for (var i = 0; i < lmlst.length; i++) {
                makeSingleTag(lmlst[i]); 
            }
        };

        var makeTables = function() {
            that.tables = [];
            var lmltb = document.querySelectorAll('table.lmltablebuilder');
            for (var i = 0; i < lmltb.length; i++) {
                that.tables.push(new LmlTable(lmltb[i]));
            }
        };

        var makeSections = function() {
            if (liliumcms.livevars.retrieveVar('session').roles.indexOf('lilium') === -1) {
                var sections = document.querySelectorAll('.lmlform-cond-section');
                for (var i = 0; i < sections.length; i++) {
                    var section = sections[i];

                    (function(section) {
                        if (section.dataset.if) {
                            var ifstr = JSON.parse(section.dataset['if'].replace(/\&lmlquote\;/g, '"'));
                            var cshow = true;
                            var userRoles = liliumcms.session.current.roles;    

                            for (var field in ifstr) {
                                if (field == "role" && userRoles.indexOf(ifstr[field]) == -1) {
                                    cshow = false;
                                    break;
                                }
                            }
            
                            if (!cshow) {
                                section.style.display = "none";
                                section.querySelector('input.lmlsection-ignore').value = 1;
                            }
                        }
                    })(section);
                };
            }
        };

        this.parse = function(selector) {
            $("form").deserialize(that.livevars.livevars()[selector][0]);
        };

        this.setLeafletLocation = function(llName, realName, lat, lng) {
            if (realName) {
                $('#leaflet-search-' + llName).val(realName);
            }

            if (isNaN(lat) || isNaN(lng)) {
                lat = 45.56028;
                lng = -73.8524761;
            }

            var llmap = window["llmap" + llName];

            llmap.setZoom(12);
            llmap.panTo({lat:lat,lng:lng});
            llmap.removeLayer(llmap.mm || "");
            var mm = llmap.mm = L.marker({lat:lat,lng:lng});
            mm.addTo(window["llmap" + llName]);

            $('#' + llName + 'coords').val(lng + "_" + lat);
        };

        var handleLeafletSearchResponse = function(llName, resp) {
            if (resp && resp.status === "OK") {
                if (resp.results.length == 1) {
                    var place = resp.results[0];
                    var geo = place.geometry.location;

                    liliumcms.formParser.setLeafletLocation(llName, place.formatted_address, geo.lat, geo.lng);
                } else {
                    console.log("TODO : Show choices");
                }
            }
        };

        var handleLeafletSearch = function(llName) {
            var gKey = "{=config.default.google.apikey}";
            var rcn = Math.random().toString().substring(2) + Math.random().toString().substring(2);
            var geocodeAddr = "https://maps.googleapis.com/maps/api/geocode/json?callback=llcb"+rcn+"&key="+gKey+"&address=";
            var addr = $('#leaflet-search-' + llName).val();
            
            // Only used for JSONP
            window["llcb" + rcn] = function(data) {};

            if (addr && addr.trim() !== '') {
                if (gKey == "") {
                    alert("A Google API key must be configured before the map can be used");
                } else {
                    $.getJSON(geocodeAddr + addr, function(data) {
                        handleLeafletSearchResponse(llName, data);
                    });
                }
            }
        };

        var bindFromClasses = function() {
            $('.lml-field-nosubmit').bind('keydown', function(e) {
                if (event.keyCode == 13) {
                    event.cancelBubble = true;
                    event.returnValue = false;

                    return false;
                }
            });

            $('.lml-leaflet-search-input').bind('keydown', function(e) {
                if (event.keyCode == 13) {
                    handleLeafletSearch($(this).data("leafletname"));

                    event.cancelBubble = true;
                    event.returnValue = false;
                }
            });

            $("form.lml-async").bind('submit', function(ev) {
                var cb = window[$(this).attr('name') + "_callback"] || function() {};
                var btn = document.activeElement;
                var loading = $('<i class="fa fa-circle-o-notch" aria-hidden="true"></i>');
                var hasCheck = !$(this).hasClass("no-check");

                var check = hasCheck ? $('<i class="fa fa-check async-form-check-icon" aria-hidden="true"></i>') : "";

                var onSuccess = function(a) {
                    if (hasCheck) {
                        btn.style.display = "";
                        $(loading).remove();
                        $(btn).after(check);
                    
                        setTimeout(function() {
                            check.addClass('shown');
                            setTimeout(function() {
                                check.removeClass('shown');
                                setTimeout(function() {
                                    check.remove();
                                }, 200);
                            }, 5000);
                        }, 50);
                    }

                    cb(a, $(this));
                };

                var onFail = function(msg) {
                    btn.style.display = "";
                    $(loading).remove();

                    if (msg && msg.responseText) {
                        liliumcms.modals.error("Failed", msg.responseText);
                    }
                };


                if (this.getAttribute('json')) {
                    liliumcms.lmldom.sendForm(
                        liliumcms.lmldom.getFormData()[this.name].values,
                        this.getAttribute('action') || window.location.href,
                        onSuccess
                    );
                } else {
                    $.post($(this).attr('action') || window.location.href, $(this).serialize())
                        .success(onSuccess)
                        .fail(onFail); 
                }

                var onclick = window[$(this).attr("name") + "_submit"];
                onclick && onclick($(this));

                if (hasCheck) {
                    $(btn).after(loading);
                    btn.style.display = "none";
                }

                return false;
            });
        };

        this.init = function() {
            makeStackTables();
            makeTags();
            makeTables();
            makeSections();
            bindFromClasses();
        };
    };

    var AdminMenu = function() {
        this.init = function() {
            var currentHref = window.location.href;

            var listitems = $('.lmladminsidebaritems li')
            listitems.each(function(index, li) {
                li = $(li);
                var href = li.find('a').attr('href');
                // Check if menu as submenus
                if (li.find('ul > li').size() > 0) {
                    li.addClass('parent');
                }
            });
        
            this.highlight();
            this.createWebsiteButton();
            log('AdminMenu', 'Initialized admin menu panel');
        };

        this.createWebsiteButton = function() {
            var listitem = document.createElement('li');
            var linkitem = document.createElement('a');
            var icon = document.createElement('i');
            var span = document.createElement('span');

            linkitem.appendChild(icon);
            linkitem.appendChild(span);
            listitem.appendChild(linkitem);

            span.textContent = "{=config.default.website.sitetitle} homepage";
            icon.className = "fa fa-globe go-to-site";

            linkitem.href = "{=config.default.server.url}";
            linkitem.target = "_blank";
            linkitem.dataset.async = "true";
            linkitem.id = "go-to-site-link";

            listitem.className = "go-to-site-listitem";
            document.querySelector('.lmladminsidebaritems').appendChild(listitem);
        };

        this.highlight = function() {
            var currentHref = window.location.href;
            var found = false;
            $('.lmladminsidebaritems li:not(.go-to-site-listitem)').each(function(index, li) {
                li = $(li);
                var href = li.find('a').attr('href');
                if (currentHref.indexOf(href) !== -1) {
                    $('.child-selected').removeClass('child-selected');

                    // Check if child
                    if (li.parent().parent().hasClass('parent')) {
                        li.parent().parent().addClass('child-selected');
                    }

                    if (!li.hasClass("lmladminsidebarselected")) {
                        $(".lmladminsidebaritems li.lmladminsidebarselected").removeClass("lmladminsidebarselected");
                        li.addClass('lmladminsidebarselected');
                    }

                    found = true;
                    return false;
                }
            });

            if (!found) {
                $(".lmladminsidebaritems li.lmladminsidebarselected").removeClass("lmladminsidebarselected");
            }
        };
    };

    var QueryParams = function() {
        this.parseURL = function() {
            var querystring = window.location.href.split("?");
            if (querystring.length > 1) {
                var unescapedParams = querystring[1].split('&');

                for (var i = 0; i < unescapedParams.length; i++) {
                    var split = unescapedParams[i].split('=');
                    queryParams[split.shift()] = unescape(split.join('='));
                }

                liliumcms.queryparams.parseHTML();
            }

            log('QueryParams', 'Parsed URL query parameters');
        };

        this.parseHTML = function() {
            $('lml-queryparam').each(function(index, qTag) {
                var urlval = queryParams[$(qTag).data('param')];

                if (urlval) {
                    $(qTag).find('lml-tobject').each(function(index, tobj) {
                        $(tobj).after(queryParams[$(tobj).data("querystring")]);
                        $(tobj).remove();
                    });

                    $(qTag).after(qTag.innerHTML);
                }

                $(qTag).remove();
            });
        };
    }

    this.parseURL = function() {
        this.$url = [];
        var urlarr = document.location.href.split('/');

        this.$url.push(document.location.href);
        for (var i = urlarr.length - 1; i >= 0; i--) if (urlarr[i] !== '') {
            this.$url.push(urlarr[i]);
        }
    };

    var LMLCDN = function() {
        this.cdnize = this.ize = this.parse = function(str) {
            return str.replace("{=config.default.server.url}", window.location.cdn);
        }
    };

    var Hooks = function() {

    };

    var LMLHTML5 = function() {
        var init = function() {

        };

        init();
    };

    var PageLoader = function() {   
        var that = this;
        this.unloadHooks = [];

        this.present = function() {
            log('PageLoader', 'Presenting current page');
            $("#lilium-logo").removeClass('quickrotate');
            $('undefined, lml-livevars').remove();
        };
    
        this.tidy = function() {
            $("#lilium-logo").addClass('quickrotate');
        };

        this.bindHistory = function() {
            window.onpopstate = function(event) {
                that.load(document.location.href, true);
            };
        };

        this.pushHistory = function(url) {
            window.history.pushState(null, null, url);
        };

        this.back = function() {
            window.history.back();
        };

        this.bindUnload = function(cb) {
            that.unloadHooks.push(cb);
        };

        this.load = function(url, ignoreHistory) {
            log('PageLoader', 'Loading URL : ' + url + (ignoreHistory ? " without " : " with ") + "history support");
            this.tidy();
            if (!ignoreHistory) {
                this.pushHistory(url);
            }

            for (var i = 0; i < that.unloadHooks.length; i++) {
                that.unloadHooks[i]();
            }

            that.unloadHooks = [];

            this.levels = document.location.href.split('/');
            if (!this.levels[this.levels.length - 1]) { this.levels.pop(); }
            this.lastLevel = this.levels[this.levels.length - 1];

            liliumcms.adminmenu.highlight();
            liliumcms.backendsearch.dismiss();

            var formattedUrl = url + (url.indexOf('?') === -1 ? "?" : "&") + "async=*";
            var adminpath = url.substring(url.indexOf('/admin/') + 7);
            var endofadminpath = adminpath.indexOf('/');

            if (endofadminpath != -1) {
                adminpath = adminpath.substring(0, endofadminpath);
            }

            document.location.lmladminpath = adminpath;

            var req = function() {
                var pageContent = (this.responseText);
                document.querySelector('main.lmladminmain').innerHTML = pageContent;

                var scripts = document.querySelectorAll('main.lmladminmain script:not([type="lmljson"])');
                for (var i = 0; i < scripts.length; i++) {
                    eval.call(window, scripts[i].textContent);
                    scripts[i].dataset.executedby = "pageloader";
                }

                if (this.responseURL.indexOf('rewrite') != -1) {
                    var url = this.responseURL.substring(0, this.responseURL.indexOf('?'));
                    that.pushHistory(url)
                }

                var hitEvent = new CustomEvent(liliumcms.LiliumEvents.pageLoaded.name);
                document.dispatchEvent(hitEvent, {url : url});

                log('PageLoader', 'Done loading page, calling post load');
                that.postload();
            }

            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", req);
            oReq.open("GET", formattedUrl);
            oReq.send();
        };  

        this.loadCurrentURL = function() {
            log('PageLoader', 'Loading Current URL into view');
            this.load(location.href, true);
        }

        this.postload = function() {
            var garbages = document.querySelectorAll(".modal-backdrop");

            for (var i = 0; i < garbages.length; i++) {
                garbages[i].remove();
            }

            document.body.classList.remove('modal-open');
            document.querySelector('.lmladminsidebar').classList.remove("mobile-shown");

            liliumcms.multiselects = [];
        
            log('PageLoader', 'Passing request to Livevars');
            liliumcms.livevars.exec(true);
        };

        this.parseDocument = function(wrapper) {
            log('PageLoader', 'Seeking links, transform them into async links');
            var total = 0;
            
            Array.prototype.forEach.call(document.querySelectorAll(wrapper || 'main.lmladminmain a'), function(a) {
                var href = a.href || "";

                if (
                    !a.dataset.async && !a.dataset.replace && 
                    !a.classList.contains("direct-link") &&
                    href.indexOf('#') === -1 && href.indexOf('*') === -1 &&
                    href.indexOf("{=config.default.server.url}") !== -1 && 
                    a.target !== "_blank"
                ) {
                    total++;
                    a.dataset.async = true;
                    a.dataset.parser = "pageloader";
                    a.href = href;
                    a.addEventListener('click', function(ev) {
                        ev.preventDefault();
                        ev.stopPropagation();
                        that.load(href);
                        return false;
                    });
                }
            });

            log('PageLoader', 'Bound ' + total + ' links');
        };

        this.parseAdminPanel = function() {
            log('PageLoader', 'Binding links to load inside page async');
            this.parseDocument('a');
        };
    };

    var LMLUsers = function() {
        this.users = {};

        this.cacheUsers = function() {
            var liveUsers = liliumcms.livevars.livevars()["entities.cached"];

            if (liveUsers) {
                for (var i = 0; i < liveUsers.length; i++) {
                    this.users[liveUsers[i]._id] = liveUsers[i];
                }
            }
        };

        this.get = function(id) {
            return this.users[id];
        };
    };

    var LMLQuill = function() {
        var editors = {};
        var that = this;

        this.createImageWrapper = function(imgobj) {
            var url = ("{=config.default.server.url}/uploads/" + imgobj.url);
            var creditname = imgobj.artistname;
            var crediturl = imgobj.artisturl;

            var markup = '<p class="lml-image-wrapper lml-content-image-wrapper"><img class="lml-content-image" data-iid="' +
                imgobj._id + '" src="' + 
                url + '"><span>Via </span><a href="' + 
                crediturl + '" target="_blank">' + 
                creditname + '</a></p>';

            return markup; 
        };

        this.maybeInsertImage = function(quill, imgs, selection) {
            if (imgs) {
                var keys = Object.keys(imgs);

                for (var i = 0; i < keys.length; i++) {
                    var imgobj = imgs[keys[i]];
                    var markup = that.createImageWrapper(imgobj);

                    quill.getModule('clipboard').dangerouslyPasteHTML(selection.index, markup);
                }
            }
        }

        this.initEditor = function(name, quill) {
            quill.getModule('toolbar').addHandler('image', function() {
                var savedSelection = quill.getSelection();

                liliumcms.imagepicker.cast(function(imgs) { 
                    that.maybeInsertImage(quill, imgs, savedSelection) 
                }, undefined, {
                    withcredit : true, 
                    multiple : true
                });
            });

            quill.getModule('toolbar').addHandler('code', function() {
                that.showSource(name);
            });
        }

        this.addEditor = function(name, quill) {
            quill.fieldName = name;
            if (!editors[name]) {
                this.initEditor(name, quill)
                editors[name] = quill;
                log('Quill', "Added an editor with name " + name);
            } else {
                log('Quill', 'Tried to initialize already existing editor with name ' + name, 'warn');
            }
        };

        this.getEditor = function(name) {
            return editors[name] || false;
        };

        this.fill = function(name, content) {
            var editor = document.getElementById("quill-" + name);
            if (editor && content) {
                editor.querySelector('.ql-editor').innerHTML = content;
            }
        };

        this.showSource = function(name) {
            var sourcewrap = document.getElementById("quill-" + name + "-source");
            if (sourcewrap) {
                var textarea = sourcewrap.querySelector('textarea');
                textarea.value = this.getHTML(name).replace(/\<\/p\>/g, '</p>\n\n').replace(/\<\/div\>/g, '</div>\n\n');
        
                sourcewrap.style.display = "block";
            }
        };

        this.applySource = function(name) {
            var sourcewrap = document.getElementById("quill-" + name + "-source");
            if (sourcewrap) {
                var textarea = sourcewrap.querySelector('textarea');
                var markup = textarea.value.replace(/\n/g, '');
                that.fill(name, markup);        
                that.dismissSource(name);
            }
        };

        this.dismissSource = function(name) {
            var sourcewrap = document.getElementById("quill-" + name + "-source");
            sourcewrap.style.display = "none";
        }   

        this.getHTML = function(name) {
            var editor = document.getElementById("quill-" + name);
            return editor && editor.querySelector('.ql-editor').innerHTML;
        }

        this.getEditors = function() {
            return Object.keys(editors);
        };  

        this.reset = function() {
            editors = {};
        }
    };

    var LMLModals = function() {
        _modals = {};

        var LMLModal = function(elem) {
            var that = this;
            this.elem = elem;
            this.wrapper;
            this.events = {
                show   : [],
                cancel : [],
                accept : [],
                close  : []
            };

            this.show = this.cast = function() {
                that.fire('show');
                that.wrapper.style.display = "block";
                setTimeout(function() {
                    that.wrapper.classList.add('shown');
                    setTimeout(function() {
                        that.elem.classList.add('shown');
                    }, 110);
                }, 10);
            };

            this.getFormData = function() {
                var values = that.wrapper.querySelectorAll('input, textarea, select');
                var formData = {};

                for (var i = 0; i < values.length; i++) {
                    var el = values[i];

                    formData[el.name || el.id || ("field-" + i)] = el.classList.contains("lml-date") ? 
                        liliumcms.lmldom.flatpickr[el.name || el.id || ("field-" + i)].selectedDates[0] : 
                        el.value;
                }

                return formData;
            }

            this.fill = function(values) {
                var keys = Object.keys(values);
                var fields = that.wrapper.querySelectorAll('input, textarea, select');
                var assoc = {};
                for (var i = 0; i < fields.length; i++) {
                    assoc[fields[i].name || fields[i].id] = fields[i];
                }

                for (var i = 0; i < keys.length; i++) {
                    if (assoc[keys[i]]) {
                        if (assoc[keys[i]].classList.contains('lml-date')) {
                            liliumcms.lmldom.flatpickr[assoc[keys[i]].name || assoc[keys[i]].id].setDate(
                                typeof values[keys[i]] == "number" ? new Date(values[keys[i]]) : values[keys[i]]
                            );
                        } else {
                            assoc[keys[i]].value = values[keys[i]]; 
                        }
                    }
                }
            }

            this.fire = function(event) {
                for (var i = 0; i < that.events[event].length; i++) {
                    var cb = that.events[event][i];
                    if (cb.caller) {
                        cb.ftc.apply(cb.caller, [that]);
                    } else {
                        cb.ftc(that);
                    }
                }
            }

            this.close = this.dismiss = function() {
                that.fire('close');
                that.elem.classList.remove('shown');
                setTimeout(function() {
                    that.wrapper.classList.remove('shown');
                    setTimeout(function() {
                        that.wrapper.style.display = "none";
                    }, 110);
                }, 50);
            };

            this.initbind = function() {
                var cancel = that.elem.querySelector('.lml-modal-cancel');
                if (cancel) {
                    cancel.addEventListener('click', this.close);
                }

                var accept = that.elem.querySelector('.lml-modal-accept');
                if (accept) {
                    accept.addEventListener('click', function() {
                        var explicitCallback = window[that.elem.id + "_accept"];
                        explicitCallback && explicitCallback(that);
                        that.fire.apply(that, ['accept']);
                    });
                }

                var customactions = that.elem.querySelectorAll('.lml-modal-action');
                for (var i = 0; i < customactions.length; i++) {
                    let ccb = customactions[i].dataset.callback;
                    if (ccb && window[ccb]) {
                        customactions[i].addEventListener('click', function(ev) {
                            window[ev.target.dataset.callback].apply(that, [that]);
                        });
                    }
                }
            };

            this.initwrap = function() {
                var wrapper = document.createElement('div');
                wrapper.className = "lml-modal-wrapper";
                wrapper.appendChild(that.elem);
                document.body.appendChild(wrapper);

                if (that.elem.classList.contains("lml-modal-perma")) {
                    wrapper.className += " lml-modal-wrapper-perma";
                }

                that.wrapper = wrapper;
            };

            this.bind = function(event, cb, caller) {
                that.events[event].push({ftc : caller ? cb.bind(caller) : cb, caller : caller});
            };

            this.initwrap();
            this.initbind();
        };

        this.find = function(inMain) {
            var toDelete = document.querySelectorAll("body > .lml-modal-wrapper .lml-modal:not(.lml-modal-perma)");
            for (var i = 0; i < toDelete.length; i++) {
                toDelete[i].parentElement.remove();
            }

            toDelete = document.querySelectorAll(".lml-modal-wrapper:empty");
            for (var i = 0; i < toDelete.length; i++) {
                toDelete[i].remove();
            }

            var allmodals = (inMain ? document.getElementById('lml-main') : document).querySelectorAll('.lml-modal');
            for (var i = 0; i < allmodals.length; i++) {
                var mod = allmodals[i];

                _modals[mod.id] = new LMLModal(mod);
            }

            log('Modals', 'Found ' + allmodals.length + ' Lilium Modals in page');
            _modals["lml-error-modal"] = new LMLModal(document.getElementById('lml-error-modal'));
        };

        this.get = function(id) {
            return _modals[id];
        };

        this.error = this.alert = function(title, message) {
            var errmod = _modals["lml-error-modal"];
            errmod.elem.querySelector('.lml-modal-title').textContent = title || "Error";
            errmod.elem.querySelector('.lml-modal-body p').textContent = message || "";

            errmod.show();
        };

        this.ask = this.prompt = function(options, callback) {
            var askmod = _modals["lml-prompt-modal"];
            askmod.elem.querySelector('.lml-modal-title').textContent  = options.title      || "Prompt";
            askmod.elem.querySelector('.lml-modal-body p').textContent = options.message    || "Continue?";
            askmod.elem.querySelector('.lml-modal-accept').textContent = options.accepttext || "Yes";
            askmod.elem.querySelector('.lml-modal-cancel').textContent = options.canceltext || "No";
            
            window["lml-prompt-modal_accept"] = callback;

            askmod.cast();
        };
    };

    var LMLSession = function() {
        this.current = {};
        this.allUsers = [];
        this.users = {};

        this.init = function() {
            log('Session', 'Recrieving session');
            this.current = liliumcms.livevars.retrieveVar('session');
            this.allUsers = liliumcms.livevars.livevars()["entities.cached"];

            var that = this;
            this.allUsers.forEach(function(u) {
                that.users[u._id] = u;
            });
        }

        this.getCachedUsers = function() {
            return this.users;
        }
    };

    var LMLRights = function() {
        var roles;
        
        this.init = function() {
            roles = liliumcms.session.current.roles;
            this.createCSS();
        };

        this.createCSS = function() {
            for (var i = 0; i < roles.length; i++) {
                document.body.classList.add("role-" + roles[i]);
            }
        };

        this.hasRole = function(role) {
            return roles.indexOf(role) != -1;
        };
    };

    var Animator = function() {
        var that = this;
        this.slide = function() {
            var sliders = document.querySelectorAll(".init-anim");
            var delay = 200;

            for (var i = 0; i < sliders.length; i++) {
                (function(i) {
                    setTimeout(function() {
                        sliders[i].classList.add("anim-slid");
                    }, delay * i);
                })(i);
            }
        };

        this.unslide = function(ddelay) {
            var sliders = document.querySelectorAll(".anim-slid");
            var delay = ddelay || 200;

            for (var i = sliders.length; i >= 0; i--) {
                (function(i) {
                    setTimeout(function() {
                        sliders[i] && sliders[i].classList.remove("anim-slid");
                    }, delay * i);
                })(i);
            }
        };

        this.present = function() {
            this.slide();
        };  

        this.finish = function(delay) {
            this.unslide(delay);
        };
    };

    this.initjewels = function() {
        d.id('topbar-profile-name').bind('click', function() {
            d.id('topbar-profile-name').get().classList.toggle("dropped");
        });  

        d.id('dropdown-notification').bind('click', function() {
            d.id('dropdown-notification').get().classList.toggle("dropped");
        });  

        d.id('lml-main').bind('click', function() {
            d.id('topbar-profile-name').get().classList.remove("dropped");
            d.id('dropdown-notification').get().classList.remove("dropped");
        });
    };

    this.initBind = function(callback) {
        initialBinds.push(callback);
    };

    this.everythingIsAwesome = function() {
        log('Lilium', 'Everything is awesome! Cleaning up...', 'lilium');
        $('.dropdown-menu #avatar img').attr('src', that.livevars.livevars().session.avatarURL);
        $('body').addClass('lmlrendered');
        $('undefined, lml-livevars').remove();

        if (Notification.permission !== "granted") {
            log('Lilium', 'Requesting permission to push desktop notifications');
            Notification.requestPermission();
        }

        initialBinds.forEach(function(cb) { cb(); });
    };

    var AwesomeStrapper = function() {
        this.strap = function() {
            var lmlhtml5 = new LMLHTML5();
            that.cdn = new LMLCDN();
            that.queryparams = new QueryParams();
            that.formvalidator = new FormValidator();
            that.formParser = new FormParser();
            that.pageloader = new PageLoader();
            that.imagepicker = new LMLImagePicker();
            that.previewer = new LMLPreviewer();
            that.animator = new Animator();
            that.localclip = new LocalClip();
            that.quill = new LMLQuill();
            that.facebook = new LMLFacebook();
            that.lmldom = new LMLDom();
            that.backendsearch = new BackendSearch();
            that.cakepop = new Cakepop();
            that.modals = new LMLModals();
            that.session = new LMLSession();
            that.rights = new LMLRights();
            that.users = new LMLUsers();
            that.badges = new LiliumBadges();
            that.errorhandler = new ErrorHandler();
            that.parseURL();        
            L.Icon.Default.imagePath = "{=config.default.server.url}/static/leaflet/images";

            if (typeof LiveVars !== 'undefined') {
                that.livevars = new LiveVars();
                that.livevars.exec();
            }

            that.ckeditor = typeof CKEditor !== 'undefined' ? new CKEditor() : undefined;
            that.adminmenu = new AdminMenu();
            that.formbeautifier = new FormBeautifier();
            that.imagepicker.init();
            that.previewer.init();
            that.facebook.loadfbscript();
            that.bindFocus();
            
            // liliumcms.lys.bindKeys();

            window.lml = that.lmldom;
        };
    };

    this.awesomestrapper = new AwesomeStrapper();

    // API
    this.refresh = function() {
        window.location.reload();
    };

    var oldBrowsers = function() {
        if (typeof Object.assign === 'undefined') {
            Object.assign = function() {
                var len = arguments.length;
                var newObj = {};
                for (var i = 0; i < len; i++) {
                    var o = arguments[i];
                    for (var k in o) {
                        newObj[k] = o[k];
                    }
                }

                return newObj;
            }
        };
    };

    var init = function() {
        oldBrowsers();
        var pathname = window.location.pathname;
        var split = pathname.split('?')[1];
        window.location.params = {};

        if (split) {
            split = split.split('&');
            for (var i = 0; i < split.length; i++) {
                var keyVal = split[i].split('=');
                window.location.params[keyVal[0]] = keyVal[1];
            }
        }
    };
    init();
};
var liliumcms = new LiliumCMS();
window.d = DOM;

$(document).ready(function() {
    liliumcms.awesomestrapper.strap();
});
 
document.addEventListener('livevarsRendered', function(e) {
    if (!liliumcms.admininit) {
        liliumcms.admininit = true;

        log('Lilium', 'Awesomestrapping some amazingness', 'lilium');

        liliumcms.queryparams.parseURL();
        liliumcms.session.init();
        liliumcms.initjewels();
        liliumcms.ckeditor && liliumcms.ckeditor.initEditor();
        liliumcms.adminmenu.init();
        liliumcms.modals.find();
        liliumcms.pageloader.parseAdminPanel();
        liliumcms.pageloader.loadCurrentURL();
        liliumcms.pageloader.bindHistory();
        liliumcms.lmldom.init();
        liliumcms.rights.init();
        liliumcms.badges.bind();
        liliumcms.backendsearch.bind();
        liliumcms.cakepop.initWithLivevar();
        liliumcms.everythingIsAwesome();
    } else {
        liliumcms.queryparams.parseURL();
        liliumcms.quill.reset();
        liliumcms.users.cacheUsers();
        liliumcms.lmldom.parse(function(lmldom) {
            liliumcms.imagepicker.seek();
            liliumcms.imagepicker.refresh();
            !lmldom && liliumcms.modals.find(true);
            !lmldom && liliumcms.formParser.init();
            liliumcms.formbeautifier.beautify();
            liliumcms.pageloader.parseDocument();
            liliumcms.livevars.parseDataLivevars();
            liliumcms.multiselects.forEach(function(select) {
                if (!select.isRendered) {
                    select.render();
                }
            });
            liliumcms.pageloader.present();
            liliumcms.animator.present();
        });
    }
});
