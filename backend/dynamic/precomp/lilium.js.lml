/*********************************************************************************************************
 *                                                                                                       *
 *  88          88 88 88                                     ,ad8888ba,  88b           d88  ad88888ba    *
 *  88          "" 88 ""                                    d8"'    `"8b 888b         d888 d8"     "8b   *
 *  88             88                                      d8'           88`8b       d8'88 Y8,           *
 *  88          88 88 88 88       88 88,dPYba,,adPYba,     88            88 `8b     d8' 88 `Y8aaaaa,     *
 *  88          88 88 88 88       88 88P'   "88"    "8a    88            88  `8b   d8'  88   `"""""8b,   *
 *  88          88 88 88 88       88 88      88      88    Y8,           88   `8b d8'   88         `8b   *
 *  88          88 88 88 "8a,   ,a88 88      88      88     Y8a.    .a8P 88    `888'    88 Y8a     a8P   *
 *  88888888888 88 88 88  `"YbbdP'Y8 88      88      88      `"Y8888Y"'  88     `8'     88  "Y88888P"    *
 *                                                                                                       *
 *********************************************************************************************************
 * LILIUM CMS | GLOBAL FRONTEND JAVASCRIPT                                                               *
 *                                                                                                       *
 * Author : Erik Desjardins                                                                              *
 * Contributors : Samuel Rondeau-Millaire                                                                *
 * Description : Global styling for admin section of Lilium.                                             *
 * Documentation : http://liliumcms.com/docs                                                             *
 *********************************************************************************************************/
{#config}
var debugMode = 'true';
var socket = typeof io !== 'undefined' ? io() : undefined;

window.location.urlBase = "{=config.default.server.url}/";

var LiliumCMS = function() {
    var livevarsResponse;
    var urlParams;
    this.pushtables = new Array();
    this.multiselects = new Array();
    var stacktables = new Array();
    var queryParams = new Object();

    this.queryparams;
    this.formvalidator;
    this.formParser;
    this.livevars;
    this.ckeditor;
    this.adminmenu;
    this.formbeautifier;
    this.multiselect;

    var that = this;

    this.LiliumEvents = {
        livevarsPrerendered: {
            name: "livevarsPrerendered"
        },
        livevarsRendered: {
            name: "livevarsRendered"
        },
        livevarsFetched: {
            name: "livevarsFetched"
        }
    };


    this.getUrlParams = function() {
        return urlParams;
    }

    var FormBeautifier = function() {
        var createCheckboxWrapper = function(oObj) {
            var obj = document.createElement('div');
            obj.setAttribute('name', oObj.getAttribute('name'));
            obj.classList.add('lmlbeautifiedcheckbox');
            if (oObj.checked) {
                obj.classList.add("checked");
            }

            return obj;
        };

        this.beautify = function() {
            $('input[type="checkbox"]:not(.systeminput)').each(function(index, cbox) {
                var beautifulCheckbox = $(createCheckboxWrapper(cbox));

                $(beautifulCheckbox).bind('click', function() {
                    $(this).toggleClass('checked');
                    cbox.checked = $(this).hasClass('checked');
                });

                $(cbox).bind('change', function() {
                    $(beautifulCheckbox)[cbox.checked ? "addClass" : "removeClass"]('checked');
                });

                $(cbox).after(beautifulCheckbox);
            });
        };
    };

    var FormValidator = function() {
        this.prepareValidation = function(cb) {
            $(document).ready(function() {
                $('.v_form_validate').submit(function(e) {
                    e.preventDefault();
                    var validForm = true;

                    $(this).find('.v_validate ').each(function() {
                        var validField = true;

                        // If a field : text, textarea
                        if ($(this).attr('type') == 'text' ||
                            $(this).attr('type') == 'textarea' ||
                            $(this).attr('type') == 'email' ||
                            $(this).attr('type') == 'password') {

                            if ($(this).attr('required') && $(this).val().length == 0) {
                                validField = false;
                            }

                            // Min and maxlength verification
                            if ($(this).attr('minlength') && $(this).val().length < $(this).attr('minlength')) {
                                validField = false;
                            } else if ($(this).attr('maxlength') && $(this).val().length > $(this).attr('maxlength')) {
                                validField = false;
                            }
                        }


                        if ($(this).attr('type') == 'checkbox' && $(this).attr('required') && !$(this).is(':checked')) {
                            validField = false;
                        }

                        if ($(this).attr('type') == 'number') {
                            // Min and maxlength verification
                            if ($(this).attr('min') && $(this).val() < $(this).attr('min')) {

                                validField = false;
                            } else if ($(this).attr('max') && $(this).val() > $(this).attr('max')) {

                                validField = false;
                            }
                        }
                        $('[ckeditor]').val($('[ckeditor]').ckeditor().val());

                        if (!validField) {
                            validForm = validField;
                        }

                        if (!validField) {
                            $(this).removeClass('v_valid');
                            $(this).addClass('v_invalid');
                        } else {
                            $(this).removeClass('v_invalid');
                            $(this).addClass('v_valid');
                        }


                    });
                    if (validForm) {
                        // Send via ajax
                        processForm($(this));
                    }
                    return false;
                });

                var processForm = function(form) {
                    var that = this;
                    var serialized_form = form.serialize();
                    // Process files
                    processFiles(form, function() {
                        $.post(form.attr('action') || window.location.href.toString(), serialized_form, function(data) {
                            if (data.success && data.redirect) {
                                window.location.replace(data.redirect);
                            }
                            var event = new CustomEvent('formSubmited', {
                                'detail': data
                            });
                            document.dispatchEvent(event);
                            return false;
                        });
                        if (cb) cb();
                    });
                    return false;

                };

                var processFiles = function(form, cb) {
                    if (form.find('input[type=file]').length > 0) {
                        var data = new FormData();
                        jQuery.each(form.find('input[type=file]')[0].files, function(i, file) {
                            data.append('file-' + i, file);
                        });

                        jQuery.ajax({
                            url: form.attr('action'),
                            data: data,
                            cache: false,
                            contentType: false,
                            processData: false,
                            type: 'POST',
                            success: function(data) {
                                return cb();
                            }
                        });
                    } else {
                        return cb();
                    }
                };
            });
        };
    }

    var LocalCache = function() {
        var cache = window.localStorage;

        this.cacheForm = function() {

        };

        this.fillFormFromCache = function(formName) {

        };

        this.setVar = function(key, value) {
            window.localStorage.setItem(key, value);
        };

        this.getVar = function(key) {
            var item = window.localStorage.getItem(key);
            return item == null ? undefined : item;
        };

        cache.forms = cache.forms || new Object();
        cache.adminmenus = cache.adminmenus || new Object();
    };

    var findPushTableFromTitle = function(title) {
        var pt = undefined;
        for (var i = 0; i < pushtables.length; i++) {
            if (pushtables[i].title == title) {
                pt = pushtables[i];
                break;
            }
        }

        return pt;
    }

    this.fillFormFromSource = function(src, data, index) {

        index = typeof index == 'undefined' ? 0: index;
        var form = $('form[name="' + src + '"]:nth-of-type('+ index+1 +')');

        $(form).find('select[multiple]').each(function(index, osSelect) {
            var select = new MultiSelect(
                sTable.attr('id'),
                sTable.data('title'),
                JSON.parse(osSelect.dataset.scheme.replace(/\&lmlquote;/g, '"'))
            );
        });

        // Check for stacktable
        $(form).find('table.lmlstacktable').each(function(index, osTable) {
            sTable = $(osTable);
            var stackTable = new StackTable(
                sTable.attr('id'),
                sTable.data('title'),
                JSON.parse(osTable.dataset.scheme.replace(/\&lmlquote;/g, '"'))
            );

            stackTable.appendRow(data);

        });

        var foreachloop = function(data, kString) {
             for (var key in data) {
                var kkString = kString + (kString == "" ? "" : ".") + key;
                var val = data[key];
                var pt = undefined;

                if (typeof val === "object") {
                    foreachloop(val, kkString);
                } else {
                    var field = form.find('*[name="' + kkString + '"]');
                    if (field.length > 0) {
                        if (field.attr('type') == 'checkbox') {
                            field.get(0).checked = val === true;
                        } else {
                            field.val(val);
                        }
                    } else if ((pt = findPushTableFromTitle(kkString))) {
                        pt.fillFromSource(val);
                    }
                }
            }

        }

        if (form.length != 0) {
            foreachloop(data, "");
        }
    };

    var FormParser = function() {
        var makeSingleStackTable = this.makeSingleStackTable = function(index, osTable) {
            sTable = $(osTable);
            var stackTable = new StackTable(
                sTable.attr('id'),
                sTable.data('title'),
                JSON.parse(osTable.dataset.scheme.replace(/\&lmlquote;/g, '"'))
            );

            osTable.dataset.stacktableindex = index;
            stacktables.push(stackTable);
        };

        var makeStackTables = function() {
            $('.lmlstacktable').each(makeSingleStackTable);
        };

        this.parse = function(selector) {
            $("form").deserialize(that.livevars.livevars()[selector][0]);
        };

        this.init = function() {
            makeStackTables();
        };
    };

    var AdminMenu = function() {
        this.init = function() {
            var currentHref = window.location.href;
            var looping = true;

            $('.lmladminsidebaritems li').each(function(index, li) {
                li = $(li);
                var href = li.find('a').attr('href');
                // Check if menu as submenus
                if (li.find('ul > li').size() > 0) {
                    li.addClass('parent');
                    li.find('> a').append('<i class="fa fa-angle-left"></i>');
                }
                if (looping) {
                    if (currentHref.indexOf(href) !== -1) {
                        // Check if child
                        if (li.parent().parent().hasClass('parent')) {
                            li.parent().parent().addClass('child-selected');
                        }
                        li.addClass('lmladminsidebarselected');
                        looping = false;
                    }
                }
            });
        };
    };

    var QueryParams = function() {
        this.parseURL = function() {
            var querystring = window.location.href.split("?");
            if (querystring.length > 1) {
                var unescapedParams = querystring[1].split('&');

                for (var i = 0; i < unescapedParams.length; i++) {
                    var split = unescapedParams[i].split('=');
                    queryParams[split.shift()] = unescape(split.join('='));
                }

                liliumcms.queryparams.parseHTML();
            }
        };

        this.parseHTML = function() {
            $('lml\\:queryparam').each(function(index, qTag) {
                var urlval = queryParams[$(qTag).data('param')];

                if (urlval) {
                    $(qTag).find('lml\\:tobject').each(function(index, tobj) {
                        $(tobj).after(queryParams[$(tobj).data("querystring")]);
                        $(tobj).remove();
                    });

                    $(qTag).after(qTag.innerHTML);
                }

                $(qTag).remove();
            });
        };
    }

    var Hooks = function() {

    };

    var LMLHTML5 = function() {
        var init = function() {

        };

        init();
    };

    this.everythingIsAwesome = function() {
        $('.dropdown-menu #avatar img').attr('src', that.livevars.livevars().session.avatarURL);

        $('body').addClass('lmlrendered');

    };

    var AwesomeStrapper = function() {
        this.strap = function() {
            var lmlhtml5 = new LMLHTML5();
            that.queryparams = new QueryParams();
            that.formvalidator = new FormValidator();
            that.formParser = new FormParser();
            if (typeof LiveVars !== 'undefined') {
                that.livevars = new LiveVars();
                that.livevars.exec();

            }
            that.ckeditor = typeof CKEditor !== 'undefined' ? new CKEditor() : undefined;
            that.adminmenu = new AdminMenu();
            that.formbeautifier = new FormBeautifier();
        };
    };

    this.awesomestrapper = new AwesomeStrapper();


    // API
    this.refresh = function() {
        window.location.reload();
    };

    var init = function() {
        var pathname = window.location.pathname;
        var split = pathname.split('?')[1];
        window.location.params = new Object();

        if (split) {
            split = split.split('&');
            for (var i = 0; i < split.length; i++) {
                var keyVal = split[i].split('=');
                window.location.params[keyVal[0]] = keyVal[1];
            }
        }
    };
    $(document).ready(function(){
        init();

    });
};
var liliumcms = new LiliumCMS();

$(document).ready(function(){

    liliumcms.awesomestrapper.strap();

});

document.addEventListener('livevarsRendered', function(e) {
    liliumcms.multiselects.forEach(function(select) {
        select.render();

    });
    liliumcms.queryparams.parseURL();
    liliumcms.ckeditor ? liliumcms.ckeditor.initEditor() : false ;
    liliumcms.formbeautifier.beautify();
    liliumcms.formParser.init();
    liliumcms.adminmenu.init();
    liliumcms.everythingIsAwesome();
});
